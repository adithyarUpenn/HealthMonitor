
HealthMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001dfc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00001dfc  00001dfc  00011dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000074  20000000  00001e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004c4  20000074  00001e78  00020074  2**2
                  ALLOC
  4 .stack        00002000  20000538  0000233c  00020074  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00025162  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003c6d  00000000  00000000  00045257  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000042fe  00000000  00000000  00048ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000538  00000000  00000000  0004d1c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000538  00000000  00000000  0004d6fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00008f51  00000000  00000000  0004dc32  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000dc3e  00000000  00000000  00056b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00090c48  00000000  00000000  000647c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000d0c  00000000  00000000  000f540c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 25 00 20 b1 16 00 00 ad 16 00 00 ad 16 00 00     8%. ............
	...
      2c:	ad 16 00 00 00 00 00 00 00 00 00 00 ad 16 00 00     ................
      3c:	ad 16 00 00 ad 16 00 00 ad 16 00 00 ad 16 00 00     ................
      4c:	ad 16 00 00 ad 16 00 00 ad 16 00 00 ad 16 00 00     ................
      5c:	ad 16 00 00 ad 16 00 00 f9 04 00 00 09 05 00 00     ................
      6c:	19 05 00 00 29 05 00 00 39 05 00 00 49 05 00 00     ....)...9...I...
      7c:	ad 16 00 00 ad 16 00 00 ad 16 00 00 ad 16 00 00     ................
      8c:	ad 16 00 00 ad 16 00 00 00 00 00 00 00 00 00 00     ................
      9c:	ad 16 00 00 ad 16 00 00 ad 16 00 00 ad 16 00 00     ................
      ac:	ad 16 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
      d8:	00001e04 	.word	0x00001e04

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	00001e04 	.word	0x00001e04
     10c:	00001e04 	.word	0x00001e04
     110:	00000000 	.word	0x00000000

00000114 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	46de      	mov	lr, fp
     118:	4657      	mov	r7, sl
     11a:	464e      	mov	r6, r9
     11c:	4645      	mov	r5, r8
     11e:	b5e0      	push	{r5, r6, r7, lr}
     120:	b087      	sub	sp, #28
     122:	4680      	mov	r8, r0
     124:	9104      	str	r1, [sp, #16]
     126:	0016      	movs	r6, r2
     128:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     12a:	2200      	movs	r2, #0
     12c:	2300      	movs	r3, #0
     12e:	2100      	movs	r1, #0
     130:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     132:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     134:	2001      	movs	r0, #1
     136:	0021      	movs	r1, r4
     138:	9600      	str	r6, [sp, #0]
     13a:	9701      	str	r7, [sp, #4]
     13c:	465c      	mov	r4, fp
     13e:	9403      	str	r4, [sp, #12]
     140:	4644      	mov	r4, r8
     142:	9405      	str	r4, [sp, #20]
     144:	e013      	b.n	16e <long_division+0x5a>
     146:	2420      	movs	r4, #32
     148:	1a64      	subs	r4, r4, r1
     14a:	0005      	movs	r5, r0
     14c:	40e5      	lsrs	r5, r4
     14e:	46a8      	mov	r8, r5
     150:	e014      	b.n	17c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     152:	9c00      	ldr	r4, [sp, #0]
     154:	9d01      	ldr	r5, [sp, #4]
     156:	1b12      	subs	r2, r2, r4
     158:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     15a:	465c      	mov	r4, fp
     15c:	464d      	mov	r5, r9
     15e:	432c      	orrs	r4, r5
     160:	46a3      	mov	fp, r4
     162:	9c03      	ldr	r4, [sp, #12]
     164:	4645      	mov	r5, r8
     166:	432c      	orrs	r4, r5
     168:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     16a:	3901      	subs	r1, #1
     16c:	d325      	bcc.n	1ba <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     16e:	2420      	movs	r4, #32
     170:	4264      	negs	r4, r4
     172:	190c      	adds	r4, r1, r4
     174:	d4e7      	bmi.n	146 <long_division+0x32>
     176:	0005      	movs	r5, r0
     178:	40a5      	lsls	r5, r4
     17a:	46a8      	mov	r8, r5
     17c:	0004      	movs	r4, r0
     17e:	408c      	lsls	r4, r1
     180:	46a1      	mov	r9, r4
		r = r << 1;
     182:	1892      	adds	r2, r2, r2
     184:	415b      	adcs	r3, r3
     186:	0014      	movs	r4, r2
     188:	001d      	movs	r5, r3
		if (n & bit_shift) {
     18a:	9e05      	ldr	r6, [sp, #20]
     18c:	464f      	mov	r7, r9
     18e:	403e      	ands	r6, r7
     190:	46b4      	mov	ip, r6
     192:	9e04      	ldr	r6, [sp, #16]
     194:	4647      	mov	r7, r8
     196:	403e      	ands	r6, r7
     198:	46b2      	mov	sl, r6
     19a:	4666      	mov	r6, ip
     19c:	4657      	mov	r7, sl
     19e:	433e      	orrs	r6, r7
     1a0:	d003      	beq.n	1aa <long_division+0x96>
			r |= 0x01;
     1a2:	0006      	movs	r6, r0
     1a4:	4326      	orrs	r6, r4
     1a6:	0032      	movs	r2, r6
     1a8:	002b      	movs	r3, r5
		if (r >= d) {
     1aa:	9c00      	ldr	r4, [sp, #0]
     1ac:	9d01      	ldr	r5, [sp, #4]
     1ae:	429d      	cmp	r5, r3
     1b0:	d8db      	bhi.n	16a <long_division+0x56>
     1b2:	d1ce      	bne.n	152 <long_division+0x3e>
     1b4:	4294      	cmp	r4, r2
     1b6:	d8d8      	bhi.n	16a <long_division+0x56>
     1b8:	e7cb      	b.n	152 <long_division+0x3e>
     1ba:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     1bc:	4658      	mov	r0, fp
     1be:	0019      	movs	r1, r3
     1c0:	b007      	add	sp, #28
     1c2:	bc3c      	pop	{r2, r3, r4, r5}
     1c4:	4690      	mov	r8, r2
     1c6:	4699      	mov	r9, r3
     1c8:	46a2      	mov	sl, r4
     1ca:	46ab      	mov	fp, r5
     1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000001ce <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     1ce:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     1d0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1d2:	2340      	movs	r3, #64	; 0x40
     1d4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     1d6:	4281      	cmp	r1, r0
     1d8:	d202      	bcs.n	1e0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     1da:	0018      	movs	r0, r3
     1dc:	bd10      	pop	{r4, pc}
		baud_calculated++;
     1de:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     1e0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     1e2:	1c63      	adds	r3, r4, #1
     1e4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     1e6:	4288      	cmp	r0, r1
     1e8:	d9f9      	bls.n	1de <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1ea:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     1ec:	2cff      	cmp	r4, #255	; 0xff
     1ee:	d8f4      	bhi.n	1da <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     1f0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     1f2:	2300      	movs	r3, #0
     1f4:	e7f1      	b.n	1da <_sercom_get_sync_baud_val+0xc>
	...

000001f8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	b083      	sub	sp, #12
     1fc:	000f      	movs	r7, r1
     1fe:	0016      	movs	r6, r2
     200:	aa08      	add	r2, sp, #32
     202:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     204:	0004      	movs	r4, r0
     206:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     208:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     20a:	42bc      	cmp	r4, r7
     20c:	d902      	bls.n	214 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     20e:	0010      	movs	r0, r2
     210:	b003      	add	sp, #12
     212:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     214:	2b00      	cmp	r3, #0
     216:	d114      	bne.n	242 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     218:	0002      	movs	r2, r0
     21a:	0008      	movs	r0, r1
     21c:	2100      	movs	r1, #0
     21e:	4c19      	ldr	r4, [pc, #100]	; (284 <_sercom_get_async_baud_val+0x8c>)
     220:	47a0      	blx	r4
     222:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     224:	003a      	movs	r2, r7
     226:	2300      	movs	r3, #0
     228:	2000      	movs	r0, #0
     22a:	4c17      	ldr	r4, [pc, #92]	; (288 <_sercom_get_async_baud_val+0x90>)
     22c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     22e:	2200      	movs	r2, #0
     230:	2301      	movs	r3, #1
     232:	1a12      	subs	r2, r2, r0
     234:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     236:	0c12      	lsrs	r2, r2, #16
     238:	041b      	lsls	r3, r3, #16
     23a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     23c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     23e:	2200      	movs	r2, #0
     240:	e7e5      	b.n	20e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     242:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     244:	2b01      	cmp	r3, #1
     246:	d1f9      	bne.n	23c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     248:	000a      	movs	r2, r1
     24a:	2300      	movs	r3, #0
     24c:	2100      	movs	r1, #0
     24e:	4c0d      	ldr	r4, [pc, #52]	; (284 <_sercom_get_async_baud_val+0x8c>)
     250:	47a0      	blx	r4
     252:	0002      	movs	r2, r0
     254:	000b      	movs	r3, r1
     256:	9200      	str	r2, [sp, #0]
     258:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     25a:	0038      	movs	r0, r7
     25c:	2100      	movs	r1, #0
     25e:	4c0a      	ldr	r4, [pc, #40]	; (288 <_sercom_get_async_baud_val+0x90>)
     260:	47a0      	blx	r4
     262:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     264:	2380      	movs	r3, #128	; 0x80
     266:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     268:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     26a:	4298      	cmp	r0, r3
     26c:	d8cf      	bhi.n	20e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     26e:	0f79      	lsrs	r1, r7, #29
     270:	00f8      	lsls	r0, r7, #3
     272:	9a00      	ldr	r2, [sp, #0]
     274:	9b01      	ldr	r3, [sp, #4]
     276:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     278:	00ea      	lsls	r2, r5, #3
     27a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     27c:	b2d2      	uxtb	r2, r2
     27e:	0352      	lsls	r2, r2, #13
     280:	432a      	orrs	r2, r5
     282:	e7db      	b.n	23c <_sercom_get_async_baud_val+0x44>
     284:	000019e5 	.word	0x000019e5
     288:	00000115 	.word	0x00000115

0000028c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     28c:	b510      	push	{r4, lr}
     28e:	b082      	sub	sp, #8
     290:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     292:	4b0e      	ldr	r3, [pc, #56]	; (2cc <sercom_set_gclk_generator+0x40>)
     294:	781b      	ldrb	r3, [r3, #0]
     296:	2b00      	cmp	r3, #0
     298:	d007      	beq.n	2aa <sercom_set_gclk_generator+0x1e>
     29a:	2900      	cmp	r1, #0
     29c:	d105      	bne.n	2aa <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     29e:	4b0b      	ldr	r3, [pc, #44]	; (2cc <sercom_set_gclk_generator+0x40>)
     2a0:	785b      	ldrb	r3, [r3, #1]
     2a2:	4283      	cmp	r3, r0
     2a4:	d010      	beq.n	2c8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     2a6:	201d      	movs	r0, #29
     2a8:	e00c      	b.n	2c4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     2aa:	a901      	add	r1, sp, #4
     2ac:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     2ae:	2013      	movs	r0, #19
     2b0:	4b07      	ldr	r3, [pc, #28]	; (2d0 <sercom_set_gclk_generator+0x44>)
     2b2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     2b4:	2013      	movs	r0, #19
     2b6:	4b07      	ldr	r3, [pc, #28]	; (2d4 <sercom_set_gclk_generator+0x48>)
     2b8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     2ba:	4b04      	ldr	r3, [pc, #16]	; (2cc <sercom_set_gclk_generator+0x40>)
     2bc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     2be:	2201      	movs	r2, #1
     2c0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     2c2:	2000      	movs	r0, #0
}
     2c4:	b002      	add	sp, #8
     2c6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     2c8:	2000      	movs	r0, #0
     2ca:	e7fb      	b.n	2c4 <sercom_set_gclk_generator+0x38>
     2cc:	20000090 	.word	0x20000090
     2d0:	00001555 	.word	0x00001555
     2d4:	000014c9 	.word	0x000014c9

000002d8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     2d8:	4b40      	ldr	r3, [pc, #256]	; (3dc <_sercom_get_default_pad+0x104>)
     2da:	4298      	cmp	r0, r3
     2dc:	d031      	beq.n	342 <_sercom_get_default_pad+0x6a>
     2de:	d90a      	bls.n	2f6 <_sercom_get_default_pad+0x1e>
     2e0:	4b3f      	ldr	r3, [pc, #252]	; (3e0 <_sercom_get_default_pad+0x108>)
     2e2:	4298      	cmp	r0, r3
     2e4:	d04d      	beq.n	382 <_sercom_get_default_pad+0xaa>
     2e6:	4b3f      	ldr	r3, [pc, #252]	; (3e4 <_sercom_get_default_pad+0x10c>)
     2e8:	4298      	cmp	r0, r3
     2ea:	d05a      	beq.n	3a2 <_sercom_get_default_pad+0xca>
     2ec:	4b3e      	ldr	r3, [pc, #248]	; (3e8 <_sercom_get_default_pad+0x110>)
     2ee:	4298      	cmp	r0, r3
     2f0:	d037      	beq.n	362 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     2f2:	2000      	movs	r0, #0
}
     2f4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     2f6:	4b3d      	ldr	r3, [pc, #244]	; (3ec <_sercom_get_default_pad+0x114>)
     2f8:	4298      	cmp	r0, r3
     2fa:	d00c      	beq.n	316 <_sercom_get_default_pad+0x3e>
     2fc:	4b3c      	ldr	r3, [pc, #240]	; (3f0 <_sercom_get_default_pad+0x118>)
     2fe:	4298      	cmp	r0, r3
     300:	d1f7      	bne.n	2f2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     302:	2901      	cmp	r1, #1
     304:	d017      	beq.n	336 <_sercom_get_default_pad+0x5e>
     306:	2900      	cmp	r1, #0
     308:	d05d      	beq.n	3c6 <_sercom_get_default_pad+0xee>
     30a:	2902      	cmp	r1, #2
     30c:	d015      	beq.n	33a <_sercom_get_default_pad+0x62>
     30e:	2903      	cmp	r1, #3
     310:	d015      	beq.n	33e <_sercom_get_default_pad+0x66>
	return 0;
     312:	2000      	movs	r0, #0
     314:	e7ee      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     316:	2901      	cmp	r1, #1
     318:	d007      	beq.n	32a <_sercom_get_default_pad+0x52>
     31a:	2900      	cmp	r1, #0
     31c:	d051      	beq.n	3c2 <_sercom_get_default_pad+0xea>
     31e:	2902      	cmp	r1, #2
     320:	d005      	beq.n	32e <_sercom_get_default_pad+0x56>
     322:	2903      	cmp	r1, #3
     324:	d005      	beq.n	332 <_sercom_get_default_pad+0x5a>
	return 0;
     326:	2000      	movs	r0, #0
     328:	e7e4      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     32a:	4832      	ldr	r0, [pc, #200]	; (3f4 <_sercom_get_default_pad+0x11c>)
     32c:	e7e2      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     32e:	4832      	ldr	r0, [pc, #200]	; (3f8 <_sercom_get_default_pad+0x120>)
     330:	e7e0      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     332:	4832      	ldr	r0, [pc, #200]	; (3fc <_sercom_get_default_pad+0x124>)
     334:	e7de      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     336:	4832      	ldr	r0, [pc, #200]	; (400 <_sercom_get_default_pad+0x128>)
     338:	e7dc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     33a:	4832      	ldr	r0, [pc, #200]	; (404 <_sercom_get_default_pad+0x12c>)
     33c:	e7da      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     33e:	4832      	ldr	r0, [pc, #200]	; (408 <_sercom_get_default_pad+0x130>)
     340:	e7d8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     342:	2901      	cmp	r1, #1
     344:	d007      	beq.n	356 <_sercom_get_default_pad+0x7e>
     346:	2900      	cmp	r1, #0
     348:	d03f      	beq.n	3ca <_sercom_get_default_pad+0xf2>
     34a:	2902      	cmp	r1, #2
     34c:	d005      	beq.n	35a <_sercom_get_default_pad+0x82>
     34e:	2903      	cmp	r1, #3
     350:	d005      	beq.n	35e <_sercom_get_default_pad+0x86>
	return 0;
     352:	2000      	movs	r0, #0
     354:	e7ce      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     356:	482d      	ldr	r0, [pc, #180]	; (40c <_sercom_get_default_pad+0x134>)
     358:	e7cc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     35a:	482d      	ldr	r0, [pc, #180]	; (410 <_sercom_get_default_pad+0x138>)
     35c:	e7ca      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     35e:	482d      	ldr	r0, [pc, #180]	; (414 <_sercom_get_default_pad+0x13c>)
     360:	e7c8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     362:	2901      	cmp	r1, #1
     364:	d007      	beq.n	376 <_sercom_get_default_pad+0x9e>
     366:	2900      	cmp	r1, #0
     368:	d031      	beq.n	3ce <_sercom_get_default_pad+0xf6>
     36a:	2902      	cmp	r1, #2
     36c:	d005      	beq.n	37a <_sercom_get_default_pad+0xa2>
     36e:	2903      	cmp	r1, #3
     370:	d005      	beq.n	37e <_sercom_get_default_pad+0xa6>
	return 0;
     372:	2000      	movs	r0, #0
     374:	e7be      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     376:	4828      	ldr	r0, [pc, #160]	; (418 <_sercom_get_default_pad+0x140>)
     378:	e7bc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     37a:	4828      	ldr	r0, [pc, #160]	; (41c <_sercom_get_default_pad+0x144>)
     37c:	e7ba      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     37e:	4828      	ldr	r0, [pc, #160]	; (420 <_sercom_get_default_pad+0x148>)
     380:	e7b8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     382:	2901      	cmp	r1, #1
     384:	d007      	beq.n	396 <_sercom_get_default_pad+0xbe>
     386:	2900      	cmp	r1, #0
     388:	d023      	beq.n	3d2 <_sercom_get_default_pad+0xfa>
     38a:	2902      	cmp	r1, #2
     38c:	d005      	beq.n	39a <_sercom_get_default_pad+0xc2>
     38e:	2903      	cmp	r1, #3
     390:	d005      	beq.n	39e <_sercom_get_default_pad+0xc6>
	return 0;
     392:	2000      	movs	r0, #0
     394:	e7ae      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     396:	4823      	ldr	r0, [pc, #140]	; (424 <_sercom_get_default_pad+0x14c>)
     398:	e7ac      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     39a:	4823      	ldr	r0, [pc, #140]	; (428 <_sercom_get_default_pad+0x150>)
     39c:	e7aa      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     39e:	4823      	ldr	r0, [pc, #140]	; (42c <_sercom_get_default_pad+0x154>)
     3a0:	e7a8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3a2:	2901      	cmp	r1, #1
     3a4:	d007      	beq.n	3b6 <_sercom_get_default_pad+0xde>
     3a6:	2900      	cmp	r1, #0
     3a8:	d015      	beq.n	3d6 <_sercom_get_default_pad+0xfe>
     3aa:	2902      	cmp	r1, #2
     3ac:	d005      	beq.n	3ba <_sercom_get_default_pad+0xe2>
     3ae:	2903      	cmp	r1, #3
     3b0:	d005      	beq.n	3be <_sercom_get_default_pad+0xe6>
	return 0;
     3b2:	2000      	movs	r0, #0
     3b4:	e79e      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3b6:	481e      	ldr	r0, [pc, #120]	; (430 <_sercom_get_default_pad+0x158>)
     3b8:	e79c      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ba:	481e      	ldr	r0, [pc, #120]	; (434 <_sercom_get_default_pad+0x15c>)
     3bc:	e79a      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3be:	481e      	ldr	r0, [pc, #120]	; (438 <_sercom_get_default_pad+0x160>)
     3c0:	e798      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3c2:	481e      	ldr	r0, [pc, #120]	; (43c <_sercom_get_default_pad+0x164>)
     3c4:	e796      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3c6:	2003      	movs	r0, #3
     3c8:	e794      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ca:	481d      	ldr	r0, [pc, #116]	; (440 <_sercom_get_default_pad+0x168>)
     3cc:	e792      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ce:	481d      	ldr	r0, [pc, #116]	; (444 <_sercom_get_default_pad+0x16c>)
     3d0:	e790      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3d2:	481d      	ldr	r0, [pc, #116]	; (448 <_sercom_get_default_pad+0x170>)
     3d4:	e78e      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3d6:	481d      	ldr	r0, [pc, #116]	; (44c <_sercom_get_default_pad+0x174>)
     3d8:	e78c      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	42001000 	.word	0x42001000
     3e0:	42001800 	.word	0x42001800
     3e4:	42001c00 	.word	0x42001c00
     3e8:	42001400 	.word	0x42001400
     3ec:	42000800 	.word	0x42000800
     3f0:	42000c00 	.word	0x42000c00
     3f4:	00050003 	.word	0x00050003
     3f8:	00060003 	.word	0x00060003
     3fc:	00070003 	.word	0x00070003
     400:	00010003 	.word	0x00010003
     404:	001e0003 	.word	0x001e0003
     408:	001f0003 	.word	0x001f0003
     40c:	00090003 	.word	0x00090003
     410:	000a0003 	.word	0x000a0003
     414:	000b0003 	.word	0x000b0003
     418:	00110003 	.word	0x00110003
     41c:	00120003 	.word	0x00120003
     420:	00130003 	.word	0x00130003
     424:	000d0003 	.word	0x000d0003
     428:	000e0003 	.word	0x000e0003
     42c:	000f0003 	.word	0x000f0003
     430:	00170003 	.word	0x00170003
     434:	00180003 	.word	0x00180003
     438:	00190003 	.word	0x00190003
     43c:	00040003 	.word	0x00040003
     440:	00080003 	.word	0x00080003
     444:	00100003 	.word	0x00100003
     448:	000c0003 	.word	0x000c0003
     44c:	00160003 	.word	0x00160003

00000450 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     450:	b530      	push	{r4, r5, lr}
     452:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     454:	4b0b      	ldr	r3, [pc, #44]	; (484 <_sercom_get_sercom_inst_index+0x34>)
     456:	466a      	mov	r2, sp
     458:	cb32      	ldmia	r3!, {r1, r4, r5}
     45a:	c232      	stmia	r2!, {r1, r4, r5}
     45c:	cb32      	ldmia	r3!, {r1, r4, r5}
     45e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     460:	9b00      	ldr	r3, [sp, #0]
     462:	4283      	cmp	r3, r0
     464:	d00b      	beq.n	47e <_sercom_get_sercom_inst_index+0x2e>
     466:	2301      	movs	r3, #1
     468:	009a      	lsls	r2, r3, #2
     46a:	4669      	mov	r1, sp
     46c:	5852      	ldr	r2, [r2, r1]
     46e:	4282      	cmp	r2, r0
     470:	d006      	beq.n	480 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     472:	3301      	adds	r3, #1
     474:	2b06      	cmp	r3, #6
     476:	d1f7      	bne.n	468 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     478:	2000      	movs	r0, #0
}
     47a:	b007      	add	sp, #28
     47c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     47e:	2300      	movs	r3, #0
			return i;
     480:	b2d8      	uxtb	r0, r3
     482:	e7fa      	b.n	47a <_sercom_get_sercom_inst_index+0x2a>
     484:	00001d5c 	.word	0x00001d5c

00000488 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     488:	4770      	bx	lr
	...

0000048c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     48c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     48e:	4b0a      	ldr	r3, [pc, #40]	; (4b8 <_sercom_set_handler+0x2c>)
     490:	781b      	ldrb	r3, [r3, #0]
     492:	2b00      	cmp	r3, #0
     494:	d10c      	bne.n	4b0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     496:	4f09      	ldr	r7, [pc, #36]	; (4bc <_sercom_set_handler+0x30>)
     498:	4e09      	ldr	r6, [pc, #36]	; (4c0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     49a:	4d0a      	ldr	r5, [pc, #40]	; (4c4 <_sercom_set_handler+0x38>)
     49c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     49e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     4a0:	195a      	adds	r2, r3, r5
     4a2:	6014      	str	r4, [r2, #0]
     4a4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4a6:	2b18      	cmp	r3, #24
     4a8:	d1f9      	bne.n	49e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     4aa:	2201      	movs	r2, #1
     4ac:	4b02      	ldr	r3, [pc, #8]	; (4b8 <_sercom_set_handler+0x2c>)
     4ae:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     4b0:	0080      	lsls	r0, r0, #2
     4b2:	4b02      	ldr	r3, [pc, #8]	; (4bc <_sercom_set_handler+0x30>)
     4b4:	50c1      	str	r1, [r0, r3]
}
     4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4b8:	20000092 	.word	0x20000092
     4bc:	20000094 	.word	0x20000094
     4c0:	00000489 	.word	0x00000489
     4c4:	200000d8 	.word	0x200000d8

000004c8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     4c8:	b500      	push	{lr}
     4ca:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     4cc:	2309      	movs	r3, #9
     4ce:	466a      	mov	r2, sp
     4d0:	7013      	strb	r3, [r2, #0]
     4d2:	3301      	adds	r3, #1
     4d4:	7053      	strb	r3, [r2, #1]
     4d6:	3301      	adds	r3, #1
     4d8:	7093      	strb	r3, [r2, #2]
     4da:	3301      	adds	r3, #1
     4dc:	70d3      	strb	r3, [r2, #3]
     4de:	3301      	adds	r3, #1
     4e0:	7113      	strb	r3, [r2, #4]
     4e2:	3301      	adds	r3, #1
     4e4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     4e6:	4b03      	ldr	r3, [pc, #12]	; (4f4 <_sercom_get_interrupt_vector+0x2c>)
     4e8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     4ea:	466b      	mov	r3, sp
     4ec:	5618      	ldrsb	r0, [r3, r0]
}
     4ee:	b003      	add	sp, #12
     4f0:	bd00      	pop	{pc}
     4f2:	46c0      	nop			; (mov r8, r8)
     4f4:	00000451 	.word	0x00000451

000004f8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     4f8:	b510      	push	{r4, lr}
     4fa:	4b02      	ldr	r3, [pc, #8]	; (504 <SERCOM0_Handler+0xc>)
     4fc:	681b      	ldr	r3, [r3, #0]
     4fe:	2000      	movs	r0, #0
     500:	4798      	blx	r3
     502:	bd10      	pop	{r4, pc}
     504:	20000094 	.word	0x20000094

00000508 <SERCOM1_Handler>:
     508:	b510      	push	{r4, lr}
     50a:	4b02      	ldr	r3, [pc, #8]	; (514 <SERCOM1_Handler+0xc>)
     50c:	685b      	ldr	r3, [r3, #4]
     50e:	2001      	movs	r0, #1
     510:	4798      	blx	r3
     512:	bd10      	pop	{r4, pc}
     514:	20000094 	.word	0x20000094

00000518 <SERCOM2_Handler>:
     518:	b510      	push	{r4, lr}
     51a:	4b02      	ldr	r3, [pc, #8]	; (524 <SERCOM2_Handler+0xc>)
     51c:	689b      	ldr	r3, [r3, #8]
     51e:	2002      	movs	r0, #2
     520:	4798      	blx	r3
     522:	bd10      	pop	{r4, pc}
     524:	20000094 	.word	0x20000094

00000528 <SERCOM3_Handler>:
     528:	b510      	push	{r4, lr}
     52a:	4b02      	ldr	r3, [pc, #8]	; (534 <SERCOM3_Handler+0xc>)
     52c:	68db      	ldr	r3, [r3, #12]
     52e:	2003      	movs	r0, #3
     530:	4798      	blx	r3
     532:	bd10      	pop	{r4, pc}
     534:	20000094 	.word	0x20000094

00000538 <SERCOM4_Handler>:
     538:	b510      	push	{r4, lr}
     53a:	4b02      	ldr	r3, [pc, #8]	; (544 <SERCOM4_Handler+0xc>)
     53c:	691b      	ldr	r3, [r3, #16]
     53e:	2004      	movs	r0, #4
     540:	4798      	blx	r3
     542:	bd10      	pop	{r4, pc}
     544:	20000094 	.word	0x20000094

00000548 <SERCOM5_Handler>:
     548:	b510      	push	{r4, lr}
     54a:	4b02      	ldr	r3, [pc, #8]	; (554 <SERCOM5_Handler+0xc>)
     54c:	695b      	ldr	r3, [r3, #20]
     54e:	2005      	movs	r0, #5
     550:	4798      	blx	r3
     552:	bd10      	pop	{r4, pc}
     554:	20000094 	.word	0x20000094

00000558 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     558:	b5f0      	push	{r4, r5, r6, r7, lr}
     55a:	46de      	mov	lr, fp
     55c:	4657      	mov	r7, sl
     55e:	464e      	mov	r6, r9
     560:	4645      	mov	r5, r8
     562:	b5e0      	push	{r5, r6, r7, lr}
     564:	b091      	sub	sp, #68	; 0x44
     566:	0005      	movs	r5, r0
     568:	000c      	movs	r4, r1
     56a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     56c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     56e:	0008      	movs	r0, r1
     570:	4bba      	ldr	r3, [pc, #744]	; (85c <usart_init+0x304>)
     572:	4798      	blx	r3
     574:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     576:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     578:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     57a:	07db      	lsls	r3, r3, #31
     57c:	d506      	bpl.n	58c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     57e:	b011      	add	sp, #68	; 0x44
     580:	bc3c      	pop	{r2, r3, r4, r5}
     582:	4690      	mov	r8, r2
     584:	4699      	mov	r9, r3
     586:	46a2      	mov	sl, r4
     588:	46ab      	mov	fp, r5
     58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     58c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     58e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     590:	079b      	lsls	r3, r3, #30
     592:	d4f4      	bmi.n	57e <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     594:	49b2      	ldr	r1, [pc, #712]	; (860 <usart_init+0x308>)
     596:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     598:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     59a:	2301      	movs	r3, #1
     59c:	40bb      	lsls	r3, r7
     59e:	4303      	orrs	r3, r0
     5a0:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     5a2:	a90f      	add	r1, sp, #60	; 0x3c
     5a4:	272d      	movs	r7, #45	; 0x2d
     5a6:	5df3      	ldrb	r3, [r6, r7]
     5a8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     5aa:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     5ac:	b2d3      	uxtb	r3, r2
     5ae:	9302      	str	r3, [sp, #8]
     5b0:	0018      	movs	r0, r3
     5b2:	4bac      	ldr	r3, [pc, #688]	; (864 <usart_init+0x30c>)
     5b4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     5b6:	9802      	ldr	r0, [sp, #8]
     5b8:	4bab      	ldr	r3, [pc, #684]	; (868 <usart_init+0x310>)
     5ba:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     5bc:	5df0      	ldrb	r0, [r6, r7]
     5be:	2100      	movs	r1, #0
     5c0:	4baa      	ldr	r3, [pc, #680]	; (86c <usart_init+0x314>)
     5c2:	4798      	blx	r3
	module->character_size = config->character_size;
     5c4:	7af3      	ldrb	r3, [r6, #11]
     5c6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     5c8:	2324      	movs	r3, #36	; 0x24
     5ca:	5cf3      	ldrb	r3, [r6, r3]
     5cc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     5ce:	2325      	movs	r3, #37	; 0x25
     5d0:	5cf3      	ldrb	r3, [r6, r3]
     5d2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     5d4:	7ef3      	ldrb	r3, [r6, #27]
     5d6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     5d8:	7f33      	ldrb	r3, [r6, #28]
     5da:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     5dc:	682b      	ldr	r3, [r5, #0]
     5de:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5e0:	0018      	movs	r0, r3
     5e2:	4b9e      	ldr	r3, [pc, #632]	; (85c <usart_init+0x304>)
     5e4:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     5e6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     5e8:	2200      	movs	r2, #0
     5ea:	230e      	movs	r3, #14
     5ec:	a906      	add	r1, sp, #24
     5ee:	468c      	mov	ip, r1
     5f0:	4463      	add	r3, ip
     5f2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     5f4:	8a32      	ldrh	r2, [r6, #16]
     5f6:	9202      	str	r2, [sp, #8]
     5f8:	2380      	movs	r3, #128	; 0x80
     5fa:	01db      	lsls	r3, r3, #7
     5fc:	429a      	cmp	r2, r3
     5fe:	d100      	bne.n	602 <usart_init+0xaa>
     600:	e09a      	b.n	738 <usart_init+0x1e0>
     602:	d90f      	bls.n	624 <usart_init+0xcc>
     604:	23c0      	movs	r3, #192	; 0xc0
     606:	01db      	lsls	r3, r3, #7
     608:	9a02      	ldr	r2, [sp, #8]
     60a:	429a      	cmp	r2, r3
     60c:	d100      	bne.n	610 <usart_init+0xb8>
     60e:	e08e      	b.n	72e <usart_init+0x1d6>
     610:	2380      	movs	r3, #128	; 0x80
     612:	021b      	lsls	r3, r3, #8
     614:	429a      	cmp	r2, r3
     616:	d000      	beq.n	61a <usart_init+0xc2>
     618:	e11b      	b.n	852 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     61a:	2303      	movs	r3, #3
     61c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     61e:	2300      	movs	r3, #0
     620:	9307      	str	r3, [sp, #28]
     622:	e008      	b.n	636 <usart_init+0xde>
	switch (config->sample_rate) {
     624:	2380      	movs	r3, #128	; 0x80
     626:	019b      	lsls	r3, r3, #6
     628:	429a      	cmp	r2, r3
     62a:	d000      	beq.n	62e <usart_init+0xd6>
     62c:	e111      	b.n	852 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     62e:	2310      	movs	r3, #16
     630:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     632:	3b0f      	subs	r3, #15
     634:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     636:	6833      	ldr	r3, [r6, #0]
     638:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     63a:	68f3      	ldr	r3, [r6, #12]
     63c:	469b      	mov	fp, r3
		config->sample_adjustment |
     63e:	6973      	ldr	r3, [r6, #20]
     640:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     642:	7e33      	ldrb	r3, [r6, #24]
     644:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     646:	2326      	movs	r3, #38	; 0x26
     648:	5cf3      	ldrb	r3, [r6, r3]
     64a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     64c:	6873      	ldr	r3, [r6, #4]
     64e:	4699      	mov	r9, r3
	switch (transfer_mode)
     650:	2b00      	cmp	r3, #0
     652:	d100      	bne.n	656 <usart_init+0xfe>
     654:	e09c      	b.n	790 <usart_init+0x238>
     656:	2380      	movs	r3, #128	; 0x80
     658:	055b      	lsls	r3, r3, #21
     65a:	4599      	cmp	r9, r3
     65c:	d100      	bne.n	660 <usart_init+0x108>
     65e:	e080      	b.n	762 <usart_init+0x20a>
	if(config->encoding_format_enable) {
     660:	7e73      	ldrb	r3, [r6, #25]
     662:	2b00      	cmp	r3, #0
     664:	d002      	beq.n	66c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     666:	7eb3      	ldrb	r3, [r6, #26]
     668:	4642      	mov	r2, r8
     66a:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     66c:	230e      	movs	r3, #14
     66e:	aa06      	add	r2, sp, #24
     670:	4694      	mov	ip, r2
     672:	4463      	add	r3, ip
     674:	881b      	ldrh	r3, [r3, #0]
     676:	4642      	mov	r2, r8
     678:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     67a:	9b05      	ldr	r3, [sp, #20]
     67c:	465a      	mov	r2, fp
     67e:	4313      	orrs	r3, r2
     680:	9a03      	ldr	r2, [sp, #12]
     682:	4313      	orrs	r3, r2
     684:	464a      	mov	r2, r9
     686:	4313      	orrs	r3, r2
     688:	9f02      	ldr	r7, [sp, #8]
     68a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     68c:	9b04      	ldr	r3, [sp, #16]
     68e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     690:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     692:	4653      	mov	r3, sl
     694:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     696:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     698:	2327      	movs	r3, #39	; 0x27
     69a:	5cf3      	ldrb	r3, [r6, r3]
     69c:	2b00      	cmp	r3, #0
     69e:	d101      	bne.n	6a4 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     6a0:	3304      	adds	r3, #4
     6a2:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     6a4:	7e73      	ldrb	r3, [r6, #25]
     6a6:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     6a8:	7f32      	ldrb	r2, [r6, #28]
     6aa:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     6ac:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     6ae:	7f72      	ldrb	r2, [r6, #29]
     6b0:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     6b2:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     6b4:	2224      	movs	r2, #36	; 0x24
     6b6:	5cb2      	ldrb	r2, [r6, r2]
     6b8:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     6ba:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     6bc:	2225      	movs	r2, #37	; 0x25
     6be:	5cb2      	ldrb	r2, [r6, r2]
     6c0:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     6c2:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     6c4:	7ab1      	ldrb	r1, [r6, #10]
     6c6:	7af2      	ldrb	r2, [r6, #11]
     6c8:	4311      	orrs	r1, r2
     6ca:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     6cc:	8933      	ldrh	r3, [r6, #8]
     6ce:	2bff      	cmp	r3, #255	; 0xff
     6d0:	d100      	bne.n	6d4 <usart_init+0x17c>
     6d2:	e081      	b.n	7d8 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     6d4:	2280      	movs	r2, #128	; 0x80
     6d6:	0452      	lsls	r2, r2, #17
     6d8:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     6da:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     6dc:	232c      	movs	r3, #44	; 0x2c
     6de:	5cf3      	ldrb	r3, [r6, r3]
     6e0:	2b00      	cmp	r3, #0
     6e2:	d103      	bne.n	6ec <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     6e4:	4b62      	ldr	r3, [pc, #392]	; (870 <usart_init+0x318>)
     6e6:	789b      	ldrb	r3, [r3, #2]
     6e8:	079b      	lsls	r3, r3, #30
     6ea:	d501      	bpl.n	6f0 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     6ec:	2380      	movs	r3, #128	; 0x80
     6ee:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     6f0:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     6f2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     6f4:	2b00      	cmp	r3, #0
     6f6:	d1fc      	bne.n	6f2 <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
     6f8:	4643      	mov	r3, r8
     6fa:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     6fc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     6fe:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     700:	2b00      	cmp	r3, #0
     702:	d1fc      	bne.n	6fe <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
     704:	4643      	mov	r3, r8
     706:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     708:	ab0e      	add	r3, sp, #56	; 0x38
     70a:	2280      	movs	r2, #128	; 0x80
     70c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     70e:	2200      	movs	r2, #0
     710:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     712:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     714:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     716:	6b33      	ldr	r3, [r6, #48]	; 0x30
     718:	930a      	str	r3, [sp, #40]	; 0x28
     71a:	6b73      	ldr	r3, [r6, #52]	; 0x34
     71c:	930b      	str	r3, [sp, #44]	; 0x2c
     71e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     720:	930c      	str	r3, [sp, #48]	; 0x30
     722:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     724:	9302      	str	r3, [sp, #8]
     726:	930d      	str	r3, [sp, #52]	; 0x34
     728:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     72a:	ae0a      	add	r6, sp, #40	; 0x28
     72c:	e063      	b.n	7f6 <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     72e:	2308      	movs	r3, #8
     730:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     732:	3b07      	subs	r3, #7
     734:	9307      	str	r3, [sp, #28]
     736:	e77e      	b.n	636 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     738:	6833      	ldr	r3, [r6, #0]
     73a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     73c:	68f3      	ldr	r3, [r6, #12]
     73e:	469b      	mov	fp, r3
		config->sample_adjustment |
     740:	6973      	ldr	r3, [r6, #20]
     742:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     744:	7e33      	ldrb	r3, [r6, #24]
     746:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     748:	2326      	movs	r3, #38	; 0x26
     74a:	5cf3      	ldrb	r3, [r6, r3]
     74c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     74e:	6873      	ldr	r3, [r6, #4]
     750:	4699      	mov	r9, r3
	switch (transfer_mode)
     752:	2b00      	cmp	r3, #0
     754:	d018      	beq.n	788 <usart_init+0x230>
     756:	2380      	movs	r3, #128	; 0x80
     758:	055b      	lsls	r3, r3, #21
     75a:	4599      	cmp	r9, r3
     75c:	d001      	beq.n	762 <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
     75e:	2000      	movs	r0, #0
     760:	e025      	b.n	7ae <usart_init+0x256>
			if (!config->use_external_clock) {
     762:	2327      	movs	r3, #39	; 0x27
     764:	5cf3      	ldrb	r3, [r6, r3]
     766:	2b00      	cmp	r3, #0
     768:	d000      	beq.n	76c <usart_init+0x214>
     76a:	e779      	b.n	660 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     76c:	6a33      	ldr	r3, [r6, #32]
     76e:	001f      	movs	r7, r3
     770:	b2c0      	uxtb	r0, r0
     772:	4b40      	ldr	r3, [pc, #256]	; (874 <usart_init+0x31c>)
     774:	4798      	blx	r3
     776:	0001      	movs	r1, r0
     778:	220e      	movs	r2, #14
     77a:	ab06      	add	r3, sp, #24
     77c:	469c      	mov	ip, r3
     77e:	4462      	add	r2, ip
     780:	0038      	movs	r0, r7
     782:	4b3d      	ldr	r3, [pc, #244]	; (878 <usart_init+0x320>)
     784:	4798      	blx	r3
     786:	e012      	b.n	7ae <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     788:	2308      	movs	r3, #8
     78a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     78c:	2300      	movs	r3, #0
     78e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     790:	2327      	movs	r3, #39	; 0x27
     792:	5cf3      	ldrb	r3, [r6, r3]
     794:	2b00      	cmp	r3, #0
     796:	d00e      	beq.n	7b6 <usart_init+0x25e>
				status_code =
     798:	9b06      	ldr	r3, [sp, #24]
     79a:	9300      	str	r3, [sp, #0]
     79c:	9b07      	ldr	r3, [sp, #28]
     79e:	220e      	movs	r2, #14
     7a0:	a906      	add	r1, sp, #24
     7a2:	468c      	mov	ip, r1
     7a4:	4462      	add	r2, ip
     7a6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     7a8:	6a30      	ldr	r0, [r6, #32]
     7aa:	4f34      	ldr	r7, [pc, #208]	; (87c <usart_init+0x324>)
     7ac:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     7ae:	2800      	cmp	r0, #0
     7b0:	d000      	beq.n	7b4 <usart_init+0x25c>
     7b2:	e6e4      	b.n	57e <usart_init+0x26>
     7b4:	e754      	b.n	660 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     7b6:	6a33      	ldr	r3, [r6, #32]
     7b8:	001f      	movs	r7, r3
     7ba:	b2c0      	uxtb	r0, r0
     7bc:	4b2d      	ldr	r3, [pc, #180]	; (874 <usart_init+0x31c>)
     7be:	4798      	blx	r3
     7c0:	0001      	movs	r1, r0
				status_code =
     7c2:	9b06      	ldr	r3, [sp, #24]
     7c4:	9300      	str	r3, [sp, #0]
     7c6:	9b07      	ldr	r3, [sp, #28]
     7c8:	220e      	movs	r2, #14
     7ca:	a806      	add	r0, sp, #24
     7cc:	4684      	mov	ip, r0
     7ce:	4462      	add	r2, ip
     7d0:	0038      	movs	r0, r7
     7d2:	4f2a      	ldr	r7, [pc, #168]	; (87c <usart_init+0x324>)
     7d4:	47b8      	blx	r7
     7d6:	e7ea      	b.n	7ae <usart_init+0x256>
		if(config->lin_slave_enable) {
     7d8:	7ef3      	ldrb	r3, [r6, #27]
     7da:	2b00      	cmp	r3, #0
     7dc:	d100      	bne.n	7e0 <usart_init+0x288>
     7de:	e77d      	b.n	6dc <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     7e0:	2380      	movs	r3, #128	; 0x80
     7e2:	04db      	lsls	r3, r3, #19
     7e4:	431f      	orrs	r7, r3
     7e6:	e779      	b.n	6dc <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     7e8:	0020      	movs	r0, r4
     7ea:	4b25      	ldr	r3, [pc, #148]	; (880 <usart_init+0x328>)
     7ec:	4798      	blx	r3
     7ee:	e007      	b.n	800 <usart_init+0x2a8>
     7f0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     7f2:	2f04      	cmp	r7, #4
     7f4:	d00d      	beq.n	812 <usart_init+0x2ba>
     7f6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     7f8:	00bb      	lsls	r3, r7, #2
     7fa:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     7fc:	2800      	cmp	r0, #0
     7fe:	d0f3      	beq.n	7e8 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
     800:	1c43      	adds	r3, r0, #1
     802:	d0f5      	beq.n	7f0 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     804:	a90e      	add	r1, sp, #56	; 0x38
     806:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     808:	0c00      	lsrs	r0, r0, #16
     80a:	b2c0      	uxtb	r0, r0
     80c:	4b1d      	ldr	r3, [pc, #116]	; (884 <usart_init+0x32c>)
     80e:	4798      	blx	r3
     810:	e7ee      	b.n	7f0 <usart_init+0x298>
		module->callback[i]            = NULL;
     812:	2300      	movs	r3, #0
     814:	60eb      	str	r3, [r5, #12]
     816:	612b      	str	r3, [r5, #16]
     818:	616b      	str	r3, [r5, #20]
     81a:	61ab      	str	r3, [r5, #24]
     81c:	61eb      	str	r3, [r5, #28]
     81e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     820:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     822:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     824:	2200      	movs	r2, #0
     826:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     828:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     82a:	3330      	adds	r3, #48	; 0x30
     82c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     82e:	3301      	adds	r3, #1
     830:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     832:	3301      	adds	r3, #1
     834:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     836:	3301      	adds	r3, #1
     838:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     83a:	6828      	ldr	r0, [r5, #0]
     83c:	4b07      	ldr	r3, [pc, #28]	; (85c <usart_init+0x304>)
     83e:	4798      	blx	r3
     840:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     842:	4911      	ldr	r1, [pc, #68]	; (888 <usart_init+0x330>)
     844:	4b11      	ldr	r3, [pc, #68]	; (88c <usart_init+0x334>)
     846:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     848:	00a4      	lsls	r4, r4, #2
     84a:	4b11      	ldr	r3, [pc, #68]	; (890 <usart_init+0x338>)
     84c:	50e5      	str	r5, [r4, r3]
	return status_code;
     84e:	2000      	movs	r0, #0
     850:	e695      	b.n	57e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     852:	2310      	movs	r3, #16
     854:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     856:	2300      	movs	r3, #0
     858:	9307      	str	r3, [sp, #28]
     85a:	e6ec      	b.n	636 <usart_init+0xde>
     85c:	00000451 	.word	0x00000451
     860:	40000400 	.word	0x40000400
     864:	00001555 	.word	0x00001555
     868:	000014c9 	.word	0x000014c9
     86c:	0000028d 	.word	0x0000028d
     870:	41002000 	.word	0x41002000
     874:	00001571 	.word	0x00001571
     878:	000001cf 	.word	0x000001cf
     87c:	000001f9 	.word	0x000001f9
     880:	000002d9 	.word	0x000002d9
     884:	0000164d 	.word	0x0000164d
     888:	00000995 	.word	0x00000995
     88c:	0000048d 	.word	0x0000048d
     890:	200000d8 	.word	0x200000d8

00000894 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     896:	0006      	movs	r6, r0
     898:	000c      	movs	r4, r1
     89a:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     89c:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     89e:	4b0a      	ldr	r3, [pc, #40]	; (8c8 <_usart_write_buffer+0x34>)
     8a0:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     8a2:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
     8a4:	b29b      	uxth	r3, r3
     8a6:	2b00      	cmp	r3, #0
     8a8:	d003      	beq.n	8b2 <_usart_write_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     8aa:	4b08      	ldr	r3, [pc, #32]	; (8cc <_usart_write_buffer+0x38>)
     8ac:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     8ae:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
     8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
     8b2:	85f5      	strh	r5, [r6, #46]	; 0x2e
     8b4:	4b05      	ldr	r3, [pc, #20]	; (8cc <_usart_write_buffer+0x38>)
     8b6:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
     8b8:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
     8ba:	2205      	movs	r2, #5
     8bc:	2333      	movs	r3, #51	; 0x33
     8be:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
     8c0:	3b32      	subs	r3, #50	; 0x32
     8c2:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
     8c4:	2000      	movs	r0, #0
     8c6:	e7f3      	b.n	8b0 <_usart_write_buffer+0x1c>
     8c8:	00000e41 	.word	0x00000e41
     8cc:	00000e81 	.word	0x00000e81

000008d0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8d2:	0004      	movs	r4, r0
     8d4:	000d      	movs	r5, r1
     8d6:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8d8:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
     8da:	4b0f      	ldr	r3, [pc, #60]	; (918 <_usart_read_buffer+0x48>)
     8dc:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     8de:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     8e0:	b29b      	uxth	r3, r3
     8e2:	2b00      	cmp	r3, #0
     8e4:	d003      	beq.n	8ee <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
     8e6:	4b0d      	ldr	r3, [pc, #52]	; (91c <_usart_read_buffer+0x4c>)
     8e8:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     8ea:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     8ee:	85a6      	strh	r6, [r4, #44]	; 0x2c
     8f0:	4b0a      	ldr	r3, [pc, #40]	; (91c <_usart_read_buffer+0x4c>)
     8f2:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
     8f4:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     8f6:	2205      	movs	r2, #5
     8f8:	2332      	movs	r3, #50	; 0x32
     8fa:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     8fc:	3b2e      	subs	r3, #46	; 0x2e
     8fe:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
     900:	7a23      	ldrb	r3, [r4, #8]
     902:	2b00      	cmp	r3, #0
     904:	d001      	beq.n	90a <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     906:	2320      	movs	r3, #32
     908:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
     90a:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
     90c:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
     90e:	2b00      	cmp	r3, #0
     910:	d0ec      	beq.n	8ec <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     912:	2308      	movs	r3, #8
     914:	75bb      	strb	r3, [r7, #22]
     916:	e7e9      	b.n	8ec <_usart_read_buffer+0x1c>
     918:	00000e41 	.word	0x00000e41
     91c:	00000e81 	.word	0x00000e81

00000920 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     920:	1c93      	adds	r3, r2, #2
     922:	009b      	lsls	r3, r3, #2
     924:	18c3      	adds	r3, r0, r3
     926:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     928:	2130      	movs	r1, #48	; 0x30
     92a:	2301      	movs	r3, #1
     92c:	4093      	lsls	r3, r2
     92e:	001a      	movs	r2, r3
     930:	5c43      	ldrb	r3, [r0, r1]
     932:	4313      	orrs	r3, r2
     934:	5443      	strb	r3, [r0, r1]
}
     936:	4770      	bx	lr

00000938 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     938:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     93a:	2317      	movs	r3, #23
	if (length == 0) {
     93c:	2a00      	cmp	r2, #0
     93e:	d101      	bne.n	944 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
     940:	0018      	movs	r0, r3
     942:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
     944:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     946:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
     948:	2c00      	cmp	r4, #0
     94a:	d0f9      	beq.n	940 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
     94c:	4b01      	ldr	r3, [pc, #4]	; (954 <usart_write_buffer_job+0x1c>)
     94e:	4798      	blx	r3
     950:	0003      	movs	r3, r0
     952:	e7f5      	b.n	940 <usart_write_buffer_job+0x8>
     954:	00000895 	.word	0x00000895

00000958 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     958:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     95a:	2317      	movs	r3, #23
	if (length == 0) {
     95c:	2a00      	cmp	r2, #0
     95e:	d101      	bne.n	964 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
     960:	0018      	movs	r0, r3
     962:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
     964:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     966:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
     968:	2c00      	cmp	r4, #0
     96a:	d0f9      	beq.n	960 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
     96c:	4b01      	ldr	r3, [pc, #4]	; (974 <usart_read_buffer_job+0x1c>)
     96e:	4798      	blx	r3
     970:	0003      	movs	r3, r0
     972:	e7f5      	b.n	960 <usart_read_buffer_job+0x8>
     974:	000008d1 	.word	0x000008d1

00000978 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
     978:	2900      	cmp	r1, #0
     97a:	d003      	beq.n	984 <usart_get_job_status+0xc>
     97c:	2901      	cmp	r1, #1
     97e:	d005      	beq.n	98c <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
     980:	2017      	movs	r0, #23
     982:	e002      	b.n	98a <usart_get_job_status+0x12>
			status_code = module->rx_status;
     984:	2332      	movs	r3, #50	; 0x32
     986:	5cc0      	ldrb	r0, [r0, r3]
     988:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
     98a:	4770      	bx	lr
			status_code = module->tx_status;
     98c:	2333      	movs	r3, #51	; 0x33
     98e:	5cc0      	ldrb	r0, [r0, r3]
     990:	b2c0      	uxtb	r0, r0
			break;
     992:	e7fa      	b.n	98a <usart_get_job_status+0x12>

00000994 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     996:	0080      	lsls	r0, r0, #2
     998:	4b62      	ldr	r3, [pc, #392]	; (b24 <_usart_interrupt_handler+0x190>)
     99a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     99c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     99e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     9a0:	2b00      	cmp	r3, #0
     9a2:	d1fc      	bne.n	99e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     9a4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     9a6:	7da6      	ldrb	r6, [r4, #22]
     9a8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     9aa:	2330      	movs	r3, #48	; 0x30
     9ac:	5ceb      	ldrb	r3, [r5, r3]
     9ae:	2231      	movs	r2, #49	; 0x31
     9b0:	5caf      	ldrb	r7, [r5, r2]
     9b2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     9b4:	07f3      	lsls	r3, r6, #31
     9b6:	d522      	bpl.n	9fe <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     9b8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     9ba:	b29b      	uxth	r3, r3
     9bc:	2b00      	cmp	r3, #0
     9be:	d01c      	beq.n	9fa <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     9c0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     9c2:	7813      	ldrb	r3, [r2, #0]
     9c4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     9c6:	1c51      	adds	r1, r2, #1
     9c8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     9ca:	7969      	ldrb	r1, [r5, #5]
     9cc:	2901      	cmp	r1, #1
     9ce:	d00e      	beq.n	9ee <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     9d0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     9d2:	05db      	lsls	r3, r3, #23
     9d4:	0ddb      	lsrs	r3, r3, #23
     9d6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     9d8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     9da:	3b01      	subs	r3, #1
     9dc:	b29b      	uxth	r3, r3
     9de:	85eb      	strh	r3, [r5, #46]	; 0x2e
     9e0:	2b00      	cmp	r3, #0
     9e2:	d10c      	bne.n	9fe <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     9e4:	3301      	adds	r3, #1
     9e6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     9e8:	3301      	adds	r3, #1
     9ea:	75a3      	strb	r3, [r4, #22]
     9ec:	e007      	b.n	9fe <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     9ee:	7851      	ldrb	r1, [r2, #1]
     9f0:	0209      	lsls	r1, r1, #8
     9f2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     9f4:	3202      	adds	r2, #2
     9f6:	62aa      	str	r2, [r5, #40]	; 0x28
     9f8:	e7eb      	b.n	9d2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     9fa:	2301      	movs	r3, #1
     9fc:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     9fe:	07b3      	lsls	r3, r6, #30
     a00:	d506      	bpl.n	a10 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     a02:	2302      	movs	r3, #2
     a04:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     a06:	2200      	movs	r2, #0
     a08:	3331      	adds	r3, #49	; 0x31
     a0a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     a0c:	07fb      	lsls	r3, r7, #31
     a0e:	d41a      	bmi.n	a46 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     a10:	0773      	lsls	r3, r6, #29
     a12:	d565      	bpl.n	ae0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     a14:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     a16:	b29b      	uxth	r3, r3
     a18:	2b00      	cmp	r3, #0
     a1a:	d05f      	beq.n	adc <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a1c:	8b63      	ldrh	r3, [r4, #26]
     a1e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     a20:	071a      	lsls	r2, r3, #28
     a22:	d414      	bmi.n	a4e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a24:	223f      	movs	r2, #63	; 0x3f
     a26:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     a28:	2b00      	cmp	r3, #0
     a2a:	d034      	beq.n	a96 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     a2c:	079a      	lsls	r2, r3, #30
     a2e:	d511      	bpl.n	a54 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     a30:	221a      	movs	r2, #26
     a32:	2332      	movs	r3, #50	; 0x32
     a34:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     a36:	3b30      	subs	r3, #48	; 0x30
     a38:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     a3a:	077b      	lsls	r3, r7, #29
     a3c:	d550      	bpl.n	ae0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     a3e:	0028      	movs	r0, r5
     a40:	696b      	ldr	r3, [r5, #20]
     a42:	4798      	blx	r3
     a44:	e04c      	b.n	ae0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     a46:	0028      	movs	r0, r5
     a48:	68eb      	ldr	r3, [r5, #12]
     a4a:	4798      	blx	r3
     a4c:	e7e0      	b.n	a10 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     a4e:	2237      	movs	r2, #55	; 0x37
     a50:	4013      	ands	r3, r2
     a52:	e7e9      	b.n	a28 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     a54:	075a      	lsls	r2, r3, #29
     a56:	d505      	bpl.n	a64 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     a58:	221e      	movs	r2, #30
     a5a:	2332      	movs	r3, #50	; 0x32
     a5c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     a5e:	3b2e      	subs	r3, #46	; 0x2e
     a60:	8363      	strh	r3, [r4, #26]
     a62:	e7ea      	b.n	a3a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a64:	07da      	lsls	r2, r3, #31
     a66:	d505      	bpl.n	a74 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     a68:	2213      	movs	r2, #19
     a6a:	2332      	movs	r3, #50	; 0x32
     a6c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     a6e:	3b31      	subs	r3, #49	; 0x31
     a70:	8363      	strh	r3, [r4, #26]
     a72:	e7e2      	b.n	a3a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     a74:	06da      	lsls	r2, r3, #27
     a76:	d505      	bpl.n	a84 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     a78:	2242      	movs	r2, #66	; 0x42
     a7a:	2332      	movs	r3, #50	; 0x32
     a7c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     a7e:	3b22      	subs	r3, #34	; 0x22
     a80:	8363      	strh	r3, [r4, #26]
     a82:	e7da      	b.n	a3a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     a84:	2220      	movs	r2, #32
     a86:	421a      	tst	r2, r3
     a88:	d0d7      	beq.n	a3a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     a8a:	3221      	adds	r2, #33	; 0x21
     a8c:	2332      	movs	r3, #50	; 0x32
     a8e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     a90:	3b12      	subs	r3, #18
     a92:	8363      	strh	r3, [r4, #26]
     a94:	e7d1      	b.n	a3a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     a96:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     a98:	05db      	lsls	r3, r3, #23
     a9a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     a9c:	b2da      	uxtb	r2, r3
     a9e:	6a69      	ldr	r1, [r5, #36]	; 0x24
     aa0:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     aa2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     aa4:	1c51      	adds	r1, r2, #1
     aa6:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     aa8:	7969      	ldrb	r1, [r5, #5]
     aaa:	2901      	cmp	r1, #1
     aac:	d010      	beq.n	ad0 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     aae:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     ab0:	3b01      	subs	r3, #1
     ab2:	b29b      	uxth	r3, r3
     ab4:	85ab      	strh	r3, [r5, #44]	; 0x2c
     ab6:	2b00      	cmp	r3, #0
     ab8:	d112      	bne.n	ae0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     aba:	3304      	adds	r3, #4
     abc:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     abe:	2200      	movs	r2, #0
     ac0:	332e      	adds	r3, #46	; 0x2e
     ac2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     ac4:	07bb      	lsls	r3, r7, #30
     ac6:	d50b      	bpl.n	ae0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     ac8:	0028      	movs	r0, r5
     aca:	692b      	ldr	r3, [r5, #16]
     acc:	4798      	blx	r3
     ace:	e007      	b.n	ae0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     ad0:	0a1b      	lsrs	r3, r3, #8
     ad2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     ad4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     ad6:	3301      	adds	r3, #1
     ad8:	626b      	str	r3, [r5, #36]	; 0x24
     ada:	e7e8      	b.n	aae <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     adc:	2304      	movs	r3, #4
     ade:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     ae0:	06f3      	lsls	r3, r6, #27
     ae2:	d504      	bpl.n	aee <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     ae4:	2310      	movs	r3, #16
     ae6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     ae8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     aea:	06fb      	lsls	r3, r7, #27
     aec:	d40e      	bmi.n	b0c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     aee:	06b3      	lsls	r3, r6, #26
     af0:	d504      	bpl.n	afc <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     af2:	2320      	movs	r3, #32
     af4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     af6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     af8:	073b      	lsls	r3, r7, #28
     afa:	d40b      	bmi.n	b14 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     afc:	0733      	lsls	r3, r6, #28
     afe:	d504      	bpl.n	b0a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     b00:	2308      	movs	r3, #8
     b02:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     b04:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     b06:	06bb      	lsls	r3, r7, #26
     b08:	d408      	bmi.n	b1c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     b0c:	0028      	movs	r0, r5
     b0e:	69eb      	ldr	r3, [r5, #28]
     b10:	4798      	blx	r3
     b12:	e7ec      	b.n	aee <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     b14:	0028      	movs	r0, r5
     b16:	69ab      	ldr	r3, [r5, #24]
     b18:	4798      	blx	r3
     b1a:	e7ef      	b.n	afc <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     b1c:	6a2b      	ldr	r3, [r5, #32]
     b1e:	0028      	movs	r0, r5
     b20:	4798      	blx	r3
}
     b22:	e7f2      	b.n	b0a <_usart_interrupt_handler+0x176>
     b24:	200000d8 	.word	0x200000d8

00000b28 <HRM_Initialize>:
* @param[in]	N/A
* @param[out]	N/A
* @return		Return true
* @note         
*****************************************************************************/
bool HRM_Initialize(void) {
     b28:	b570      	push	{r4, r5, r6, lr}
     b2a:	b082      	sub	sp, #8
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     b2c:	ac01      	add	r4, sp, #4
     b2e:	2500      	movs	r5, #0
     b30:	7025      	strb	r5, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
     b32:	70a5      	strb	r5, [r4, #2]
	/* Initialize HRM pins */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    pin_conf.input_pull  = 	SYSTEM_PINMUX_PIN_PULL_NONE;
     b34:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(HRM_LO_POS_CONNECT, &pin_conf);
     b36:	0021      	movs	r1, r4
     b38:	2008      	movs	r0, #8
     b3a:	4e07      	ldr	r6, [pc, #28]	; (b58 <HRM_Initialize+0x30>)
     b3c:	47b0      	blx	r6

    pin_conf.direction  = PORT_PIN_DIR_INPUT;
     b3e:	7025      	strb	r5, [r4, #0]
    pin_conf.input_pull  = 	SYSTEM_PINMUX_PIN_PULL_NONE;
     b40:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(HRM_INPUT_CONNECT, &pin_conf);
     b42:	0021      	movs	r1, r4
     b44:	2009      	movs	r0, #9
     b46:	47b0      	blx	r6

    pin_conf.direction  = PORT_PIN_DIR_INPUT;
     b48:	7025      	strb	r5, [r4, #0]
    pin_conf.input_pull  = 	SYSTEM_PINMUX_PIN_PULL_NONE;
     b4a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(HRM_LO_NEG_CONNECT, &pin_conf);	
     b4c:	0021      	movs	r1, r4
     b4e:	200a      	movs	r0, #10
     b50:	47b0      	blx	r6
	return true;
     b52:	2001      	movs	r0, #1
     b54:	b002      	add	sp, #8
     b56:	bd70      	pop	{r4, r5, r6, pc}
     b58:	00000ee9 	.word	0x00000ee9

00000b5c <Sensor_Initialize>:
* @param[in]	N/A
* @param[out]	N/A
* @return		Return 0, code shouldn't ideally exit this function
* @note         
*****************************************************************************/
bool Sensor_Initialize(void) {
     b5c:	b510      	push	{r4, lr}
	/* Buzzer Initialize */
	Buzzer_Initialize();	
     b5e:	4b03      	ldr	r3, [pc, #12]	; (b6c <Sensor_Initialize+0x10>)
     b60:	4798      	blx	r3

    /* Heart Rate Monitor Initialize */
    HRM_Initialize();
     b62:	4b03      	ldr	r3, [pc, #12]	; (b70 <Sensor_Initialize+0x14>)
     b64:	4798      	blx	r3

	return true;
     b66:	2001      	movs	r0, #1
     b68:	bd10      	pop	{r4, pc}
     b6a:	46c0      	nop			; (mov r8, r8)
     b6c:	000017b9 	.word	0x000017b9
     b70:	00000b29 	.word	0x00000b29

00000b74 <advance_pointer>:
	 size_t max; //of the buffer
	 bool full;
 };

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     b74:	b510      	push	{r4, lr}
     b76:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
     b78:	7c03      	ldrb	r3, [r0, #16]
     b7a:	2b00      	cmp	r3, #0
     b7c:	d005      	beq.n	b8a <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     b7e:	6883      	ldr	r3, [r0, #8]
     b80:	1c58      	adds	r0, r3, #1
     b82:	68e1      	ldr	r1, [r4, #12]
     b84:	4b07      	ldr	r3, [pc, #28]	; (ba4 <advance_pointer+0x30>)
     b86:	4798      	blx	r3
     b88:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     b8a:	6863      	ldr	r3, [r4, #4]
     b8c:	1c58      	adds	r0, r3, #1
     b8e:	68e1      	ldr	r1, [r4, #12]
     b90:	4b04      	ldr	r3, [pc, #16]	; (ba4 <advance_pointer+0x30>)
     b92:	4798      	blx	r3
     b94:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     b96:	68a3      	ldr	r3, [r4, #8]
     b98:	1a59      	subs	r1, r3, r1
     b9a:	424a      	negs	r2, r1
     b9c:	414a      	adcs	r2, r1
     b9e:	7422      	strb	r2, [r4, #16]
 }
     ba0:	bd10      	pop	{r4, pc}
     ba2:	46c0      	nop			; (mov r8, r8)
     ba4:	00001999 	.word	0x00001999

00000ba8 <circular_buf_init>:
	 cbuf->full = false;
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
 }

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     ba8:	b570      	push	{r4, r5, r6, lr}
     baa:	0005      	movs	r5, r0
     bac:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     bae:	2014      	movs	r0, #20
     bb0:	4b04      	ldr	r3, [pc, #16]	; (bc4 <circular_buf_init+0x1c>)
     bb2:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     bb4:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
     bb6:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
     bb8:	2300      	movs	r3, #0
     bba:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
     bbc:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
     bbe:	7403      	strb	r3, [r0, #16]
 }
     bc0:	bd70      	pop	{r4, r5, r6, pc}
     bc2:	46c0      	nop			; (mov r8, r8)
     bc4:	00001c55 	.word	0x00001c55

00000bc8 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     bc8:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     bca:	6803      	ldr	r3, [r0, #0]
     bcc:	6842      	ldr	r2, [r0, #4]
     bce:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
     bd0:	4b01      	ldr	r3, [pc, #4]	; (bd8 <circular_buf_put+0x10>)
     bd2:	4798      	blx	r3
 }
     bd4:	bd10      	pop	{r4, pc}
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	00000b75 	.word	0x00000b75

00000bdc <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     bdc:	7c02      	ldrb	r2, [r0, #16]
     bde:	2300      	movs	r3, #0
     be0:	2a00      	cmp	r2, #0
     be2:	d105      	bne.n	bf0 <circular_buf_empty+0x14>
     be4:	6843      	ldr	r3, [r0, #4]
     be6:	6880      	ldr	r0, [r0, #8]
     be8:	1a1b      	subs	r3, r3, r0
     bea:	4258      	negs	r0, r3
     bec:	4143      	adcs	r3, r0
     bee:	b2db      	uxtb	r3, r3
     bf0:	0018      	movs	r0, r3
 }
     bf2:	4770      	bx	lr

00000bf4 <circular_buf_get>:
 {
     bf4:	b570      	push	{r4, r5, r6, lr}
     bf6:	0004      	movs	r4, r0
     bf8:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
     bfa:	4b0a      	ldr	r3, [pc, #40]	; (c24 <circular_buf_get+0x30>)
     bfc:	4798      	blx	r3
     bfe:	2800      	cmp	r0, #0
     c00:	d10d      	bne.n	c1e <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
     c02:	6823      	ldr	r3, [r4, #0]
     c04:	68a2      	ldr	r2, [r4, #8]
     c06:	5c9b      	ldrb	r3, [r3, r2]
     c08:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
     c0a:	2300      	movs	r3, #0
     c0c:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     c0e:	68a3      	ldr	r3, [r4, #8]
     c10:	1c58      	adds	r0, r3, #1
     c12:	68e1      	ldr	r1, [r4, #12]
     c14:	4b04      	ldr	r3, [pc, #16]	; (c28 <circular_buf_get+0x34>)
     c16:	4798      	blx	r3
     c18:	60a1      	str	r1, [r4, #8]
		 r = 0;
     c1a:	2000      	movs	r0, #0
 }
     c1c:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
     c1e:	2001      	movs	r0, #1
     c20:	4240      	negs	r0, r0
	 return r;
     c22:	e7fb      	b.n	c1c <circular_buf_get+0x28>
     c24:	00000bdd 	.word	0x00000bdd
     c28:	00001999 	.word	0x00001999

00000c2c <usart_read_callback>:
* @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
		Students to fill out. Please note that the code here is dummy code. It is only used to show you how some functions work.
* @note
*****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
     c2c:	b510      	push	{r4, lr}
    // Add the received character to the ring buffer.
    circular_buf_put(cbufRx, (uint8_t) latestRx); 
     c2e:	4c06      	ldr	r4, [pc, #24]	; (c48 <usart_read_callback+0x1c>)
     c30:	7821      	ldrb	r1, [r4, #0]
     c32:	4b06      	ldr	r3, [pc, #24]	; (c4c <usart_read_callback+0x20>)
     c34:	6818      	ldr	r0, [r3, #0]
     c36:	4b06      	ldr	r3, [pc, #24]	; (c50 <usart_read_callback+0x24>)
     c38:	4798      	blx	r3

    // Continue reading characters.
    usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);
     c3a:	2201      	movs	r2, #1
     c3c:	0021      	movs	r1, r4
     c3e:	4805      	ldr	r0, [pc, #20]	; (c54 <usart_read_callback+0x28>)
     c40:	4b05      	ldr	r3, [pc, #20]	; (c58 <usart_read_callback+0x2c>)
     c42:	4798      	blx	r3
}
     c44:	bd10      	pop	{r4, pc}
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	20000128 	.word	0x20000128
     c4c:	20000124 	.word	0x20000124
     c50:	00000bc9 	.word	0x00000bc9
     c54:	200000f0 	.word	0x200000f0
     c58:	00000959 	.word	0x00000959

00000c5c <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
     c5c:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
     c5e:	4b06      	ldr	r3, [pc, #24]	; (c78 <usart_write_callback+0x1c>)
     c60:	6818      	ldr	r0, [r3, #0]
     c62:	4906      	ldr	r1, [pc, #24]	; (c7c <usart_write_callback+0x20>)
     c64:	4b06      	ldr	r3, [pc, #24]	; (c80 <usart_write_callback+0x24>)
     c66:	4798      	blx	r3
     c68:	1c43      	adds	r3, r0, #1
     c6a:	d004      	beq.n	c76 <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     c6c:	2201      	movs	r2, #1
     c6e:	4903      	ldr	r1, [pc, #12]	; (c7c <usart_write_callback+0x20>)
     c70:	4804      	ldr	r0, [pc, #16]	; (c84 <usart_write_callback+0x28>)
     c72:	4b05      	ldr	r3, [pc, #20]	; (c88 <usart_write_callback+0x2c>)
     c74:	4798      	blx	r3
	}
	
}
     c76:	bd10      	pop	{r4, pc}
     c78:	20000530 	.word	0x20000530
     c7c:	2000052c 	.word	0x2000052c
     c80:	00000bf5 	.word	0x00000bf5
     c84:	200000f0 	.word	0x200000f0
     c88:	00000939 	.word	0x00000939

00000c8c <InitializeSerialConsole>:
{
     c8c:	b530      	push	{r4, r5, lr}
     c8e:	b091      	sub	sp, #68	; 0x44
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
     c90:	2580      	movs	r5, #128	; 0x80
     c92:	00ad      	lsls	r5, r5, #2
     c94:	0029      	movs	r1, r5
     c96:	483b      	ldr	r0, [pc, #236]	; (d84 <InitializeSerialConsole+0xf8>)
     c98:	4c3b      	ldr	r4, [pc, #236]	; (d88 <InitializeSerialConsole+0xfc>)
     c9a:	47a0      	blx	r4
     c9c:	4b3b      	ldr	r3, [pc, #236]	; (d8c <InitializeSerialConsole+0x100>)
     c9e:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
     ca0:	0029      	movs	r1, r5
     ca2:	483b      	ldr	r0, [pc, #236]	; (d90 <InitializeSerialConsole+0x104>)
     ca4:	47a0      	blx	r4
     ca6:	4b3b      	ldr	r3, [pc, #236]	; (d94 <InitializeSerialConsole+0x108>)
     ca8:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     caa:	2380      	movs	r3, #128	; 0x80
     cac:	05db      	lsls	r3, r3, #23
     cae:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     cb0:	2300      	movs	r3, #0
     cb2:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     cb4:	22ff      	movs	r2, #255	; 0xff
     cb6:	4669      	mov	r1, sp
     cb8:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     cba:	2200      	movs	r2, #0
     cbc:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     cbe:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     cc0:	2101      	movs	r1, #1
     cc2:	2024      	movs	r0, #36	; 0x24
     cc4:	466c      	mov	r4, sp
     cc6:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     cc8:	3001      	adds	r0, #1
     cca:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     ccc:	3125      	adds	r1, #37	; 0x25
     cce:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     cd0:	3101      	adds	r1, #1
     cd2:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     cd4:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     cd6:	3105      	adds	r1, #5
     cd8:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     cda:	3101      	adds	r1, #1
     cdc:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     cde:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     ce0:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     ce2:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     ce4:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     ce6:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     ce8:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     cea:	2313      	movs	r3, #19
     cec:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     cee:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
     cf0:	23e1      	movs	r3, #225	; 0xe1
     cf2:	025b      	lsls	r3, r3, #9
     cf4:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     cf6:	23c4      	movs	r3, #196	; 0xc4
     cf8:	039b      	lsls	r3, r3, #14
     cfa:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     cfc:	2301      	movs	r3, #1
     cfe:	425b      	negs	r3, r3
     d00:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     d02:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     d04:	4b24      	ldr	r3, [pc, #144]	; (d98 <InitializeSerialConsole+0x10c>)
     d06:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     d08:	4b24      	ldr	r3, [pc, #144]	; (d9c <InitializeSerialConsole+0x110>)
     d0a:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
     d0c:	4d24      	ldr	r5, [pc, #144]	; (da0 <InitializeSerialConsole+0x114>)
     d0e:	4c25      	ldr	r4, [pc, #148]	; (da4 <InitializeSerialConsole+0x118>)
     d10:	466a      	mov	r2, sp
     d12:	4925      	ldr	r1, [pc, #148]	; (da8 <InitializeSerialConsole+0x11c>)
     d14:	0028      	movs	r0, r5
     d16:	47a0      	blx	r4
     d18:	2800      	cmp	r0, #0
     d1a:	d1f9      	bne.n	d10 <InitializeSerialConsole+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     d1c:	4d20      	ldr	r5, [pc, #128]	; (da0 <InitializeSerialConsole+0x114>)
     d1e:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     d20:	0020      	movs	r0, r4
     d22:	4b22      	ldr	r3, [pc, #136]	; (dac <InitializeSerialConsole+0x120>)
     d24:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d26:	231f      	movs	r3, #31
     d28:	4018      	ands	r0, r3
     d2a:	3b1e      	subs	r3, #30
     d2c:	4083      	lsls	r3, r0
     d2e:	4a20      	ldr	r2, [pc, #128]	; (db0 <InitializeSerialConsole+0x124>)
     d30:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     d32:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     d34:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     d36:	2b00      	cmp	r3, #0
     d38:	d1fc      	bne.n	d34 <InitializeSerialConsole+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     d3a:	6823      	ldr	r3, [r4, #0]
     d3c:	2202      	movs	r2, #2
     d3e:	4313      	orrs	r3, r2
     d40:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
     d42:	4c17      	ldr	r4, [pc, #92]	; (da0 <InitializeSerialConsole+0x114>)
     d44:	2200      	movs	r2, #0
     d46:	491b      	ldr	r1, [pc, #108]	; (db4 <InitializeSerialConsole+0x128>)
     d48:	0020      	movs	r0, r4
     d4a:	4d1b      	ldr	r5, [pc, #108]	; (db8 <InitializeSerialConsole+0x12c>)
     d4c:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
     d4e:	2201      	movs	r2, #1
     d50:	491a      	ldr	r1, [pc, #104]	; (dbc <InitializeSerialConsole+0x130>)
     d52:	0020      	movs	r0, r4
     d54:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     d56:	2231      	movs	r2, #49	; 0x31
     d58:	5ca3      	ldrb	r3, [r4, r2]
     d5a:	2103      	movs	r1, #3
     d5c:	430b      	orrs	r3, r1
     d5e:	54a3      	strb	r3, [r4, r2]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     d60:	4813      	ldr	r0, [pc, #76]	; (db0 <InitializeSerialConsole+0x124>)
     d62:	21c3      	movs	r1, #195	; 0xc3
     d64:	0089      	lsls	r1, r1, #2
     d66:	5843      	ldr	r3, [r0, r1]
     d68:	4a15      	ldr	r2, [pc, #84]	; (dc0 <InitializeSerialConsole+0x134>)
     d6a:	401a      	ands	r2, r3
     d6c:	2380      	movs	r3, #128	; 0x80
     d6e:	021b      	lsls	r3, r3, #8
     d70:	4313      	orrs	r3, r2
     d72:	5043      	str	r3, [r0, r1]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
     d74:	2201      	movs	r2, #1
     d76:	4913      	ldr	r1, [pc, #76]	; (dc4 <InitializeSerialConsole+0x138>)
     d78:	0020      	movs	r0, r4
     d7a:	4b13      	ldr	r3, [pc, #76]	; (dc8 <InitializeSerialConsole+0x13c>)
     d7c:	4798      	blx	r3
}
     d7e:	b011      	add	sp, #68	; 0x44
     d80:	bd30      	pop	{r4, r5, pc}
     d82:	46c0      	nop			; (mov r8, r8)
     d84:	2000032c 	.word	0x2000032c
     d88:	00000ba9 	.word	0x00000ba9
     d8c:	20000124 	.word	0x20000124
     d90:	2000012c 	.word	0x2000012c
     d94:	20000530 	.word	0x20000530
     d98:	002a0003 	.word	0x002a0003
     d9c:	002b0003 	.word	0x002b0003
     da0:	200000f0 	.word	0x200000f0
     da4:	00000559 	.word	0x00000559
     da8:	42001800 	.word	0x42001800
     dac:	000004c9 	.word	0x000004c9
     db0:	e000e100 	.word	0xe000e100
     db4:	00000c5d 	.word	0x00000c5d
     db8:	00000921 	.word	0x00000921
     dbc:	00000c2d 	.word	0x00000c2d
     dc0:	ffff00ff 	.word	0xffff00ff
     dc4:	20000128 	.word	0x20000128
     dc8:	00000959 	.word	0x00000959

00000dcc <SerialConsoleWriteString>:
{
     dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
     dce:	46c6      	mov	lr, r8
     dd0:	b500      	push	{lr}
     dd2:	0005      	movs	r5, r0
     dd4:	2400      	movs	r4, #0
	if(string != NULL)
     dd6:	2800      	cmp	r0, #0
     dd8:	d012      	beq.n	e00 <SerialConsoleWriteString+0x34>
		for (size_t iter = 0; iter < strlen(string); iter++)
     dda:	4e11      	ldr	r6, [pc, #68]	; (e20 <SerialConsoleWriteString+0x54>)
			circular_buf_put(cbufTx, string[iter]);
     ddc:	4f11      	ldr	r7, [pc, #68]	; (e24 <SerialConsoleWriteString+0x58>)
     dde:	4b12      	ldr	r3, [pc, #72]	; (e28 <SerialConsoleWriteString+0x5c>)
     de0:	4698      	mov	r8, r3
     de2:	e003      	b.n	dec <SerialConsoleWriteString+0x20>
     de4:	5d29      	ldrb	r1, [r5, r4]
     de6:	6838      	ldr	r0, [r7, #0]
     de8:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
     dea:	3401      	adds	r4, #1
     dec:	0028      	movs	r0, r5
     dee:	47b0      	blx	r6
     df0:	4284      	cmp	r4, r0
     df2:	d3f7      	bcc.n	de4 <SerialConsoleWriteString+0x18>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
     df4:	2101      	movs	r1, #1
     df6:	480d      	ldr	r0, [pc, #52]	; (e2c <SerialConsoleWriteString+0x60>)
     df8:	4b0d      	ldr	r3, [pc, #52]	; (e30 <SerialConsoleWriteString+0x64>)
     dfa:	4798      	blx	r3
     dfc:	2800      	cmp	r0, #0
     dfe:	d002      	beq.n	e06 <SerialConsoleWriteString+0x3a>
}
     e00:	bc04      	pop	{r2}
     e02:	4690      	mov	r8, r2
     e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
     e06:	4c0b      	ldr	r4, [pc, #44]	; (e34 <SerialConsoleWriteString+0x68>)
     e08:	4b06      	ldr	r3, [pc, #24]	; (e24 <SerialConsoleWriteString+0x58>)
     e0a:	6818      	ldr	r0, [r3, #0]
     e0c:	0021      	movs	r1, r4
     e0e:	4b0a      	ldr	r3, [pc, #40]	; (e38 <SerialConsoleWriteString+0x6c>)
     e10:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     e12:	2201      	movs	r2, #1
     e14:	0021      	movs	r1, r4
     e16:	4805      	ldr	r0, [pc, #20]	; (e2c <SerialConsoleWriteString+0x60>)
     e18:	4b08      	ldr	r3, [pc, #32]	; (e3c <SerialConsoleWriteString+0x70>)
     e1a:	4798      	blx	r3
}
     e1c:	e7f0      	b.n	e00 <SerialConsoleWriteString+0x34>
     e1e:	46c0      	nop			; (mov r8, r8)
     e20:	00001d49 	.word	0x00001d49
     e24:	20000530 	.word	0x20000530
     e28:	00000bc9 	.word	0x00000bc9
     e2c:	200000f0 	.word	0x200000f0
     e30:	00000979 	.word	0x00000979
     e34:	2000052c 	.word	0x2000052c
     e38:	00000bf5 	.word	0x00000bf5
     e3c:	00000939 	.word	0x00000939

00000e40 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     e40:	4b0c      	ldr	r3, [pc, #48]	; (e74 <cpu_irq_enter_critical+0x34>)
     e42:	681b      	ldr	r3, [r3, #0]
     e44:	2b00      	cmp	r3, #0
     e46:	d106      	bne.n	e56 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     e48:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     e4c:	2b00      	cmp	r3, #0
     e4e:	d007      	beq.n	e60 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     e50:	2200      	movs	r2, #0
     e52:	4b09      	ldr	r3, [pc, #36]	; (e78 <cpu_irq_enter_critical+0x38>)
     e54:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     e56:	4a07      	ldr	r2, [pc, #28]	; (e74 <cpu_irq_enter_critical+0x34>)
     e58:	6813      	ldr	r3, [r2, #0]
     e5a:	3301      	adds	r3, #1
     e5c:	6013      	str	r3, [r2, #0]
}
     e5e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     e60:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     e62:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     e66:	2200      	movs	r2, #0
     e68:	4b04      	ldr	r3, [pc, #16]	; (e7c <cpu_irq_enter_critical+0x3c>)
     e6a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     e6c:	3201      	adds	r2, #1
     e6e:	4b02      	ldr	r3, [pc, #8]	; (e78 <cpu_irq_enter_critical+0x38>)
     e70:	701a      	strb	r2, [r3, #0]
     e72:	e7f0      	b.n	e56 <cpu_irq_enter_critical+0x16>
     e74:	200000ac 	.word	0x200000ac
     e78:	200000b0 	.word	0x200000b0
     e7c:	2000000c 	.word	0x2000000c

00000e80 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     e80:	4b08      	ldr	r3, [pc, #32]	; (ea4 <cpu_irq_leave_critical+0x24>)
     e82:	681a      	ldr	r2, [r3, #0]
     e84:	3a01      	subs	r2, #1
     e86:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     e88:	681b      	ldr	r3, [r3, #0]
     e8a:	2b00      	cmp	r3, #0
     e8c:	d109      	bne.n	ea2 <cpu_irq_leave_critical+0x22>
     e8e:	4b06      	ldr	r3, [pc, #24]	; (ea8 <cpu_irq_leave_critical+0x28>)
     e90:	781b      	ldrb	r3, [r3, #0]
     e92:	2b00      	cmp	r3, #0
     e94:	d005      	beq.n	ea2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     e96:	2201      	movs	r2, #1
     e98:	4b04      	ldr	r3, [pc, #16]	; (eac <cpu_irq_leave_critical+0x2c>)
     e9a:	701a      	strb	r2, [r3, #0]
     e9c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     ea0:	b662      	cpsie	i
	}
}
     ea2:	4770      	bx	lr
     ea4:	200000ac 	.word	0x200000ac
     ea8:	200000b0 	.word	0x200000b0
     eac:	2000000c 	.word	0x2000000c

00000eb0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     eb2:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
     eb4:	ac01      	add	r4, sp, #4
     eb6:	2501      	movs	r5, #1
     eb8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     eba:	2700      	movs	r7, #0
     ebc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     ebe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     ec0:	0021      	movs	r1, r4
     ec2:	2017      	movs	r0, #23
     ec4:	4e06      	ldr	r6, [pc, #24]	; (ee0 <system_board_init+0x30>)
     ec6:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     ec8:	2280      	movs	r2, #128	; 0x80
     eca:	0412      	lsls	r2, r2, #16
     ecc:	4b05      	ldr	r3, [pc, #20]	; (ee4 <system_board_init+0x34>)
     ece:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     ed0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     ed2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     ed4:	0021      	movs	r1, r4
     ed6:	2037      	movs	r0, #55	; 0x37
     ed8:	47b0      	blx	r6
}
     eda:	b003      	add	sp, #12
     edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ede:	46c0      	nop			; (mov r8, r8)
     ee0:	00000ee9 	.word	0x00000ee9
     ee4:	41004400 	.word	0x41004400

00000ee8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     ee8:	b500      	push	{lr}
     eea:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     eec:	ab01      	add	r3, sp, #4
     eee:	2280      	movs	r2, #128	; 0x80
     ef0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     ef2:	780a      	ldrb	r2, [r1, #0]
     ef4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     ef6:	784a      	ldrb	r2, [r1, #1]
     ef8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     efa:	788a      	ldrb	r2, [r1, #2]
     efc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     efe:	0019      	movs	r1, r3
     f00:	4b01      	ldr	r3, [pc, #4]	; (f08 <port_pin_set_config+0x20>)
     f02:	4798      	blx	r3
}
     f04:	b003      	add	sp, #12
     f06:	bd00      	pop	{pc}
     f08:	0000164d 	.word	0x0000164d

00000f0c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     f0c:	b510      	push	{r4, lr}
	switch (clock_source) {
     f0e:	2808      	cmp	r0, #8
     f10:	d803      	bhi.n	f1a <system_clock_source_get_hz+0xe>
     f12:	0080      	lsls	r0, r0, #2
     f14:	4b1c      	ldr	r3, [pc, #112]	; (f88 <system_clock_source_get_hz+0x7c>)
     f16:	581b      	ldr	r3, [r3, r0]
     f18:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     f1a:	2000      	movs	r0, #0
     f1c:	e032      	b.n	f84 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     f1e:	4b1b      	ldr	r3, [pc, #108]	; (f8c <system_clock_source_get_hz+0x80>)
     f20:	6918      	ldr	r0, [r3, #16]
     f22:	e02f      	b.n	f84 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     f24:	4b1a      	ldr	r3, [pc, #104]	; (f90 <system_clock_source_get_hz+0x84>)
     f26:	6a1b      	ldr	r3, [r3, #32]
     f28:	059b      	lsls	r3, r3, #22
     f2a:	0f9b      	lsrs	r3, r3, #30
     f2c:	4819      	ldr	r0, [pc, #100]	; (f94 <system_clock_source_get_hz+0x88>)
     f2e:	40d8      	lsrs	r0, r3
     f30:	e028      	b.n	f84 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     f32:	4b16      	ldr	r3, [pc, #88]	; (f8c <system_clock_source_get_hz+0x80>)
     f34:	6958      	ldr	r0, [r3, #20]
     f36:	e025      	b.n	f84 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f38:	4b14      	ldr	r3, [pc, #80]	; (f8c <system_clock_source_get_hz+0x80>)
     f3a:	681b      	ldr	r3, [r3, #0]
			return 0;
     f3c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f3e:	079b      	lsls	r3, r3, #30
     f40:	d520      	bpl.n	f84 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f42:	4913      	ldr	r1, [pc, #76]	; (f90 <system_clock_source_get_hz+0x84>)
     f44:	2210      	movs	r2, #16
     f46:	68cb      	ldr	r3, [r1, #12]
     f48:	421a      	tst	r2, r3
     f4a:	d0fc      	beq.n	f46 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     f4c:	4b0f      	ldr	r3, [pc, #60]	; (f8c <system_clock_source_get_hz+0x80>)
     f4e:	681a      	ldr	r2, [r3, #0]
     f50:	2324      	movs	r3, #36	; 0x24
     f52:	4013      	ands	r3, r2
     f54:	2b04      	cmp	r3, #4
     f56:	d001      	beq.n	f5c <system_clock_source_get_hz+0x50>
			return 48000000UL;
     f58:	480f      	ldr	r0, [pc, #60]	; (f98 <system_clock_source_get_hz+0x8c>)
     f5a:	e013      	b.n	f84 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f5c:	2000      	movs	r0, #0
     f5e:	4b0f      	ldr	r3, [pc, #60]	; (f9c <system_clock_source_get_hz+0x90>)
     f60:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     f62:	4b0a      	ldr	r3, [pc, #40]	; (f8c <system_clock_source_get_hz+0x80>)
     f64:	689b      	ldr	r3, [r3, #8]
     f66:	041b      	lsls	r3, r3, #16
     f68:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f6a:	4358      	muls	r0, r3
     f6c:	e00a      	b.n	f84 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     f6e:	2350      	movs	r3, #80	; 0x50
     f70:	4a07      	ldr	r2, [pc, #28]	; (f90 <system_clock_source_get_hz+0x84>)
     f72:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     f74:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     f76:	075b      	lsls	r3, r3, #29
     f78:	d504      	bpl.n	f84 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     f7a:	4b04      	ldr	r3, [pc, #16]	; (f8c <system_clock_source_get_hz+0x80>)
     f7c:	68d8      	ldr	r0, [r3, #12]
     f7e:	e001      	b.n	f84 <system_clock_source_get_hz+0x78>
		return 32768UL;
     f80:	2080      	movs	r0, #128	; 0x80
     f82:	0200      	lsls	r0, r0, #8
	}
}
     f84:	bd10      	pop	{r4, pc}
     f86:	46c0      	nop			; (mov r8, r8)
     f88:	00001d74 	.word	0x00001d74
     f8c:	200000b4 	.word	0x200000b4
     f90:	40000800 	.word	0x40000800
     f94:	007a1200 	.word	0x007a1200
     f98:	02dc6c00 	.word	0x02dc6c00
     f9c:	00001571 	.word	0x00001571

00000fa0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     fa0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     fa2:	490c      	ldr	r1, [pc, #48]	; (fd4 <system_clock_source_osc8m_set_config+0x34>)
     fa4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     fa6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     fa8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     faa:	7840      	ldrb	r0, [r0, #1]
     fac:	2201      	movs	r2, #1
     fae:	4010      	ands	r0, r2
     fb0:	0180      	lsls	r0, r0, #6
     fb2:	2640      	movs	r6, #64	; 0x40
     fb4:	43b3      	bics	r3, r6
     fb6:	4303      	orrs	r3, r0
     fb8:	402a      	ands	r2, r5
     fba:	01d2      	lsls	r2, r2, #7
     fbc:	2080      	movs	r0, #128	; 0x80
     fbe:	4383      	bics	r3, r0
     fc0:	4313      	orrs	r3, r2
     fc2:	2203      	movs	r2, #3
     fc4:	4022      	ands	r2, r4
     fc6:	0212      	lsls	r2, r2, #8
     fc8:	4803      	ldr	r0, [pc, #12]	; (fd8 <system_clock_source_osc8m_set_config+0x38>)
     fca:	4003      	ands	r3, r0
     fcc:	4313      	orrs	r3, r2
     fce:	620b      	str	r3, [r1, #32]
}
     fd0:	bd70      	pop	{r4, r5, r6, pc}
     fd2:	46c0      	nop			; (mov r8, r8)
     fd4:	40000800 	.word	0x40000800
     fd8:	fffffcff 	.word	0xfffffcff

00000fdc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
     fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
     fde:	46de      	mov	lr, fp
     fe0:	4657      	mov	r7, sl
     fe2:	464e      	mov	r6, r9
     fe4:	4645      	mov	r5, r8
     fe6:	b5e0      	push	{r5, r6, r7, lr}
     fe8:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
     fea:	4b26      	ldr	r3, [pc, #152]	; (1084 <system_clock_source_xosc32k_set_config+0xa8>)
     fec:	469b      	mov	fp, r3
     fee:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
     ff0:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
     ff2:	7800      	ldrb	r0, [r0, #0]
     ff4:	4242      	negs	r2, r0
     ff6:	4142      	adcs	r2, r0
     ff8:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
     ffa:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
     ffc:	78ca      	ldrb	r2, [r1, #3]
     ffe:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1000:	790a      	ldrb	r2, [r1, #4]
    1002:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1004:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1006:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1008:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    100a:	688a      	ldr	r2, [r1, #8]
    100c:	491e      	ldr	r1, [pc, #120]	; (1088 <system_clock_source_xosc32k_set_config+0xac>)
    100e:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1010:	2101      	movs	r1, #1
    1012:	464a      	mov	r2, r9
    1014:	0092      	lsls	r2, r2, #2
    1016:	4691      	mov	r9, r2
    1018:	2204      	movs	r2, #4
    101a:	4393      	bics	r3, r2
    101c:	464a      	mov	r2, r9
    101e:	4313      	orrs	r3, r2
    1020:	4642      	mov	r2, r8
    1022:	400a      	ands	r2, r1
    1024:	00d2      	lsls	r2, r2, #3
    1026:	4690      	mov	r8, r2
    1028:	2208      	movs	r2, #8
    102a:	4393      	bics	r3, r2
    102c:	4642      	mov	r2, r8
    102e:	4313      	orrs	r3, r2
    1030:	4662      	mov	r2, ip
    1032:	400a      	ands	r2, r1
    1034:	0112      	lsls	r2, r2, #4
    1036:	4694      	mov	ip, r2
    1038:	2210      	movs	r2, #16
    103a:	4393      	bics	r3, r2
    103c:	4662      	mov	r2, ip
    103e:	4313      	orrs	r3, r2
    1040:	4008      	ands	r0, r1
    1042:	0140      	lsls	r0, r0, #5
    1044:	2220      	movs	r2, #32
    1046:	4393      	bics	r3, r2
    1048:	4303      	orrs	r3, r0
    104a:	400f      	ands	r7, r1
    104c:	01bf      	lsls	r7, r7, #6
    104e:	2040      	movs	r0, #64	; 0x40
    1050:	4383      	bics	r3, r0
    1052:	433b      	orrs	r3, r7
    1054:	400e      	ands	r6, r1
    1056:	01f6      	lsls	r6, r6, #7
    1058:	3040      	adds	r0, #64	; 0x40
    105a:	4383      	bics	r3, r0
    105c:	4333      	orrs	r3, r6
    105e:	3879      	subs	r0, #121	; 0x79
    1060:	4005      	ands	r5, r0
    1062:	022d      	lsls	r5, r5, #8
    1064:	4809      	ldr	r0, [pc, #36]	; (108c <system_clock_source_xosc32k_set_config+0xb0>)
    1066:	4003      	ands	r3, r0
    1068:	432b      	orrs	r3, r5
    106a:	4021      	ands	r1, r4
    106c:	0309      	lsls	r1, r1, #12
    106e:	4808      	ldr	r0, [pc, #32]	; (1090 <system_clock_source_xosc32k_set_config+0xb4>)
    1070:	4003      	ands	r3, r0
    1072:	430b      	orrs	r3, r1
    1074:	465a      	mov	r2, fp
    1076:	8293      	strh	r3, [r2, #20]
}
    1078:	bc3c      	pop	{r2, r3, r4, r5}
    107a:	4690      	mov	r8, r2
    107c:	4699      	mov	r9, r3
    107e:	46a2      	mov	sl, r4
    1080:	46ab      	mov	fp, r5
    1082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1084:	40000800 	.word	0x40000800
    1088:	200000b4 	.word	0x200000b4
    108c:	fffff8ff 	.word	0xfffff8ff
    1090:	ffffefff 	.word	0xffffefff

00001094 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1094:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1096:	7a03      	ldrb	r3, [r0, #8]
    1098:	069b      	lsls	r3, r3, #26
    109a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    109c:	8942      	ldrh	r2, [r0, #10]
    109e:	0592      	lsls	r2, r2, #22
    10a0:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    10a2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    10a4:	4918      	ldr	r1, [pc, #96]	; (1108 <system_clock_source_dfll_set_config+0x74>)
    10a6:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    10a8:	7983      	ldrb	r3, [r0, #6]
    10aa:	79c2      	ldrb	r2, [r0, #7]
    10ac:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    10ae:	8842      	ldrh	r2, [r0, #2]
    10b0:	8884      	ldrh	r4, [r0, #4]
    10b2:	4322      	orrs	r2, r4
    10b4:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    10b6:	7842      	ldrb	r2, [r0, #1]
    10b8:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    10ba:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    10bc:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    10be:	7803      	ldrb	r3, [r0, #0]
    10c0:	2b04      	cmp	r3, #4
    10c2:	d011      	beq.n	10e8 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    10c4:	2b20      	cmp	r3, #32
    10c6:	d10e      	bne.n	10e6 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    10c8:	7b03      	ldrb	r3, [r0, #12]
    10ca:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    10cc:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    10ce:	4313      	orrs	r3, r2
    10d0:	89c2      	ldrh	r2, [r0, #14]
    10d2:	0412      	lsls	r2, r2, #16
    10d4:	490d      	ldr	r1, [pc, #52]	; (110c <system_clock_source_dfll_set_config+0x78>)
    10d6:	400a      	ands	r2, r1
    10d8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    10da:	4a0b      	ldr	r2, [pc, #44]	; (1108 <system_clock_source_dfll_set_config+0x74>)
    10dc:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    10de:	6811      	ldr	r1, [r2, #0]
    10e0:	4b0b      	ldr	r3, [pc, #44]	; (1110 <system_clock_source_dfll_set_config+0x7c>)
    10e2:	430b      	orrs	r3, r1
    10e4:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    10e6:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    10e8:	7b03      	ldrb	r3, [r0, #12]
    10ea:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    10ec:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    10ee:	4313      	orrs	r3, r2
    10f0:	89c2      	ldrh	r2, [r0, #14]
    10f2:	0412      	lsls	r2, r2, #16
    10f4:	4905      	ldr	r1, [pc, #20]	; (110c <system_clock_source_dfll_set_config+0x78>)
    10f6:	400a      	ands	r2, r1
    10f8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    10fa:	4a03      	ldr	r2, [pc, #12]	; (1108 <system_clock_source_dfll_set_config+0x74>)
    10fc:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    10fe:	6813      	ldr	r3, [r2, #0]
    1100:	2104      	movs	r1, #4
    1102:	430b      	orrs	r3, r1
    1104:	6013      	str	r3, [r2, #0]
    1106:	e7ee      	b.n	10e6 <system_clock_source_dfll_set_config+0x52>
    1108:	200000b4 	.word	0x200000b4
    110c:	03ff0000 	.word	0x03ff0000
    1110:	00000424 	.word	0x00000424

00001114 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1114:	2808      	cmp	r0, #8
    1116:	d803      	bhi.n	1120 <system_clock_source_enable+0xc>
    1118:	0080      	lsls	r0, r0, #2
    111a:	4b25      	ldr	r3, [pc, #148]	; (11b0 <system_clock_source_enable+0x9c>)
    111c:	581b      	ldr	r3, [r3, r0]
    111e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1120:	2017      	movs	r0, #23
    1122:	e044      	b.n	11ae <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1124:	4a23      	ldr	r2, [pc, #140]	; (11b4 <system_clock_source_enable+0xa0>)
    1126:	6a13      	ldr	r3, [r2, #32]
    1128:	2102      	movs	r1, #2
    112a:	430b      	orrs	r3, r1
    112c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    112e:	2000      	movs	r0, #0
    1130:	e03d      	b.n	11ae <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1132:	4a20      	ldr	r2, [pc, #128]	; (11b4 <system_clock_source_enable+0xa0>)
    1134:	6993      	ldr	r3, [r2, #24]
    1136:	2102      	movs	r1, #2
    1138:	430b      	orrs	r3, r1
    113a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    113c:	2000      	movs	r0, #0
		break;
    113e:	e036      	b.n	11ae <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1140:	4a1c      	ldr	r2, [pc, #112]	; (11b4 <system_clock_source_enable+0xa0>)
    1142:	8a13      	ldrh	r3, [r2, #16]
    1144:	2102      	movs	r1, #2
    1146:	430b      	orrs	r3, r1
    1148:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    114a:	2000      	movs	r0, #0
		break;
    114c:	e02f      	b.n	11ae <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    114e:	4a19      	ldr	r2, [pc, #100]	; (11b4 <system_clock_source_enable+0xa0>)
    1150:	8a93      	ldrh	r3, [r2, #20]
    1152:	2102      	movs	r1, #2
    1154:	430b      	orrs	r3, r1
    1156:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1158:	2000      	movs	r0, #0
		break;
    115a:	e028      	b.n	11ae <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    115c:	4916      	ldr	r1, [pc, #88]	; (11b8 <system_clock_source_enable+0xa4>)
    115e:	680b      	ldr	r3, [r1, #0]
    1160:	2202      	movs	r2, #2
    1162:	4313      	orrs	r3, r2
    1164:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1166:	4b13      	ldr	r3, [pc, #76]	; (11b4 <system_clock_source_enable+0xa0>)
    1168:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    116a:	0019      	movs	r1, r3
    116c:	320e      	adds	r2, #14
    116e:	68cb      	ldr	r3, [r1, #12]
    1170:	421a      	tst	r2, r3
    1172:	d0fc      	beq.n	116e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1174:	4a10      	ldr	r2, [pc, #64]	; (11b8 <system_clock_source_enable+0xa4>)
    1176:	6891      	ldr	r1, [r2, #8]
    1178:	4b0e      	ldr	r3, [pc, #56]	; (11b4 <system_clock_source_enable+0xa0>)
    117a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    117c:	6852      	ldr	r2, [r2, #4]
    117e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1180:	2200      	movs	r2, #0
    1182:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1184:	0019      	movs	r1, r3
    1186:	3210      	adds	r2, #16
    1188:	68cb      	ldr	r3, [r1, #12]
    118a:	421a      	tst	r2, r3
    118c:	d0fc      	beq.n	1188 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    118e:	4b0a      	ldr	r3, [pc, #40]	; (11b8 <system_clock_source_enable+0xa4>)
    1190:	681b      	ldr	r3, [r3, #0]
    1192:	b29b      	uxth	r3, r3
    1194:	4a07      	ldr	r2, [pc, #28]	; (11b4 <system_clock_source_enable+0xa0>)
    1196:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1198:	2000      	movs	r0, #0
    119a:	e008      	b.n	11ae <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    119c:	4905      	ldr	r1, [pc, #20]	; (11b4 <system_clock_source_enable+0xa0>)
    119e:	2244      	movs	r2, #68	; 0x44
    11a0:	5c8b      	ldrb	r3, [r1, r2]
    11a2:	2002      	movs	r0, #2
    11a4:	4303      	orrs	r3, r0
    11a6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    11a8:	2000      	movs	r0, #0
		break;
    11aa:	e000      	b.n	11ae <system_clock_source_enable+0x9a>
		return STATUS_OK;
    11ac:	2000      	movs	r0, #0
}
    11ae:	4770      	bx	lr
    11b0:	00001d98 	.word	0x00001d98
    11b4:	40000800 	.word	0x40000800
    11b8:	200000b4 	.word	0x200000b4

000011bc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    11bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    11be:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    11c0:	22c2      	movs	r2, #194	; 0xc2
    11c2:	00d2      	lsls	r2, r2, #3
    11c4:	4b47      	ldr	r3, [pc, #284]	; (12e4 <system_clock_init+0x128>)
    11c6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    11c8:	4a47      	ldr	r2, [pc, #284]	; (12e8 <system_clock_init+0x12c>)
    11ca:	6853      	ldr	r3, [r2, #4]
    11cc:	211e      	movs	r1, #30
    11ce:	438b      	bics	r3, r1
    11d0:	391a      	subs	r1, #26
    11d2:	430b      	orrs	r3, r1
    11d4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    11d6:	2202      	movs	r2, #2
    11d8:	ab01      	add	r3, sp, #4
    11da:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    11dc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    11de:	4d43      	ldr	r5, [pc, #268]	; (12ec <system_clock_init+0x130>)
    11e0:	b2e0      	uxtb	r0, r4
    11e2:	a901      	add	r1, sp, #4
    11e4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    11e6:	3401      	adds	r4, #1
    11e8:	2c25      	cmp	r4, #37	; 0x25
    11ea:	d1f9      	bne.n	11e0 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    11ec:	a80a      	add	r0, sp, #40	; 0x28
    11ee:	2300      	movs	r3, #0
    11f0:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    11f2:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    11f4:	2280      	movs	r2, #128	; 0x80
    11f6:	0212      	lsls	r2, r2, #8
    11f8:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    11fa:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    11fc:	2201      	movs	r2, #1
    11fe:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1200:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1202:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1204:	3202      	adds	r2, #2
    1206:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1208:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    120a:	4b39      	ldr	r3, [pc, #228]	; (12f0 <system_clock_init+0x134>)
    120c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    120e:	2005      	movs	r0, #5
    1210:	4b38      	ldr	r3, [pc, #224]	; (12f4 <system_clock_init+0x138>)
    1212:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1214:	4933      	ldr	r1, [pc, #204]	; (12e4 <system_clock_init+0x128>)
    1216:	2202      	movs	r2, #2
    1218:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    121a:	421a      	tst	r2, r3
    121c:	d0fc      	beq.n	1218 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    121e:	4a31      	ldr	r2, [pc, #196]	; (12e4 <system_clock_init+0x128>)
    1220:	8a93      	ldrh	r3, [r2, #20]
    1222:	2180      	movs	r1, #128	; 0x80
    1224:	430b      	orrs	r3, r1
    1226:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1228:	ab05      	add	r3, sp, #20
    122a:	2100      	movs	r1, #0
    122c:	2200      	movs	r2, #0
    122e:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1230:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1232:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1234:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1236:	313f      	adds	r1, #63	; 0x3f
    1238:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    123a:	393b      	subs	r1, #59	; 0x3b
    123c:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    123e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1240:	4b2d      	ldr	r3, [pc, #180]	; (12f8 <system_clock_init+0x13c>)
    1242:	681b      	ldr	r3, [r3, #0]
    1244:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1246:	2b3f      	cmp	r3, #63	; 0x3f
    1248:	d04a      	beq.n	12e0 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    124a:	a805      	add	r0, sp, #20
    124c:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    124e:	4b2b      	ldr	r3, [pc, #172]	; (12fc <system_clock_init+0x140>)
    1250:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1252:	2307      	movs	r3, #7
    1254:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1256:	3338      	adds	r3, #56	; 0x38
    1258:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    125a:	4b29      	ldr	r3, [pc, #164]	; (1300 <system_clock_init+0x144>)
    125c:	4798      	blx	r3
	config->run_in_standby  = false;
    125e:	a804      	add	r0, sp, #16
    1260:	2500      	movs	r5, #0
    1262:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1264:	2601      	movs	r6, #1
    1266:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1268:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    126a:	4b26      	ldr	r3, [pc, #152]	; (1304 <system_clock_init+0x148>)
    126c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    126e:	2006      	movs	r0, #6
    1270:	4f20      	ldr	r7, [pc, #128]	; (12f4 <system_clock_init+0x138>)
    1272:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1274:	4b24      	ldr	r3, [pc, #144]	; (1308 <system_clock_init+0x14c>)
    1276:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1278:	ac01      	add	r4, sp, #4
    127a:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    127c:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    127e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1280:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1282:	2305      	movs	r3, #5
    1284:	7023      	strb	r3, [r4, #0]
    1286:	0021      	movs	r1, r4
    1288:	2001      	movs	r0, #1
    128a:	4b20      	ldr	r3, [pc, #128]	; (130c <system_clock_init+0x150>)
    128c:	4798      	blx	r3
    128e:	2001      	movs	r0, #1
    1290:	4b1f      	ldr	r3, [pc, #124]	; (1310 <system_clock_init+0x154>)
    1292:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1294:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1296:	0021      	movs	r1, r4
    1298:	2000      	movs	r0, #0
    129a:	4b14      	ldr	r3, [pc, #80]	; (12ec <system_clock_init+0x130>)
    129c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    129e:	2000      	movs	r0, #0
    12a0:	4b1c      	ldr	r3, [pc, #112]	; (1314 <system_clock_init+0x158>)
    12a2:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    12a4:	2007      	movs	r0, #7
    12a6:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    12a8:	490e      	ldr	r1, [pc, #56]	; (12e4 <system_clock_init+0x128>)
    12aa:	22d0      	movs	r2, #208	; 0xd0
    12ac:	68cb      	ldr	r3, [r1, #12]
    12ae:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    12b0:	2bd0      	cmp	r3, #208	; 0xd0
    12b2:	d1fb      	bne.n	12ac <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    12b4:	4a18      	ldr	r2, [pc, #96]	; (1318 <system_clock_init+0x15c>)
    12b6:	2300      	movs	r3, #0
    12b8:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    12ba:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    12bc:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    12be:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    12c0:	a901      	add	r1, sp, #4
    12c2:	2201      	movs	r2, #1
    12c4:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    12c6:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    12c8:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    12ca:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    12cc:	3307      	adds	r3, #7
    12ce:	700b      	strb	r3, [r1, #0]
    12d0:	2000      	movs	r0, #0
    12d2:	4b0e      	ldr	r3, [pc, #56]	; (130c <system_clock_init+0x150>)
    12d4:	4798      	blx	r3
    12d6:	2000      	movs	r0, #0
    12d8:	4b0d      	ldr	r3, [pc, #52]	; (1310 <system_clock_init+0x154>)
    12da:	4798      	blx	r3
#endif
}
    12dc:	b00f      	add	sp, #60	; 0x3c
    12de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    12e0:	3b20      	subs	r3, #32
    12e2:	e7b2      	b.n	124a <system_clock_init+0x8e>
    12e4:	40000800 	.word	0x40000800
    12e8:	41004000 	.word	0x41004000
    12ec:	00001555 	.word	0x00001555
    12f0:	00000fdd 	.word	0x00000fdd
    12f4:	00001115 	.word	0x00001115
    12f8:	00806024 	.word	0x00806024
    12fc:	000005b9 	.word	0x000005b9
    1300:	00001095 	.word	0x00001095
    1304:	00000fa1 	.word	0x00000fa1
    1308:	0000131d 	.word	0x0000131d
    130c:	00001341 	.word	0x00001341
    1310:	000013f9 	.word	0x000013f9
    1314:	000014c9 	.word	0x000014c9
    1318:	40000400 	.word	0x40000400

0000131c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    131c:	4a06      	ldr	r2, [pc, #24]	; (1338 <system_gclk_init+0x1c>)
    131e:	6993      	ldr	r3, [r2, #24]
    1320:	2108      	movs	r1, #8
    1322:	430b      	orrs	r3, r1
    1324:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1326:	2201      	movs	r2, #1
    1328:	4b04      	ldr	r3, [pc, #16]	; (133c <system_gclk_init+0x20>)
    132a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    132c:	0019      	movs	r1, r3
    132e:	780b      	ldrb	r3, [r1, #0]
    1330:	4213      	tst	r3, r2
    1332:	d1fc      	bne.n	132e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1334:	4770      	bx	lr
    1336:	46c0      	nop			; (mov r8, r8)
    1338:	40000400 	.word	0x40000400
    133c:	40000c00 	.word	0x40000c00

00001340 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1340:	b570      	push	{r4, r5, r6, lr}
    1342:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1344:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1346:	780d      	ldrb	r5, [r1, #0]
    1348:	022d      	lsls	r5, r5, #8
    134a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    134c:	784b      	ldrb	r3, [r1, #1]
    134e:	2b00      	cmp	r3, #0
    1350:	d002      	beq.n	1358 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1352:	2380      	movs	r3, #128	; 0x80
    1354:	02db      	lsls	r3, r3, #11
    1356:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1358:	7a4b      	ldrb	r3, [r1, #9]
    135a:	2b00      	cmp	r3, #0
    135c:	d002      	beq.n	1364 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    135e:	2380      	movs	r3, #128	; 0x80
    1360:	031b      	lsls	r3, r3, #12
    1362:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1364:	6848      	ldr	r0, [r1, #4]
    1366:	2801      	cmp	r0, #1
    1368:	d910      	bls.n	138c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    136a:	1e43      	subs	r3, r0, #1
    136c:	4218      	tst	r0, r3
    136e:	d134      	bne.n	13da <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1370:	2802      	cmp	r0, #2
    1372:	d930      	bls.n	13d6 <system_gclk_gen_set_config+0x96>
    1374:	2302      	movs	r3, #2
    1376:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1378:	3201      	adds	r2, #1
						mask <<= 1) {
    137a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    137c:	4298      	cmp	r0, r3
    137e:	d8fb      	bhi.n	1378 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1380:	0212      	lsls	r2, r2, #8
    1382:	4332      	orrs	r2, r6
    1384:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1386:	2380      	movs	r3, #128	; 0x80
    1388:	035b      	lsls	r3, r3, #13
    138a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    138c:	7a0b      	ldrb	r3, [r1, #8]
    138e:	2b00      	cmp	r3, #0
    1390:	d002      	beq.n	1398 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1392:	2380      	movs	r3, #128	; 0x80
    1394:	039b      	lsls	r3, r3, #14
    1396:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1398:	4a13      	ldr	r2, [pc, #76]	; (13e8 <system_gclk_gen_set_config+0xa8>)
    139a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    139c:	b25b      	sxtb	r3, r3
    139e:	2b00      	cmp	r3, #0
    13a0:	dbfb      	blt.n	139a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    13a2:	4b12      	ldr	r3, [pc, #72]	; (13ec <system_gclk_gen_set_config+0xac>)
    13a4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    13a6:	4b12      	ldr	r3, [pc, #72]	; (13f0 <system_gclk_gen_set_config+0xb0>)
    13a8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13aa:	4a0f      	ldr	r2, [pc, #60]	; (13e8 <system_gclk_gen_set_config+0xa8>)
    13ac:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    13ae:	b25b      	sxtb	r3, r3
    13b0:	2b00      	cmp	r3, #0
    13b2:	dbfb      	blt.n	13ac <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    13b4:	4b0c      	ldr	r3, [pc, #48]	; (13e8 <system_gclk_gen_set_config+0xa8>)
    13b6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13b8:	001a      	movs	r2, r3
    13ba:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    13bc:	b25b      	sxtb	r3, r3
    13be:	2b00      	cmp	r3, #0
    13c0:	dbfb      	blt.n	13ba <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    13c2:	4a09      	ldr	r2, [pc, #36]	; (13e8 <system_gclk_gen_set_config+0xa8>)
    13c4:	6853      	ldr	r3, [r2, #4]
    13c6:	2180      	movs	r1, #128	; 0x80
    13c8:	0249      	lsls	r1, r1, #9
    13ca:	400b      	ands	r3, r1
    13cc:	431d      	orrs	r5, r3
    13ce:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    13d0:	4b08      	ldr	r3, [pc, #32]	; (13f4 <system_gclk_gen_set_config+0xb4>)
    13d2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    13d4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    13d6:	2200      	movs	r2, #0
    13d8:	e7d2      	b.n	1380 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    13da:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    13dc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    13de:	2380      	movs	r3, #128	; 0x80
    13e0:	029b      	lsls	r3, r3, #10
    13e2:	431d      	orrs	r5, r3
    13e4:	e7d2      	b.n	138c <system_gclk_gen_set_config+0x4c>
    13e6:	46c0      	nop			; (mov r8, r8)
    13e8:	40000c00 	.word	0x40000c00
    13ec:	00000e41 	.word	0x00000e41
    13f0:	40000c08 	.word	0x40000c08
    13f4:	00000e81 	.word	0x00000e81

000013f8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    13f8:	b510      	push	{r4, lr}
    13fa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13fc:	4a0b      	ldr	r2, [pc, #44]	; (142c <system_gclk_gen_enable+0x34>)
    13fe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1400:	b25b      	sxtb	r3, r3
    1402:	2b00      	cmp	r3, #0
    1404:	dbfb      	blt.n	13fe <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1406:	4b0a      	ldr	r3, [pc, #40]	; (1430 <system_gclk_gen_enable+0x38>)
    1408:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    140a:	4b0a      	ldr	r3, [pc, #40]	; (1434 <system_gclk_gen_enable+0x3c>)
    140c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    140e:	4a07      	ldr	r2, [pc, #28]	; (142c <system_gclk_gen_enable+0x34>)
    1410:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1412:	b25b      	sxtb	r3, r3
    1414:	2b00      	cmp	r3, #0
    1416:	dbfb      	blt.n	1410 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1418:	4a04      	ldr	r2, [pc, #16]	; (142c <system_gclk_gen_enable+0x34>)
    141a:	6851      	ldr	r1, [r2, #4]
    141c:	2380      	movs	r3, #128	; 0x80
    141e:	025b      	lsls	r3, r3, #9
    1420:	430b      	orrs	r3, r1
    1422:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1424:	4b04      	ldr	r3, [pc, #16]	; (1438 <system_gclk_gen_enable+0x40>)
    1426:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1428:	bd10      	pop	{r4, pc}
    142a:	46c0      	nop			; (mov r8, r8)
    142c:	40000c00 	.word	0x40000c00
    1430:	00000e41 	.word	0x00000e41
    1434:	40000c04 	.word	0x40000c04
    1438:	00000e81 	.word	0x00000e81

0000143c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    143c:	b570      	push	{r4, r5, r6, lr}
    143e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1440:	4a1a      	ldr	r2, [pc, #104]	; (14ac <system_gclk_gen_get_hz+0x70>)
    1442:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1444:	b25b      	sxtb	r3, r3
    1446:	2b00      	cmp	r3, #0
    1448:	dbfb      	blt.n	1442 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    144a:	4b19      	ldr	r3, [pc, #100]	; (14b0 <system_gclk_gen_get_hz+0x74>)
    144c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    144e:	4b19      	ldr	r3, [pc, #100]	; (14b4 <system_gclk_gen_get_hz+0x78>)
    1450:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1452:	4a16      	ldr	r2, [pc, #88]	; (14ac <system_gclk_gen_get_hz+0x70>)
    1454:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1456:	b25b      	sxtb	r3, r3
    1458:	2b00      	cmp	r3, #0
    145a:	dbfb      	blt.n	1454 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    145c:	4e13      	ldr	r6, [pc, #76]	; (14ac <system_gclk_gen_get_hz+0x70>)
    145e:	6870      	ldr	r0, [r6, #4]
    1460:	04c0      	lsls	r0, r0, #19
    1462:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1464:	4b14      	ldr	r3, [pc, #80]	; (14b8 <system_gclk_gen_get_hz+0x7c>)
    1466:	4798      	blx	r3
    1468:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    146a:	4b12      	ldr	r3, [pc, #72]	; (14b4 <system_gclk_gen_get_hz+0x78>)
    146c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    146e:	6876      	ldr	r6, [r6, #4]
    1470:	02f6      	lsls	r6, r6, #11
    1472:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1474:	4b11      	ldr	r3, [pc, #68]	; (14bc <system_gclk_gen_get_hz+0x80>)
    1476:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1478:	4a0c      	ldr	r2, [pc, #48]	; (14ac <system_gclk_gen_get_hz+0x70>)
    147a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    147c:	b25b      	sxtb	r3, r3
    147e:	2b00      	cmp	r3, #0
    1480:	dbfb      	blt.n	147a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1482:	4b0a      	ldr	r3, [pc, #40]	; (14ac <system_gclk_gen_get_hz+0x70>)
    1484:	689c      	ldr	r4, [r3, #8]
    1486:	0224      	lsls	r4, r4, #8
    1488:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    148a:	4b0d      	ldr	r3, [pc, #52]	; (14c0 <system_gclk_gen_get_hz+0x84>)
    148c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    148e:	2e00      	cmp	r6, #0
    1490:	d107      	bne.n	14a2 <system_gclk_gen_get_hz+0x66>
    1492:	2c01      	cmp	r4, #1
    1494:	d907      	bls.n	14a6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1496:	0021      	movs	r1, r4
    1498:	0028      	movs	r0, r5
    149a:	4b0a      	ldr	r3, [pc, #40]	; (14c4 <system_gclk_gen_get_hz+0x88>)
    149c:	4798      	blx	r3
    149e:	0005      	movs	r5, r0
    14a0:	e001      	b.n	14a6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    14a2:	3401      	adds	r4, #1
    14a4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    14a6:	0028      	movs	r0, r5
    14a8:	bd70      	pop	{r4, r5, r6, pc}
    14aa:	46c0      	nop			; (mov r8, r8)
    14ac:	40000c00 	.word	0x40000c00
    14b0:	00000e41 	.word	0x00000e41
    14b4:	40000c04 	.word	0x40000c04
    14b8:	00000f0d 	.word	0x00000f0d
    14bc:	40000c08 	.word	0x40000c08
    14c0:	00000e81 	.word	0x00000e81
    14c4:	0000188d 	.word	0x0000188d

000014c8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    14c8:	b510      	push	{r4, lr}
    14ca:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    14cc:	4b06      	ldr	r3, [pc, #24]	; (14e8 <system_gclk_chan_enable+0x20>)
    14ce:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    14d0:	4b06      	ldr	r3, [pc, #24]	; (14ec <system_gclk_chan_enable+0x24>)
    14d2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    14d4:	4a06      	ldr	r2, [pc, #24]	; (14f0 <system_gclk_chan_enable+0x28>)
    14d6:	8853      	ldrh	r3, [r2, #2]
    14d8:	2180      	movs	r1, #128	; 0x80
    14da:	01c9      	lsls	r1, r1, #7
    14dc:	430b      	orrs	r3, r1
    14de:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    14e0:	4b04      	ldr	r3, [pc, #16]	; (14f4 <system_gclk_chan_enable+0x2c>)
    14e2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    14e4:	bd10      	pop	{r4, pc}
    14e6:	46c0      	nop			; (mov r8, r8)
    14e8:	00000e41 	.word	0x00000e41
    14ec:	40000c02 	.word	0x40000c02
    14f0:	40000c00 	.word	0x40000c00
    14f4:	00000e81 	.word	0x00000e81

000014f8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    14f8:	b510      	push	{r4, lr}
    14fa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    14fc:	4b0f      	ldr	r3, [pc, #60]	; (153c <system_gclk_chan_disable+0x44>)
    14fe:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1500:	4b0f      	ldr	r3, [pc, #60]	; (1540 <system_gclk_chan_disable+0x48>)
    1502:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1504:	4a0f      	ldr	r2, [pc, #60]	; (1544 <system_gclk_chan_disable+0x4c>)
    1506:	8853      	ldrh	r3, [r2, #2]
    1508:	051b      	lsls	r3, r3, #20
    150a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    150c:	8853      	ldrh	r3, [r2, #2]
    150e:	490e      	ldr	r1, [pc, #56]	; (1548 <system_gclk_chan_disable+0x50>)
    1510:	400b      	ands	r3, r1
    1512:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1514:	8853      	ldrh	r3, [r2, #2]
    1516:	490d      	ldr	r1, [pc, #52]	; (154c <system_gclk_chan_disable+0x54>)
    1518:	400b      	ands	r3, r1
    151a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    151c:	0011      	movs	r1, r2
    151e:	2280      	movs	r2, #128	; 0x80
    1520:	01d2      	lsls	r2, r2, #7
    1522:	884b      	ldrh	r3, [r1, #2]
    1524:	4213      	tst	r3, r2
    1526:	d1fc      	bne.n	1522 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1528:	4906      	ldr	r1, [pc, #24]	; (1544 <system_gclk_chan_disable+0x4c>)
    152a:	884a      	ldrh	r2, [r1, #2]
    152c:	0203      	lsls	r3, r0, #8
    152e:	4806      	ldr	r0, [pc, #24]	; (1548 <system_gclk_chan_disable+0x50>)
    1530:	4002      	ands	r2, r0
    1532:	4313      	orrs	r3, r2
    1534:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1536:	4b06      	ldr	r3, [pc, #24]	; (1550 <system_gclk_chan_disable+0x58>)
    1538:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    153a:	bd10      	pop	{r4, pc}
    153c:	00000e41 	.word	0x00000e41
    1540:	40000c02 	.word	0x40000c02
    1544:	40000c00 	.word	0x40000c00
    1548:	fffff0ff 	.word	0xfffff0ff
    154c:	ffffbfff 	.word	0xffffbfff
    1550:	00000e81 	.word	0x00000e81

00001554 <system_gclk_chan_set_config>:
{
    1554:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1556:	780c      	ldrb	r4, [r1, #0]
    1558:	0224      	lsls	r4, r4, #8
    155a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    155c:	4b02      	ldr	r3, [pc, #8]	; (1568 <system_gclk_chan_set_config+0x14>)
    155e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1560:	b2a4      	uxth	r4, r4
    1562:	4b02      	ldr	r3, [pc, #8]	; (156c <system_gclk_chan_set_config+0x18>)
    1564:	805c      	strh	r4, [r3, #2]
}
    1566:	bd10      	pop	{r4, pc}
    1568:	000014f9 	.word	0x000014f9
    156c:	40000c00 	.word	0x40000c00

00001570 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1570:	b510      	push	{r4, lr}
    1572:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1574:	4b06      	ldr	r3, [pc, #24]	; (1590 <system_gclk_chan_get_hz+0x20>)
    1576:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1578:	4b06      	ldr	r3, [pc, #24]	; (1594 <system_gclk_chan_get_hz+0x24>)
    157a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    157c:	4b06      	ldr	r3, [pc, #24]	; (1598 <system_gclk_chan_get_hz+0x28>)
    157e:	885c      	ldrh	r4, [r3, #2]
    1580:	0524      	lsls	r4, r4, #20
    1582:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1584:	4b05      	ldr	r3, [pc, #20]	; (159c <system_gclk_chan_get_hz+0x2c>)
    1586:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1588:	0020      	movs	r0, r4
    158a:	4b05      	ldr	r3, [pc, #20]	; (15a0 <system_gclk_chan_get_hz+0x30>)
    158c:	4798      	blx	r3
}
    158e:	bd10      	pop	{r4, pc}
    1590:	00000e41 	.word	0x00000e41
    1594:	40000c02 	.word	0x40000c02
    1598:	40000c00 	.word	0x40000c00
    159c:	00000e81 	.word	0x00000e81
    15a0:	0000143d 	.word	0x0000143d

000015a4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    15a4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    15a6:	78d3      	ldrb	r3, [r2, #3]
    15a8:	2b00      	cmp	r3, #0
    15aa:	d135      	bne.n	1618 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    15ac:	7813      	ldrb	r3, [r2, #0]
    15ae:	2b80      	cmp	r3, #128	; 0x80
    15b0:	d029      	beq.n	1606 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    15b2:	061b      	lsls	r3, r3, #24
    15b4:	2480      	movs	r4, #128	; 0x80
    15b6:	0264      	lsls	r4, r4, #9
    15b8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    15ba:	7854      	ldrb	r4, [r2, #1]
    15bc:	2502      	movs	r5, #2
    15be:	43ac      	bics	r4, r5
    15c0:	d106      	bne.n	15d0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    15c2:	7894      	ldrb	r4, [r2, #2]
    15c4:	2c00      	cmp	r4, #0
    15c6:	d120      	bne.n	160a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    15c8:	2480      	movs	r4, #128	; 0x80
    15ca:	02a4      	lsls	r4, r4, #10
    15cc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    15ce:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    15d0:	7854      	ldrb	r4, [r2, #1]
    15d2:	3c01      	subs	r4, #1
    15d4:	2c01      	cmp	r4, #1
    15d6:	d91c      	bls.n	1612 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    15d8:	040d      	lsls	r5, r1, #16
    15da:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    15dc:	24a0      	movs	r4, #160	; 0xa0
    15de:	05e4      	lsls	r4, r4, #23
    15e0:	432c      	orrs	r4, r5
    15e2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15e4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    15e6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    15e8:	24d0      	movs	r4, #208	; 0xd0
    15ea:	0624      	lsls	r4, r4, #24
    15ec:	432c      	orrs	r4, r5
    15ee:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15f0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    15f2:	78d4      	ldrb	r4, [r2, #3]
    15f4:	2c00      	cmp	r4, #0
    15f6:	d122      	bne.n	163e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    15f8:	035b      	lsls	r3, r3, #13
    15fa:	d51c      	bpl.n	1636 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    15fc:	7893      	ldrb	r3, [r2, #2]
    15fe:	2b01      	cmp	r3, #1
    1600:	d01e      	beq.n	1640 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1602:	6141      	str	r1, [r0, #20]
    1604:	e017      	b.n	1636 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1606:	2300      	movs	r3, #0
    1608:	e7d7      	b.n	15ba <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    160a:	24c0      	movs	r4, #192	; 0xc0
    160c:	02e4      	lsls	r4, r4, #11
    160e:	4323      	orrs	r3, r4
    1610:	e7dd      	b.n	15ce <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1612:	4c0d      	ldr	r4, [pc, #52]	; (1648 <_system_pinmux_config+0xa4>)
    1614:	4023      	ands	r3, r4
    1616:	e7df      	b.n	15d8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1618:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    161a:	040c      	lsls	r4, r1, #16
    161c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    161e:	23a0      	movs	r3, #160	; 0xa0
    1620:	05db      	lsls	r3, r3, #23
    1622:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1624:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1626:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1628:	23d0      	movs	r3, #208	; 0xd0
    162a:	061b      	lsls	r3, r3, #24
    162c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    162e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1630:	78d3      	ldrb	r3, [r2, #3]
    1632:	2b00      	cmp	r3, #0
    1634:	d103      	bne.n	163e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1636:	7853      	ldrb	r3, [r2, #1]
    1638:	3b01      	subs	r3, #1
    163a:	2b01      	cmp	r3, #1
    163c:	d902      	bls.n	1644 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    163e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1640:	6181      	str	r1, [r0, #24]
    1642:	e7f8      	b.n	1636 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1644:	6081      	str	r1, [r0, #8]
}
    1646:	e7fa      	b.n	163e <_system_pinmux_config+0x9a>
    1648:	fffbffff 	.word	0xfffbffff

0000164c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    164c:	b510      	push	{r4, lr}
    164e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1650:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1652:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1654:	2900      	cmp	r1, #0
    1656:	d104      	bne.n	1662 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1658:	0943      	lsrs	r3, r0, #5
    165a:	01db      	lsls	r3, r3, #7
    165c:	4905      	ldr	r1, [pc, #20]	; (1674 <system_pinmux_pin_set_config+0x28>)
    165e:	468c      	mov	ip, r1
    1660:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1662:	241f      	movs	r4, #31
    1664:	4020      	ands	r0, r4
    1666:	2101      	movs	r1, #1
    1668:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    166a:	0018      	movs	r0, r3
    166c:	4b02      	ldr	r3, [pc, #8]	; (1678 <system_pinmux_pin_set_config+0x2c>)
    166e:	4798      	blx	r3
}
    1670:	bd10      	pop	{r4, pc}
    1672:	46c0      	nop			; (mov r8, r8)
    1674:	41004400 	.word	0x41004400
    1678:	000015a5 	.word	0x000015a5

0000167c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    167c:	4770      	bx	lr
	...

00001680 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1680:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1682:	4b05      	ldr	r3, [pc, #20]	; (1698 <system_init+0x18>)
    1684:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1686:	4b05      	ldr	r3, [pc, #20]	; (169c <system_init+0x1c>)
    1688:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    168a:	4b05      	ldr	r3, [pc, #20]	; (16a0 <system_init+0x20>)
    168c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    168e:	4b05      	ldr	r3, [pc, #20]	; (16a4 <system_init+0x24>)
    1690:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1692:	4b05      	ldr	r3, [pc, #20]	; (16a8 <system_init+0x28>)
    1694:	4798      	blx	r3
}
    1696:	bd10      	pop	{r4, pc}
    1698:	000011bd 	.word	0x000011bd
    169c:	00000eb1 	.word	0x00000eb1
    16a0:	0000167d 	.word	0x0000167d
    16a4:	0000167d 	.word	0x0000167d
    16a8:	0000167d 	.word	0x0000167d

000016ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    16ac:	e7fe      	b.n	16ac <Dummy_Handler>
	...

000016b0 <Reset_Handler>:
{
    16b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    16b2:	4a2a      	ldr	r2, [pc, #168]	; (175c <Reset_Handler+0xac>)
    16b4:	4b2a      	ldr	r3, [pc, #168]	; (1760 <Reset_Handler+0xb0>)
    16b6:	429a      	cmp	r2, r3
    16b8:	d011      	beq.n	16de <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    16ba:	001a      	movs	r2, r3
    16bc:	4b29      	ldr	r3, [pc, #164]	; (1764 <Reset_Handler+0xb4>)
    16be:	429a      	cmp	r2, r3
    16c0:	d20d      	bcs.n	16de <Reset_Handler+0x2e>
    16c2:	4a29      	ldr	r2, [pc, #164]	; (1768 <Reset_Handler+0xb8>)
    16c4:	3303      	adds	r3, #3
    16c6:	1a9b      	subs	r3, r3, r2
    16c8:	089b      	lsrs	r3, r3, #2
    16ca:	3301      	adds	r3, #1
    16cc:	009b      	lsls	r3, r3, #2
    16ce:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    16d0:	4823      	ldr	r0, [pc, #140]	; (1760 <Reset_Handler+0xb0>)
    16d2:	4922      	ldr	r1, [pc, #136]	; (175c <Reset_Handler+0xac>)
    16d4:	588c      	ldr	r4, [r1, r2]
    16d6:	5084      	str	r4, [r0, r2]
    16d8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    16da:	429a      	cmp	r2, r3
    16dc:	d1fa      	bne.n	16d4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    16de:	4a23      	ldr	r2, [pc, #140]	; (176c <Reset_Handler+0xbc>)
    16e0:	4b23      	ldr	r3, [pc, #140]	; (1770 <Reset_Handler+0xc0>)
    16e2:	429a      	cmp	r2, r3
    16e4:	d20a      	bcs.n	16fc <Reset_Handler+0x4c>
    16e6:	43d3      	mvns	r3, r2
    16e8:	4921      	ldr	r1, [pc, #132]	; (1770 <Reset_Handler+0xc0>)
    16ea:	185b      	adds	r3, r3, r1
    16ec:	2103      	movs	r1, #3
    16ee:	438b      	bics	r3, r1
    16f0:	3304      	adds	r3, #4
    16f2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    16f4:	2100      	movs	r1, #0
    16f6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    16f8:	4293      	cmp	r3, r2
    16fa:	d1fc      	bne.n	16f6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    16fc:	4a1d      	ldr	r2, [pc, #116]	; (1774 <Reset_Handler+0xc4>)
    16fe:	21ff      	movs	r1, #255	; 0xff
    1700:	4b1d      	ldr	r3, [pc, #116]	; (1778 <Reset_Handler+0xc8>)
    1702:	438b      	bics	r3, r1
    1704:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1706:	39fd      	subs	r1, #253	; 0xfd
    1708:	2390      	movs	r3, #144	; 0x90
    170a:	005b      	lsls	r3, r3, #1
    170c:	4a1b      	ldr	r2, [pc, #108]	; (177c <Reset_Handler+0xcc>)
    170e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1710:	4a1b      	ldr	r2, [pc, #108]	; (1780 <Reset_Handler+0xd0>)
    1712:	78d3      	ldrb	r3, [r2, #3]
    1714:	2503      	movs	r5, #3
    1716:	43ab      	bics	r3, r5
    1718:	2402      	movs	r4, #2
    171a:	4323      	orrs	r3, r4
    171c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    171e:	78d3      	ldrb	r3, [r2, #3]
    1720:	270c      	movs	r7, #12
    1722:	43bb      	bics	r3, r7
    1724:	2608      	movs	r6, #8
    1726:	4333      	orrs	r3, r6
    1728:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    172a:	4b16      	ldr	r3, [pc, #88]	; (1784 <Reset_Handler+0xd4>)
    172c:	7b98      	ldrb	r0, [r3, #14]
    172e:	2230      	movs	r2, #48	; 0x30
    1730:	4390      	bics	r0, r2
    1732:	2220      	movs	r2, #32
    1734:	4310      	orrs	r0, r2
    1736:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1738:	7b99      	ldrb	r1, [r3, #14]
    173a:	43b9      	bics	r1, r7
    173c:	4331      	orrs	r1, r6
    173e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1740:	7b9a      	ldrb	r2, [r3, #14]
    1742:	43aa      	bics	r2, r5
    1744:	4322      	orrs	r2, r4
    1746:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1748:	4a0f      	ldr	r2, [pc, #60]	; (1788 <Reset_Handler+0xd8>)
    174a:	6853      	ldr	r3, [r2, #4]
    174c:	2180      	movs	r1, #128	; 0x80
    174e:	430b      	orrs	r3, r1
    1750:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1752:	4b0e      	ldr	r3, [pc, #56]	; (178c <Reset_Handler+0xdc>)
    1754:	4798      	blx	r3
        main();
    1756:	4b0e      	ldr	r3, [pc, #56]	; (1790 <Reset_Handler+0xe0>)
    1758:	4798      	blx	r3
    175a:	e7fe      	b.n	175a <Reset_Handler+0xaa>
    175c:	00001e04 	.word	0x00001e04
    1760:	20000000 	.word	0x20000000
    1764:	20000074 	.word	0x20000074
    1768:	20000004 	.word	0x20000004
    176c:	20000074 	.word	0x20000074
    1770:	20000538 	.word	0x20000538
    1774:	e000ed00 	.word	0xe000ed00
    1778:	00000000 	.word	0x00000000
    177c:	41007000 	.word	0x41007000
    1780:	41005000 	.word	0x41005000
    1784:	41004800 	.word	0x41004800
    1788:	41004000 	.word	0x41004000
    178c:	00001c0d 	.word	0x00001c0d
    1790:	000017e5 	.word	0x000017e5

00001794 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1794:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1796:	4a06      	ldr	r2, [pc, #24]	; (17b0 <_sbrk+0x1c>)
    1798:	6812      	ldr	r2, [r2, #0]
    179a:	2a00      	cmp	r2, #0
    179c:	d004      	beq.n	17a8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    179e:	4a04      	ldr	r2, [pc, #16]	; (17b0 <_sbrk+0x1c>)
    17a0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    17a2:	18c3      	adds	r3, r0, r3
    17a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    17a6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    17a8:	4902      	ldr	r1, [pc, #8]	; (17b4 <_sbrk+0x20>)
    17aa:	4a01      	ldr	r2, [pc, #4]	; (17b0 <_sbrk+0x1c>)
    17ac:	6011      	str	r1, [r2, #0]
    17ae:	e7f6      	b.n	179e <_sbrk+0xa>
    17b0:	200000cc 	.word	0x200000cc
    17b4:	20002538 	.word	0x20002538

000017b8 <Buzzer_Initialize>:
* @param[in]	N/A
* @param[out]	N/A
* @return		Return true
* @note         
*****************************************************************************/
bool Buzzer_Initialize(void) {
    17b8:	b500      	push	{lr}
    17ba:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    17bc:	a901      	add	r1, sp, #4
    17be:	2301      	movs	r3, #1
    17c0:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    17c2:	2200      	movs	r2, #0
    17c4:	708a      	strb	r2, [r1, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    17c6:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(BUZZER_PIN, &pin_conf);
    17c8:	200b      	movs	r0, #11
    17ca:	4b04      	ldr	r3, [pc, #16]	; (17dc <Buzzer_Initialize+0x24>)
    17cc:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    17ce:	2280      	movs	r2, #128	; 0x80
    17d0:	0112      	lsls	r2, r2, #4
    17d2:	4b03      	ldr	r3, [pc, #12]	; (17e0 <Buzzer_Initialize+0x28>)
    17d4:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(BUZZER_PIN, LED_0_INACTIVE);
	
	return true;
    17d6:	2001      	movs	r0, #1
    17d8:	b003      	add	sp, #12
    17da:	bd00      	pop	{pc}
    17dc:	00000ee9 	.word	0x00000ee9
    17e0:	41004400 	.word	0x41004400

000017e4 <main>:
* @param[out]	N/A
* @return		Return 0, code shouldn't ideally exit this function
* @note         
*****************************************************************************/
int main (void)
{
    17e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17e6:	46de      	mov	lr, fp
    17e8:	4657      	mov	r7, sl
    17ea:	464e      	mov	r6, r9
    17ec:	4645      	mov	r5, r8
    17ee:	b5e0      	push	{r5, r6, r7, lr}
	system_init();
    17f0:	4b1a      	ldr	r3, [pc, #104]	; (185c <main+0x78>)
    17f2:	4798      	blx	r3
	/* Insert application code here, after the board has been initialized. */
	Sensor_Initialize();
    17f4:	4b1a      	ldr	r3, [pc, #104]	; (1860 <main+0x7c>)
    17f6:	4798      	blx	r3
	
	InitializeSerialConsole();
    17f8:	4b1a      	ldr	r3, [pc, #104]	; (1864 <main+0x80>)
    17fa:	4798      	blx	r3
	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {
		
		SerialConsoleWriteString("ESE516 - CLI and Debug Logger\r\n");
    17fc:	481a      	ldr	r0, [pc, #104]	; (1868 <main+0x84>)
    17fe:	4b1b      	ldr	r3, [pc, #108]	; (186c <main+0x88>)
    1800:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1802:	4b1b      	ldr	r3, [pc, #108]	; (1870 <main+0x8c>)
    1804:	469a      	mov	sl, r3
    1806:	2340      	movs	r3, #64	; 0x40
    1808:	469b      	mov	fp, r3
    180a:	4653      	mov	r3, sl
    180c:	465a      	mov	r2, fp
    180e:	615a      	str	r2, [r3, #20]
		/* Is button pressed? */
		port_pin_set_output_level(PIN_PA06, LED_0_ACTIVE);
		delay_ms(500);
    1810:	2000      	movs	r0, #0
    1812:	4b18      	ldr	r3, [pc, #96]	; (1874 <main+0x90>)
    1814:	4699      	mov	r9, r3
    1816:	4798      	blx	r3
    1818:	4b17      	ldr	r3, [pc, #92]	; (1878 <main+0x94>)
    181a:	4698      	mov	r8, r3
    181c:	22fa      	movs	r2, #250	; 0xfa
    181e:	0052      	lsls	r2, r2, #1
    1820:	2300      	movs	r3, #0
    1822:	2100      	movs	r1, #0
    1824:	47c0      	blx	r8
    1826:	4c15      	ldr	r4, [pc, #84]	; (187c <main+0x98>)
    1828:	2500      	movs	r5, #0
    182a:	1900      	adds	r0, r0, r4
    182c:	4169      	adcs	r1, r5
    182e:	4f14      	ldr	r7, [pc, #80]	; (1880 <main+0x9c>)
    1830:	4a14      	ldr	r2, [pc, #80]	; (1884 <main+0xa0>)
    1832:	2300      	movs	r3, #0
    1834:	47b8      	blx	r7
    1836:	4e14      	ldr	r6, [pc, #80]	; (1888 <main+0xa4>)
    1838:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    183a:	4653      	mov	r3, sl
    183c:	465a      	mov	r2, fp
    183e:	619a      	str	r2, [r3, #24]
		port_pin_set_output_level(PIN_PA06, !LED_0_ACTIVE);
		delay_ms(500);
    1840:	2000      	movs	r0, #0
    1842:	47c8      	blx	r9
    1844:	22fa      	movs	r2, #250	; 0xfa
    1846:	0052      	lsls	r2, r2, #1
    1848:	2300      	movs	r3, #0
    184a:	2100      	movs	r1, #0
    184c:	47c0      	blx	r8
    184e:	1900      	adds	r0, r0, r4
    1850:	4169      	adcs	r1, r5
    1852:	4a0c      	ldr	r2, [pc, #48]	; (1884 <main+0xa0>)
    1854:	2300      	movs	r3, #0
    1856:	47b8      	blx	r7
    1858:	47b0      	blx	r6
    185a:	e7cf      	b.n	17fc <main+0x18>
    185c:	00001681 	.word	0x00001681
    1860:	00000b5d 	.word	0x00000b5d
    1864:	00000c8d 	.word	0x00000c8d
    1868:	00001dbc 	.word	0x00001dbc
    186c:	00000dcd 	.word	0x00000dcd
    1870:	41004400 	.word	0x41004400
    1874:	0000143d 	.word	0x0000143d
    1878:	000019e5 	.word	0x000019e5
    187c:	00001b57 	.word	0x00001b57
    1880:	000019a5 	.word	0x000019a5
    1884:	00001b58 	.word	0x00001b58
    1888:	20000001 	.word	0x20000001

0000188c <__udivsi3>:
    188c:	2200      	movs	r2, #0
    188e:	0843      	lsrs	r3, r0, #1
    1890:	428b      	cmp	r3, r1
    1892:	d374      	bcc.n	197e <__udivsi3+0xf2>
    1894:	0903      	lsrs	r3, r0, #4
    1896:	428b      	cmp	r3, r1
    1898:	d35f      	bcc.n	195a <__udivsi3+0xce>
    189a:	0a03      	lsrs	r3, r0, #8
    189c:	428b      	cmp	r3, r1
    189e:	d344      	bcc.n	192a <__udivsi3+0x9e>
    18a0:	0b03      	lsrs	r3, r0, #12
    18a2:	428b      	cmp	r3, r1
    18a4:	d328      	bcc.n	18f8 <__udivsi3+0x6c>
    18a6:	0c03      	lsrs	r3, r0, #16
    18a8:	428b      	cmp	r3, r1
    18aa:	d30d      	bcc.n	18c8 <__udivsi3+0x3c>
    18ac:	22ff      	movs	r2, #255	; 0xff
    18ae:	0209      	lsls	r1, r1, #8
    18b0:	ba12      	rev	r2, r2
    18b2:	0c03      	lsrs	r3, r0, #16
    18b4:	428b      	cmp	r3, r1
    18b6:	d302      	bcc.n	18be <__udivsi3+0x32>
    18b8:	1212      	asrs	r2, r2, #8
    18ba:	0209      	lsls	r1, r1, #8
    18bc:	d065      	beq.n	198a <__udivsi3+0xfe>
    18be:	0b03      	lsrs	r3, r0, #12
    18c0:	428b      	cmp	r3, r1
    18c2:	d319      	bcc.n	18f8 <__udivsi3+0x6c>
    18c4:	e000      	b.n	18c8 <__udivsi3+0x3c>
    18c6:	0a09      	lsrs	r1, r1, #8
    18c8:	0bc3      	lsrs	r3, r0, #15
    18ca:	428b      	cmp	r3, r1
    18cc:	d301      	bcc.n	18d2 <__udivsi3+0x46>
    18ce:	03cb      	lsls	r3, r1, #15
    18d0:	1ac0      	subs	r0, r0, r3
    18d2:	4152      	adcs	r2, r2
    18d4:	0b83      	lsrs	r3, r0, #14
    18d6:	428b      	cmp	r3, r1
    18d8:	d301      	bcc.n	18de <__udivsi3+0x52>
    18da:	038b      	lsls	r3, r1, #14
    18dc:	1ac0      	subs	r0, r0, r3
    18de:	4152      	adcs	r2, r2
    18e0:	0b43      	lsrs	r3, r0, #13
    18e2:	428b      	cmp	r3, r1
    18e4:	d301      	bcc.n	18ea <__udivsi3+0x5e>
    18e6:	034b      	lsls	r3, r1, #13
    18e8:	1ac0      	subs	r0, r0, r3
    18ea:	4152      	adcs	r2, r2
    18ec:	0b03      	lsrs	r3, r0, #12
    18ee:	428b      	cmp	r3, r1
    18f0:	d301      	bcc.n	18f6 <__udivsi3+0x6a>
    18f2:	030b      	lsls	r3, r1, #12
    18f4:	1ac0      	subs	r0, r0, r3
    18f6:	4152      	adcs	r2, r2
    18f8:	0ac3      	lsrs	r3, r0, #11
    18fa:	428b      	cmp	r3, r1
    18fc:	d301      	bcc.n	1902 <__udivsi3+0x76>
    18fe:	02cb      	lsls	r3, r1, #11
    1900:	1ac0      	subs	r0, r0, r3
    1902:	4152      	adcs	r2, r2
    1904:	0a83      	lsrs	r3, r0, #10
    1906:	428b      	cmp	r3, r1
    1908:	d301      	bcc.n	190e <__udivsi3+0x82>
    190a:	028b      	lsls	r3, r1, #10
    190c:	1ac0      	subs	r0, r0, r3
    190e:	4152      	adcs	r2, r2
    1910:	0a43      	lsrs	r3, r0, #9
    1912:	428b      	cmp	r3, r1
    1914:	d301      	bcc.n	191a <__udivsi3+0x8e>
    1916:	024b      	lsls	r3, r1, #9
    1918:	1ac0      	subs	r0, r0, r3
    191a:	4152      	adcs	r2, r2
    191c:	0a03      	lsrs	r3, r0, #8
    191e:	428b      	cmp	r3, r1
    1920:	d301      	bcc.n	1926 <__udivsi3+0x9a>
    1922:	020b      	lsls	r3, r1, #8
    1924:	1ac0      	subs	r0, r0, r3
    1926:	4152      	adcs	r2, r2
    1928:	d2cd      	bcs.n	18c6 <__udivsi3+0x3a>
    192a:	09c3      	lsrs	r3, r0, #7
    192c:	428b      	cmp	r3, r1
    192e:	d301      	bcc.n	1934 <__udivsi3+0xa8>
    1930:	01cb      	lsls	r3, r1, #7
    1932:	1ac0      	subs	r0, r0, r3
    1934:	4152      	adcs	r2, r2
    1936:	0983      	lsrs	r3, r0, #6
    1938:	428b      	cmp	r3, r1
    193a:	d301      	bcc.n	1940 <__udivsi3+0xb4>
    193c:	018b      	lsls	r3, r1, #6
    193e:	1ac0      	subs	r0, r0, r3
    1940:	4152      	adcs	r2, r2
    1942:	0943      	lsrs	r3, r0, #5
    1944:	428b      	cmp	r3, r1
    1946:	d301      	bcc.n	194c <__udivsi3+0xc0>
    1948:	014b      	lsls	r3, r1, #5
    194a:	1ac0      	subs	r0, r0, r3
    194c:	4152      	adcs	r2, r2
    194e:	0903      	lsrs	r3, r0, #4
    1950:	428b      	cmp	r3, r1
    1952:	d301      	bcc.n	1958 <__udivsi3+0xcc>
    1954:	010b      	lsls	r3, r1, #4
    1956:	1ac0      	subs	r0, r0, r3
    1958:	4152      	adcs	r2, r2
    195a:	08c3      	lsrs	r3, r0, #3
    195c:	428b      	cmp	r3, r1
    195e:	d301      	bcc.n	1964 <__udivsi3+0xd8>
    1960:	00cb      	lsls	r3, r1, #3
    1962:	1ac0      	subs	r0, r0, r3
    1964:	4152      	adcs	r2, r2
    1966:	0883      	lsrs	r3, r0, #2
    1968:	428b      	cmp	r3, r1
    196a:	d301      	bcc.n	1970 <__udivsi3+0xe4>
    196c:	008b      	lsls	r3, r1, #2
    196e:	1ac0      	subs	r0, r0, r3
    1970:	4152      	adcs	r2, r2
    1972:	0843      	lsrs	r3, r0, #1
    1974:	428b      	cmp	r3, r1
    1976:	d301      	bcc.n	197c <__udivsi3+0xf0>
    1978:	004b      	lsls	r3, r1, #1
    197a:	1ac0      	subs	r0, r0, r3
    197c:	4152      	adcs	r2, r2
    197e:	1a41      	subs	r1, r0, r1
    1980:	d200      	bcs.n	1984 <__udivsi3+0xf8>
    1982:	4601      	mov	r1, r0
    1984:	4152      	adcs	r2, r2
    1986:	4610      	mov	r0, r2
    1988:	4770      	bx	lr
    198a:	e7ff      	b.n	198c <__udivsi3+0x100>
    198c:	b501      	push	{r0, lr}
    198e:	2000      	movs	r0, #0
    1990:	f000 f806 	bl	19a0 <__aeabi_idiv0>
    1994:	bd02      	pop	{r1, pc}
    1996:	46c0      	nop			; (mov r8, r8)

00001998 <__aeabi_uidivmod>:
    1998:	2900      	cmp	r1, #0
    199a:	d0f7      	beq.n	198c <__udivsi3+0x100>
    199c:	e776      	b.n	188c <__udivsi3>
    199e:	4770      	bx	lr

000019a0 <__aeabi_idiv0>:
    19a0:	4770      	bx	lr
    19a2:	46c0      	nop			; (mov r8, r8)

000019a4 <__aeabi_uldivmod>:
    19a4:	2b00      	cmp	r3, #0
    19a6:	d111      	bne.n	19cc <__aeabi_uldivmod+0x28>
    19a8:	2a00      	cmp	r2, #0
    19aa:	d10f      	bne.n	19cc <__aeabi_uldivmod+0x28>
    19ac:	2900      	cmp	r1, #0
    19ae:	d100      	bne.n	19b2 <__aeabi_uldivmod+0xe>
    19b0:	2800      	cmp	r0, #0
    19b2:	d002      	beq.n	19ba <__aeabi_uldivmod+0x16>
    19b4:	2100      	movs	r1, #0
    19b6:	43c9      	mvns	r1, r1
    19b8:	1c08      	adds	r0, r1, #0
    19ba:	b407      	push	{r0, r1, r2}
    19bc:	4802      	ldr	r0, [pc, #8]	; (19c8 <__aeabi_uldivmod+0x24>)
    19be:	a102      	add	r1, pc, #8	; (adr r1, 19c8 <__aeabi_uldivmod+0x24>)
    19c0:	1840      	adds	r0, r0, r1
    19c2:	9002      	str	r0, [sp, #8]
    19c4:	bd03      	pop	{r0, r1, pc}
    19c6:	46c0      	nop			; (mov r8, r8)
    19c8:	ffffffd9 	.word	0xffffffd9
    19cc:	b403      	push	{r0, r1}
    19ce:	4668      	mov	r0, sp
    19d0:	b501      	push	{r0, lr}
    19d2:	9802      	ldr	r0, [sp, #8]
    19d4:	f000 f830 	bl	1a38 <__udivmoddi4>
    19d8:	9b01      	ldr	r3, [sp, #4]
    19da:	469e      	mov	lr, r3
    19dc:	b002      	add	sp, #8
    19de:	bc0c      	pop	{r2, r3}
    19e0:	4770      	bx	lr
    19e2:	46c0      	nop			; (mov r8, r8)

000019e4 <__aeabi_lmul>:
    19e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19e6:	46ce      	mov	lr, r9
    19e8:	4647      	mov	r7, r8
    19ea:	0415      	lsls	r5, r2, #16
    19ec:	0c2d      	lsrs	r5, r5, #16
    19ee:	002e      	movs	r6, r5
    19f0:	b580      	push	{r7, lr}
    19f2:	0407      	lsls	r7, r0, #16
    19f4:	0c14      	lsrs	r4, r2, #16
    19f6:	0c3f      	lsrs	r7, r7, #16
    19f8:	4699      	mov	r9, r3
    19fa:	0c03      	lsrs	r3, r0, #16
    19fc:	437e      	muls	r6, r7
    19fe:	435d      	muls	r5, r3
    1a00:	4367      	muls	r7, r4
    1a02:	4363      	muls	r3, r4
    1a04:	197f      	adds	r7, r7, r5
    1a06:	0c34      	lsrs	r4, r6, #16
    1a08:	19e4      	adds	r4, r4, r7
    1a0a:	469c      	mov	ip, r3
    1a0c:	42a5      	cmp	r5, r4
    1a0e:	d903      	bls.n	1a18 <__aeabi_lmul+0x34>
    1a10:	2380      	movs	r3, #128	; 0x80
    1a12:	025b      	lsls	r3, r3, #9
    1a14:	4698      	mov	r8, r3
    1a16:	44c4      	add	ip, r8
    1a18:	464b      	mov	r3, r9
    1a1a:	4351      	muls	r1, r2
    1a1c:	4343      	muls	r3, r0
    1a1e:	0436      	lsls	r6, r6, #16
    1a20:	0c36      	lsrs	r6, r6, #16
    1a22:	0c25      	lsrs	r5, r4, #16
    1a24:	0424      	lsls	r4, r4, #16
    1a26:	4465      	add	r5, ip
    1a28:	19a4      	adds	r4, r4, r6
    1a2a:	1859      	adds	r1, r3, r1
    1a2c:	1949      	adds	r1, r1, r5
    1a2e:	0020      	movs	r0, r4
    1a30:	bc0c      	pop	{r2, r3}
    1a32:	4690      	mov	r8, r2
    1a34:	4699      	mov	r9, r3
    1a36:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001a38 <__udivmoddi4>:
    1a38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a3a:	4657      	mov	r7, sl
    1a3c:	464e      	mov	r6, r9
    1a3e:	4645      	mov	r5, r8
    1a40:	46de      	mov	lr, fp
    1a42:	b5e0      	push	{r5, r6, r7, lr}
    1a44:	0004      	movs	r4, r0
    1a46:	b083      	sub	sp, #12
    1a48:	000d      	movs	r5, r1
    1a4a:	4692      	mov	sl, r2
    1a4c:	4699      	mov	r9, r3
    1a4e:	428b      	cmp	r3, r1
    1a50:	d82f      	bhi.n	1ab2 <__udivmoddi4+0x7a>
    1a52:	d02c      	beq.n	1aae <__udivmoddi4+0x76>
    1a54:	4649      	mov	r1, r9
    1a56:	4650      	mov	r0, sl
    1a58:	f000 f8cc 	bl	1bf4 <__clzdi2>
    1a5c:	0029      	movs	r1, r5
    1a5e:	0006      	movs	r6, r0
    1a60:	0020      	movs	r0, r4
    1a62:	f000 f8c7 	bl	1bf4 <__clzdi2>
    1a66:	1a33      	subs	r3, r6, r0
    1a68:	4698      	mov	r8, r3
    1a6a:	3b20      	subs	r3, #32
    1a6c:	469b      	mov	fp, r3
    1a6e:	d500      	bpl.n	1a72 <__udivmoddi4+0x3a>
    1a70:	e074      	b.n	1b5c <__udivmoddi4+0x124>
    1a72:	4653      	mov	r3, sl
    1a74:	465a      	mov	r2, fp
    1a76:	4093      	lsls	r3, r2
    1a78:	001f      	movs	r7, r3
    1a7a:	4653      	mov	r3, sl
    1a7c:	4642      	mov	r2, r8
    1a7e:	4093      	lsls	r3, r2
    1a80:	001e      	movs	r6, r3
    1a82:	42af      	cmp	r7, r5
    1a84:	d829      	bhi.n	1ada <__udivmoddi4+0xa2>
    1a86:	d026      	beq.n	1ad6 <__udivmoddi4+0x9e>
    1a88:	465b      	mov	r3, fp
    1a8a:	1ba4      	subs	r4, r4, r6
    1a8c:	41bd      	sbcs	r5, r7
    1a8e:	2b00      	cmp	r3, #0
    1a90:	da00      	bge.n	1a94 <__udivmoddi4+0x5c>
    1a92:	e079      	b.n	1b88 <__udivmoddi4+0x150>
    1a94:	2200      	movs	r2, #0
    1a96:	2300      	movs	r3, #0
    1a98:	9200      	str	r2, [sp, #0]
    1a9a:	9301      	str	r3, [sp, #4]
    1a9c:	2301      	movs	r3, #1
    1a9e:	465a      	mov	r2, fp
    1aa0:	4093      	lsls	r3, r2
    1aa2:	9301      	str	r3, [sp, #4]
    1aa4:	2301      	movs	r3, #1
    1aa6:	4642      	mov	r2, r8
    1aa8:	4093      	lsls	r3, r2
    1aaa:	9300      	str	r3, [sp, #0]
    1aac:	e019      	b.n	1ae2 <__udivmoddi4+0xaa>
    1aae:	4282      	cmp	r2, r0
    1ab0:	d9d0      	bls.n	1a54 <__udivmoddi4+0x1c>
    1ab2:	2200      	movs	r2, #0
    1ab4:	2300      	movs	r3, #0
    1ab6:	9200      	str	r2, [sp, #0]
    1ab8:	9301      	str	r3, [sp, #4]
    1aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1abc:	2b00      	cmp	r3, #0
    1abe:	d001      	beq.n	1ac4 <__udivmoddi4+0x8c>
    1ac0:	601c      	str	r4, [r3, #0]
    1ac2:	605d      	str	r5, [r3, #4]
    1ac4:	9800      	ldr	r0, [sp, #0]
    1ac6:	9901      	ldr	r1, [sp, #4]
    1ac8:	b003      	add	sp, #12
    1aca:	bc3c      	pop	{r2, r3, r4, r5}
    1acc:	4690      	mov	r8, r2
    1ace:	4699      	mov	r9, r3
    1ad0:	46a2      	mov	sl, r4
    1ad2:	46ab      	mov	fp, r5
    1ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ad6:	42a3      	cmp	r3, r4
    1ad8:	d9d6      	bls.n	1a88 <__udivmoddi4+0x50>
    1ada:	2200      	movs	r2, #0
    1adc:	2300      	movs	r3, #0
    1ade:	9200      	str	r2, [sp, #0]
    1ae0:	9301      	str	r3, [sp, #4]
    1ae2:	4643      	mov	r3, r8
    1ae4:	2b00      	cmp	r3, #0
    1ae6:	d0e8      	beq.n	1aba <__udivmoddi4+0x82>
    1ae8:	07fb      	lsls	r3, r7, #31
    1aea:	0872      	lsrs	r2, r6, #1
    1aec:	431a      	orrs	r2, r3
    1aee:	4646      	mov	r6, r8
    1af0:	087b      	lsrs	r3, r7, #1
    1af2:	e00e      	b.n	1b12 <__udivmoddi4+0xda>
    1af4:	42ab      	cmp	r3, r5
    1af6:	d101      	bne.n	1afc <__udivmoddi4+0xc4>
    1af8:	42a2      	cmp	r2, r4
    1afa:	d80c      	bhi.n	1b16 <__udivmoddi4+0xde>
    1afc:	1aa4      	subs	r4, r4, r2
    1afe:	419d      	sbcs	r5, r3
    1b00:	2001      	movs	r0, #1
    1b02:	1924      	adds	r4, r4, r4
    1b04:	416d      	adcs	r5, r5
    1b06:	2100      	movs	r1, #0
    1b08:	3e01      	subs	r6, #1
    1b0a:	1824      	adds	r4, r4, r0
    1b0c:	414d      	adcs	r5, r1
    1b0e:	2e00      	cmp	r6, #0
    1b10:	d006      	beq.n	1b20 <__udivmoddi4+0xe8>
    1b12:	42ab      	cmp	r3, r5
    1b14:	d9ee      	bls.n	1af4 <__udivmoddi4+0xbc>
    1b16:	3e01      	subs	r6, #1
    1b18:	1924      	adds	r4, r4, r4
    1b1a:	416d      	adcs	r5, r5
    1b1c:	2e00      	cmp	r6, #0
    1b1e:	d1f8      	bne.n	1b12 <__udivmoddi4+0xda>
    1b20:	465b      	mov	r3, fp
    1b22:	9800      	ldr	r0, [sp, #0]
    1b24:	9901      	ldr	r1, [sp, #4]
    1b26:	1900      	adds	r0, r0, r4
    1b28:	4169      	adcs	r1, r5
    1b2a:	2b00      	cmp	r3, #0
    1b2c:	db22      	blt.n	1b74 <__udivmoddi4+0x13c>
    1b2e:	002b      	movs	r3, r5
    1b30:	465a      	mov	r2, fp
    1b32:	40d3      	lsrs	r3, r2
    1b34:	002a      	movs	r2, r5
    1b36:	4644      	mov	r4, r8
    1b38:	40e2      	lsrs	r2, r4
    1b3a:	001c      	movs	r4, r3
    1b3c:	465b      	mov	r3, fp
    1b3e:	0015      	movs	r5, r2
    1b40:	2b00      	cmp	r3, #0
    1b42:	db2c      	blt.n	1b9e <__udivmoddi4+0x166>
    1b44:	0026      	movs	r6, r4
    1b46:	409e      	lsls	r6, r3
    1b48:	0033      	movs	r3, r6
    1b4a:	0026      	movs	r6, r4
    1b4c:	4647      	mov	r7, r8
    1b4e:	40be      	lsls	r6, r7
    1b50:	0032      	movs	r2, r6
    1b52:	1a80      	subs	r0, r0, r2
    1b54:	4199      	sbcs	r1, r3
    1b56:	9000      	str	r0, [sp, #0]
    1b58:	9101      	str	r1, [sp, #4]
    1b5a:	e7ae      	b.n	1aba <__udivmoddi4+0x82>
    1b5c:	4642      	mov	r2, r8
    1b5e:	2320      	movs	r3, #32
    1b60:	1a9b      	subs	r3, r3, r2
    1b62:	4652      	mov	r2, sl
    1b64:	40da      	lsrs	r2, r3
    1b66:	4641      	mov	r1, r8
    1b68:	0013      	movs	r3, r2
    1b6a:	464a      	mov	r2, r9
    1b6c:	408a      	lsls	r2, r1
    1b6e:	0017      	movs	r7, r2
    1b70:	431f      	orrs	r7, r3
    1b72:	e782      	b.n	1a7a <__udivmoddi4+0x42>
    1b74:	4642      	mov	r2, r8
    1b76:	2320      	movs	r3, #32
    1b78:	1a9b      	subs	r3, r3, r2
    1b7a:	002a      	movs	r2, r5
    1b7c:	4646      	mov	r6, r8
    1b7e:	409a      	lsls	r2, r3
    1b80:	0023      	movs	r3, r4
    1b82:	40f3      	lsrs	r3, r6
    1b84:	4313      	orrs	r3, r2
    1b86:	e7d5      	b.n	1b34 <__udivmoddi4+0xfc>
    1b88:	4642      	mov	r2, r8
    1b8a:	2320      	movs	r3, #32
    1b8c:	2100      	movs	r1, #0
    1b8e:	1a9b      	subs	r3, r3, r2
    1b90:	2200      	movs	r2, #0
    1b92:	9100      	str	r1, [sp, #0]
    1b94:	9201      	str	r2, [sp, #4]
    1b96:	2201      	movs	r2, #1
    1b98:	40da      	lsrs	r2, r3
    1b9a:	9201      	str	r2, [sp, #4]
    1b9c:	e782      	b.n	1aa4 <__udivmoddi4+0x6c>
    1b9e:	4642      	mov	r2, r8
    1ba0:	2320      	movs	r3, #32
    1ba2:	0026      	movs	r6, r4
    1ba4:	1a9b      	subs	r3, r3, r2
    1ba6:	40de      	lsrs	r6, r3
    1ba8:	002f      	movs	r7, r5
    1baa:	46b4      	mov	ip, r6
    1bac:	4097      	lsls	r7, r2
    1bae:	4666      	mov	r6, ip
    1bb0:	003b      	movs	r3, r7
    1bb2:	4333      	orrs	r3, r6
    1bb4:	e7c9      	b.n	1b4a <__udivmoddi4+0x112>
    1bb6:	46c0      	nop			; (mov r8, r8)

00001bb8 <__clzsi2>:
    1bb8:	211c      	movs	r1, #28
    1bba:	2301      	movs	r3, #1
    1bbc:	041b      	lsls	r3, r3, #16
    1bbe:	4298      	cmp	r0, r3
    1bc0:	d301      	bcc.n	1bc6 <__clzsi2+0xe>
    1bc2:	0c00      	lsrs	r0, r0, #16
    1bc4:	3910      	subs	r1, #16
    1bc6:	0a1b      	lsrs	r3, r3, #8
    1bc8:	4298      	cmp	r0, r3
    1bca:	d301      	bcc.n	1bd0 <__clzsi2+0x18>
    1bcc:	0a00      	lsrs	r0, r0, #8
    1bce:	3908      	subs	r1, #8
    1bd0:	091b      	lsrs	r3, r3, #4
    1bd2:	4298      	cmp	r0, r3
    1bd4:	d301      	bcc.n	1bda <__clzsi2+0x22>
    1bd6:	0900      	lsrs	r0, r0, #4
    1bd8:	3904      	subs	r1, #4
    1bda:	a202      	add	r2, pc, #8	; (adr r2, 1be4 <__clzsi2+0x2c>)
    1bdc:	5c10      	ldrb	r0, [r2, r0]
    1bde:	1840      	adds	r0, r0, r1
    1be0:	4770      	bx	lr
    1be2:	46c0      	nop			; (mov r8, r8)
    1be4:	02020304 	.word	0x02020304
    1be8:	01010101 	.word	0x01010101
	...

00001bf4 <__clzdi2>:
    1bf4:	b510      	push	{r4, lr}
    1bf6:	2900      	cmp	r1, #0
    1bf8:	d103      	bne.n	1c02 <__clzdi2+0xe>
    1bfa:	f7ff ffdd 	bl	1bb8 <__clzsi2>
    1bfe:	3020      	adds	r0, #32
    1c00:	e002      	b.n	1c08 <__clzdi2+0x14>
    1c02:	1c08      	adds	r0, r1, #0
    1c04:	f7ff ffd8 	bl	1bb8 <__clzsi2>
    1c08:	bd10      	pop	{r4, pc}
    1c0a:	46c0      	nop			; (mov r8, r8)

00001c0c <__libc_init_array>:
    1c0c:	b570      	push	{r4, r5, r6, lr}
    1c0e:	2600      	movs	r6, #0
    1c10:	4d0c      	ldr	r5, [pc, #48]	; (1c44 <__libc_init_array+0x38>)
    1c12:	4c0d      	ldr	r4, [pc, #52]	; (1c48 <__libc_init_array+0x3c>)
    1c14:	1b64      	subs	r4, r4, r5
    1c16:	10a4      	asrs	r4, r4, #2
    1c18:	42a6      	cmp	r6, r4
    1c1a:	d109      	bne.n	1c30 <__libc_init_array+0x24>
    1c1c:	2600      	movs	r6, #0
    1c1e:	f000 f8dd 	bl	1ddc <_init>
    1c22:	4d0a      	ldr	r5, [pc, #40]	; (1c4c <__libc_init_array+0x40>)
    1c24:	4c0a      	ldr	r4, [pc, #40]	; (1c50 <__libc_init_array+0x44>)
    1c26:	1b64      	subs	r4, r4, r5
    1c28:	10a4      	asrs	r4, r4, #2
    1c2a:	42a6      	cmp	r6, r4
    1c2c:	d105      	bne.n	1c3a <__libc_init_array+0x2e>
    1c2e:	bd70      	pop	{r4, r5, r6, pc}
    1c30:	00b3      	lsls	r3, r6, #2
    1c32:	58eb      	ldr	r3, [r5, r3]
    1c34:	4798      	blx	r3
    1c36:	3601      	adds	r6, #1
    1c38:	e7ee      	b.n	1c18 <__libc_init_array+0xc>
    1c3a:	00b3      	lsls	r3, r6, #2
    1c3c:	58eb      	ldr	r3, [r5, r3]
    1c3e:	4798      	blx	r3
    1c40:	3601      	adds	r6, #1
    1c42:	e7f2      	b.n	1c2a <__libc_init_array+0x1e>
    1c44:	00001de8 	.word	0x00001de8
    1c48:	00001de8 	.word	0x00001de8
    1c4c:	00001de8 	.word	0x00001de8
    1c50:	00001dec 	.word	0x00001dec

00001c54 <malloc>:
    1c54:	b510      	push	{r4, lr}
    1c56:	4b03      	ldr	r3, [pc, #12]	; (1c64 <malloc+0x10>)
    1c58:	0001      	movs	r1, r0
    1c5a:	6818      	ldr	r0, [r3, #0]
    1c5c:	f000 f804 	bl	1c68 <_malloc_r>
    1c60:	bd10      	pop	{r4, pc}
    1c62:	46c0      	nop			; (mov r8, r8)
    1c64:	20000010 	.word	0x20000010

00001c68 <_malloc_r>:
    1c68:	2303      	movs	r3, #3
    1c6a:	b570      	push	{r4, r5, r6, lr}
    1c6c:	1ccd      	adds	r5, r1, #3
    1c6e:	439d      	bics	r5, r3
    1c70:	3508      	adds	r5, #8
    1c72:	0006      	movs	r6, r0
    1c74:	2d0c      	cmp	r5, #12
    1c76:	d21e      	bcs.n	1cb6 <_malloc_r+0x4e>
    1c78:	250c      	movs	r5, #12
    1c7a:	42a9      	cmp	r1, r5
    1c7c:	d81d      	bhi.n	1cba <_malloc_r+0x52>
    1c7e:	0030      	movs	r0, r6
    1c80:	f000 f869 	bl	1d56 <__malloc_lock>
    1c84:	4a25      	ldr	r2, [pc, #148]	; (1d1c <_malloc_r+0xb4>)
    1c86:	6814      	ldr	r4, [r2, #0]
    1c88:	0021      	movs	r1, r4
    1c8a:	2900      	cmp	r1, #0
    1c8c:	d119      	bne.n	1cc2 <_malloc_r+0x5a>
    1c8e:	4c24      	ldr	r4, [pc, #144]	; (1d20 <_malloc_r+0xb8>)
    1c90:	6823      	ldr	r3, [r4, #0]
    1c92:	2b00      	cmp	r3, #0
    1c94:	d103      	bne.n	1c9e <_malloc_r+0x36>
    1c96:	0030      	movs	r0, r6
    1c98:	f000 f844 	bl	1d24 <_sbrk_r>
    1c9c:	6020      	str	r0, [r4, #0]
    1c9e:	0029      	movs	r1, r5
    1ca0:	0030      	movs	r0, r6
    1ca2:	f000 f83f 	bl	1d24 <_sbrk_r>
    1ca6:	1c43      	adds	r3, r0, #1
    1ca8:	d12c      	bne.n	1d04 <_malloc_r+0x9c>
    1caa:	230c      	movs	r3, #12
    1cac:	0030      	movs	r0, r6
    1cae:	6033      	str	r3, [r6, #0]
    1cb0:	f000 f852 	bl	1d58 <__malloc_unlock>
    1cb4:	e003      	b.n	1cbe <_malloc_r+0x56>
    1cb6:	2d00      	cmp	r5, #0
    1cb8:	dadf      	bge.n	1c7a <_malloc_r+0x12>
    1cba:	230c      	movs	r3, #12
    1cbc:	6033      	str	r3, [r6, #0]
    1cbe:	2000      	movs	r0, #0
    1cc0:	bd70      	pop	{r4, r5, r6, pc}
    1cc2:	680b      	ldr	r3, [r1, #0]
    1cc4:	1b5b      	subs	r3, r3, r5
    1cc6:	d41a      	bmi.n	1cfe <_malloc_r+0x96>
    1cc8:	2b0b      	cmp	r3, #11
    1cca:	d903      	bls.n	1cd4 <_malloc_r+0x6c>
    1ccc:	600b      	str	r3, [r1, #0]
    1cce:	18cc      	adds	r4, r1, r3
    1cd0:	6025      	str	r5, [r4, #0]
    1cd2:	e003      	b.n	1cdc <_malloc_r+0x74>
    1cd4:	428c      	cmp	r4, r1
    1cd6:	d10e      	bne.n	1cf6 <_malloc_r+0x8e>
    1cd8:	6863      	ldr	r3, [r4, #4]
    1cda:	6013      	str	r3, [r2, #0]
    1cdc:	0030      	movs	r0, r6
    1cde:	f000 f83b 	bl	1d58 <__malloc_unlock>
    1ce2:	0020      	movs	r0, r4
    1ce4:	2207      	movs	r2, #7
    1ce6:	300b      	adds	r0, #11
    1ce8:	1d23      	adds	r3, r4, #4
    1cea:	4390      	bics	r0, r2
    1cec:	1ac3      	subs	r3, r0, r3
    1cee:	d0e7      	beq.n	1cc0 <_malloc_r+0x58>
    1cf0:	425a      	negs	r2, r3
    1cf2:	50e2      	str	r2, [r4, r3]
    1cf4:	e7e4      	b.n	1cc0 <_malloc_r+0x58>
    1cf6:	684b      	ldr	r3, [r1, #4]
    1cf8:	6063      	str	r3, [r4, #4]
    1cfa:	000c      	movs	r4, r1
    1cfc:	e7ee      	b.n	1cdc <_malloc_r+0x74>
    1cfe:	000c      	movs	r4, r1
    1d00:	6849      	ldr	r1, [r1, #4]
    1d02:	e7c2      	b.n	1c8a <_malloc_r+0x22>
    1d04:	2303      	movs	r3, #3
    1d06:	1cc4      	adds	r4, r0, #3
    1d08:	439c      	bics	r4, r3
    1d0a:	42a0      	cmp	r0, r4
    1d0c:	d0e0      	beq.n	1cd0 <_malloc_r+0x68>
    1d0e:	1a21      	subs	r1, r4, r0
    1d10:	0030      	movs	r0, r6
    1d12:	f000 f807 	bl	1d24 <_sbrk_r>
    1d16:	1c43      	adds	r3, r0, #1
    1d18:	d1da      	bne.n	1cd0 <_malloc_r+0x68>
    1d1a:	e7c6      	b.n	1caa <_malloc_r+0x42>
    1d1c:	200000d0 	.word	0x200000d0
    1d20:	200000d4 	.word	0x200000d4

00001d24 <_sbrk_r>:
    1d24:	2300      	movs	r3, #0
    1d26:	b570      	push	{r4, r5, r6, lr}
    1d28:	4c06      	ldr	r4, [pc, #24]	; (1d44 <_sbrk_r+0x20>)
    1d2a:	0005      	movs	r5, r0
    1d2c:	0008      	movs	r0, r1
    1d2e:	6023      	str	r3, [r4, #0]
    1d30:	f7ff fd30 	bl	1794 <_sbrk>
    1d34:	1c43      	adds	r3, r0, #1
    1d36:	d103      	bne.n	1d40 <_sbrk_r+0x1c>
    1d38:	6823      	ldr	r3, [r4, #0]
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d000      	beq.n	1d40 <_sbrk_r+0x1c>
    1d3e:	602b      	str	r3, [r5, #0]
    1d40:	bd70      	pop	{r4, r5, r6, pc}
    1d42:	46c0      	nop			; (mov r8, r8)
    1d44:	20000534 	.word	0x20000534

00001d48 <strlen>:
    1d48:	2300      	movs	r3, #0
    1d4a:	5cc2      	ldrb	r2, [r0, r3]
    1d4c:	3301      	adds	r3, #1
    1d4e:	2a00      	cmp	r2, #0
    1d50:	d1fb      	bne.n	1d4a <strlen+0x2>
    1d52:	1e58      	subs	r0, r3, #1
    1d54:	4770      	bx	lr

00001d56 <__malloc_lock>:
    1d56:	4770      	bx	lr

00001d58 <__malloc_unlock>:
    1d58:	4770      	bx	lr
    1d5a:	0000      	movs	r0, r0
    1d5c:	42000800 	.word	0x42000800
    1d60:	42000c00 	.word	0x42000c00
    1d64:	42001000 	.word	0x42001000
    1d68:	42001400 	.word	0x42001400
    1d6c:	42001800 	.word	0x42001800
    1d70:	42001c00 	.word	0x42001c00
    1d74:	00000f1e 	.word	0x00000f1e
    1d78:	00000f1a 	.word	0x00000f1a
    1d7c:	00000f1a 	.word	0x00000f1a
    1d80:	00000f80 	.word	0x00000f80
    1d84:	00000f80 	.word	0x00000f80
    1d88:	00000f32 	.word	0x00000f32
    1d8c:	00000f24 	.word	0x00000f24
    1d90:	00000f38 	.word	0x00000f38
    1d94:	00000f6e 	.word	0x00000f6e
    1d98:	00001140 	.word	0x00001140
    1d9c:	00001120 	.word	0x00001120
    1da0:	00001120 	.word	0x00001120
    1da4:	000011ac 	.word	0x000011ac
    1da8:	00001132 	.word	0x00001132
    1dac:	0000114e 	.word	0x0000114e
    1db0:	00001124 	.word	0x00001124
    1db4:	0000115c 	.word	0x0000115c
    1db8:	0000119c 	.word	0x0000119c
    1dbc:	35455345 	.word	0x35455345
    1dc0:	2d203631 	.word	0x2d203631
    1dc4:	494c4320 	.word	0x494c4320
    1dc8:	646e6120 	.word	0x646e6120
    1dcc:	62654420 	.word	0x62654420
    1dd0:	4c206775 	.word	0x4c206775
    1dd4:	6567676f 	.word	0x6567676f
    1dd8:	000a0d72 	.word	0x000a0d72

00001ddc <_init>:
    1ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1de2:	bc08      	pop	{r3}
    1de4:	469e      	mov	lr, r3
    1de6:	4770      	bx	lr

00001de8 <__init_array_start>:
    1de8:	000000dd 	.word	0x000000dd

00001dec <_fini>:
    1dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dee:	46c0      	nop			; (mov r8, r8)
    1df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1df2:	bc08      	pop	{r3}
    1df4:	469e      	mov	lr, r3
    1df6:	4770      	bx	lr

00001df8 <__fini_array_start>:
    1df8:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <g_interrupt_enabled>:
2000000c:	0001 0000                                   ....

20000010 <_impure_ptr>:
20000010:	0014 2000                                   ... 

20000014 <impure_data>:
	...

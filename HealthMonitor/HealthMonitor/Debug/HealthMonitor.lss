
HealthMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f68  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00000f68  00000f68  00010f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000010  20000000  00000f70  00020000  2**1
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000003c  20000010  00000f80  00020010  2**2
                  ALLOC
  4 .stack        00002004  2000004c  00000fbc  00020010  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  7 .debug_info   00011b99  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002158  00000000  00000000  00031c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001b67  00000000  00000000  00033d82  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000280  00000000  00000000  000358e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  00035b69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00018245  00000000  00000000  00035d41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007b90  00000000  00000000  0004df86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00087a07  00000000  00000000  00055b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000005c4  00000000  00000000  000dd520  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	50 20 00 20 95 09 00 00 91 09 00 00 91 09 00 00     P . ............
	...
  2c:	91 09 00 00 00 00 00 00 00 00 00 00 91 09 00 00     ................
  3c:	91 09 00 00 91 09 00 00 91 09 00 00 91 09 00 00     ................
  4c:	91 09 00 00 91 09 00 00 91 09 00 00 91 09 00 00     ................
  5c:	91 09 00 00 91 09 00 00 91 09 00 00 91 09 00 00     ................
  6c:	91 09 00 00 91 09 00 00 91 09 00 00 91 09 00 00     ................
  7c:	91 09 00 00 91 09 00 00 91 09 00 00 91 09 00 00     ................
  8c:	91 09 00 00 91 09 00 00 00 00 00 00 00 00 00 00     ................
  9c:	91 09 00 00 91 09 00 00 91 09 00 00 91 09 00 00     ................
  ac:	91 09 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000010 	.word	0x20000010
  d4:	00000000 	.word	0x00000000
  d8:	00000f70 	.word	0x00000f70

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000014 	.word	0x20000014
 108:	00000f70 	.word	0x00000f70
 10c:	00000f70 	.word	0x00000f70
 110:	00000000 	.word	0x00000000

00000114 <Sensor_Initialize>:
* @param[in]	N/A
* @param[out]	N/A
* @return		Return 0, code shouldn't ideally exit this function
* @note         
*****************************************************************************/
bool Sensor_Initialize(void) {
 114:	b510      	push	{r4, lr}
	/* Buzzer Initialize */
	Buzzer_Initialize();	
 116:	4b02      	ldr	r3, [pc, #8]	; (120 <Sensor_Initialize+0xc>)
 118:	4798      	blx	r3
	return true;
 11a:	2001      	movs	r0, #1
 11c:	bd10      	pop	{r4, pc}
 11e:	46c0      	nop			; (mov r8, r8)
 120:	00000a79 	.word	0x00000a79

00000124 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 124:	4b0c      	ldr	r3, [pc, #48]	; (158 <cpu_irq_enter_critical+0x34>)
 126:	681b      	ldr	r3, [r3, #0]
 128:	2b00      	cmp	r3, #0
 12a:	d106      	bne.n	13a <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 12c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 130:	2b00      	cmp	r3, #0
 132:	d007      	beq.n	144 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 134:	2200      	movs	r2, #0
 136:	4b09      	ldr	r3, [pc, #36]	; (15c <cpu_irq_enter_critical+0x38>)
 138:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 13a:	4a07      	ldr	r2, [pc, #28]	; (158 <cpu_irq_enter_critical+0x34>)
 13c:	6813      	ldr	r3, [r2, #0]
 13e:	3301      	adds	r3, #1
 140:	6013      	str	r3, [r2, #0]
}
 142:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 144:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 146:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 14a:	2200      	movs	r2, #0
 14c:	4b04      	ldr	r3, [pc, #16]	; (160 <cpu_irq_enter_critical+0x3c>)
 14e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 150:	3201      	adds	r2, #1
 152:	4b02      	ldr	r3, [pc, #8]	; (15c <cpu_irq_enter_critical+0x38>)
 154:	701a      	strb	r2, [r3, #0]
 156:	e7f0      	b.n	13a <cpu_irq_enter_critical+0x16>
 158:	2000002c 	.word	0x2000002c
 15c:	20000030 	.word	0x20000030
 160:	2000000c 	.word	0x2000000c

00000164 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 164:	4b08      	ldr	r3, [pc, #32]	; (188 <cpu_irq_leave_critical+0x24>)
 166:	681a      	ldr	r2, [r3, #0]
 168:	3a01      	subs	r2, #1
 16a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 16c:	681b      	ldr	r3, [r3, #0]
 16e:	2b00      	cmp	r3, #0
 170:	d109      	bne.n	186 <cpu_irq_leave_critical+0x22>
 172:	4b06      	ldr	r3, [pc, #24]	; (18c <cpu_irq_leave_critical+0x28>)
 174:	781b      	ldrb	r3, [r3, #0]
 176:	2b00      	cmp	r3, #0
 178:	d005      	beq.n	186 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 17a:	2201      	movs	r2, #1
 17c:	4b04      	ldr	r3, [pc, #16]	; (190 <cpu_irq_leave_critical+0x2c>)
 17e:	701a      	strb	r2, [r3, #0]
 180:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 184:	b662      	cpsie	i
	}
}
 186:	4770      	bx	lr
 188:	2000002c 	.word	0x2000002c
 18c:	20000030 	.word	0x20000030
 190:	2000000c 	.word	0x2000000c

00000194 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
 194:	b5f0      	push	{r4, r5, r6, r7, lr}
 196:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 198:	ac01      	add	r4, sp, #4
 19a:	2501      	movs	r5, #1
 19c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
 19e:	2700      	movs	r7, #0
 1a0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 1a2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
 1a4:	0021      	movs	r1, r4
 1a6:	2017      	movs	r0, #23
 1a8:	4e06      	ldr	r6, [pc, #24]	; (1c4 <system_board_init+0x30>)
 1aa:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 1ac:	2280      	movs	r2, #128	; 0x80
 1ae:	0412      	lsls	r2, r2, #16
 1b0:	4b05      	ldr	r3, [pc, #20]	; (1c8 <system_board_init+0x34>)
 1b2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
 1b4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
 1b6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 1b8:	0021      	movs	r1, r4
 1ba:	2037      	movs	r0, #55	; 0x37
 1bc:	47b0      	blx	r6
}
 1be:	b003      	add	sp, #12
 1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1c2:	46c0      	nop			; (mov r8, r8)
 1c4:	000001cd 	.word	0x000001cd
 1c8:	41004400 	.word	0x41004400

000001cc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 1cc:	b500      	push	{lr}
 1ce:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
 1d0:	ab01      	add	r3, sp, #4
 1d2:	2280      	movs	r2, #128	; 0x80
 1d4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 1d6:	780a      	ldrb	r2, [r1, #0]
 1d8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 1da:	784a      	ldrb	r2, [r1, #1]
 1dc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 1de:	788a      	ldrb	r2, [r1, #2]
 1e0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 1e2:	0019      	movs	r1, r3
 1e4:	4b01      	ldr	r3, [pc, #4]	; (1ec <port_pin_set_config+0x20>)
 1e6:	4798      	blx	r3
}
 1e8:	b003      	add	sp, #12
 1ea:	bd00      	pop	{pc}
 1ec:	00000931 	.word	0x00000931

000001f0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
 1f0:	b510      	push	{r4, lr}
	switch (clock_source) {
 1f2:	2808      	cmp	r0, #8
 1f4:	d803      	bhi.n	1fe <system_clock_source_get_hz+0xe>
 1f6:	0080      	lsls	r0, r0, #2
 1f8:	4b1c      	ldr	r3, [pc, #112]	; (26c <system_clock_source_get_hz+0x7c>)
 1fa:	581b      	ldr	r3, [r3, r0]
 1fc:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
 1fe:	2000      	movs	r0, #0
 200:	e032      	b.n	268 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
 202:	4b1b      	ldr	r3, [pc, #108]	; (270 <system_clock_source_get_hz+0x80>)
 204:	6918      	ldr	r0, [r3, #16]
 206:	e02f      	b.n	268 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
 208:	4b1a      	ldr	r3, [pc, #104]	; (274 <system_clock_source_get_hz+0x84>)
 20a:	6a1b      	ldr	r3, [r3, #32]
 20c:	059b      	lsls	r3, r3, #22
 20e:	0f9b      	lsrs	r3, r3, #30
 210:	4819      	ldr	r0, [pc, #100]	; (278 <system_clock_source_get_hz+0x88>)
 212:	40d8      	lsrs	r0, r3
 214:	e028      	b.n	268 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
 216:	4b16      	ldr	r3, [pc, #88]	; (270 <system_clock_source_get_hz+0x80>)
 218:	6958      	ldr	r0, [r3, #20]
 21a:	e025      	b.n	268 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
 21c:	4b14      	ldr	r3, [pc, #80]	; (270 <system_clock_source_get_hz+0x80>)
 21e:	681b      	ldr	r3, [r3, #0]
			return 0;
 220:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
 222:	079b      	lsls	r3, r3, #30
 224:	d520      	bpl.n	268 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 226:	4913      	ldr	r1, [pc, #76]	; (274 <system_clock_source_get_hz+0x84>)
 228:	2210      	movs	r2, #16
 22a:	68cb      	ldr	r3, [r1, #12]
 22c:	421a      	tst	r2, r3
 22e:	d0fc      	beq.n	22a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
 230:	4b0f      	ldr	r3, [pc, #60]	; (270 <system_clock_source_get_hz+0x80>)
 232:	681a      	ldr	r2, [r3, #0]
 234:	2324      	movs	r3, #36	; 0x24
 236:	4013      	ands	r3, r2
 238:	2b04      	cmp	r3, #4
 23a:	d001      	beq.n	240 <system_clock_source_get_hz+0x50>
			return 48000000UL;
 23c:	480f      	ldr	r0, [pc, #60]	; (27c <system_clock_source_get_hz+0x8c>)
 23e:	e013      	b.n	268 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
 240:	2000      	movs	r0, #0
 242:	4b0f      	ldr	r3, [pc, #60]	; (280 <system_clock_source_get_hz+0x90>)
 244:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
 246:	4b0a      	ldr	r3, [pc, #40]	; (270 <system_clock_source_get_hz+0x80>)
 248:	689b      	ldr	r3, [r3, #8]
 24a:	041b      	lsls	r3, r3, #16
 24c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
 24e:	4358      	muls	r0, r3
 250:	e00a      	b.n	268 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
 252:	2350      	movs	r3, #80	; 0x50
 254:	4a07      	ldr	r2, [pc, #28]	; (274 <system_clock_source_get_hz+0x84>)
 256:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
 258:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
 25a:	075b      	lsls	r3, r3, #29
 25c:	d504      	bpl.n	268 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
 25e:	4b04      	ldr	r3, [pc, #16]	; (270 <system_clock_source_get_hz+0x80>)
 260:	68d8      	ldr	r0, [r3, #12]
 262:	e001      	b.n	268 <system_clock_source_get_hz+0x78>
		return 32768UL;
 264:	2080      	movs	r0, #128	; 0x80
 266:	0200      	lsls	r0, r0, #8
	}
}
 268:	bd10      	pop	{r4, pc}
 26a:	46c0      	nop			; (mov r8, r8)
 26c:	00000f00 	.word	0x00000f00
 270:	20000034 	.word	0x20000034
 274:	40000800 	.word	0x40000800
 278:	007a1200 	.word	0x007a1200
 27c:	02dc6c00 	.word	0x02dc6c00
 280:	00000855 	.word	0x00000855

00000284 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 284:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 286:	490c      	ldr	r1, [pc, #48]	; (2b8 <system_clock_source_osc8m_set_config+0x34>)
 288:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 28a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 28c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 28e:	7840      	ldrb	r0, [r0, #1]
 290:	2201      	movs	r2, #1
 292:	4010      	ands	r0, r2
 294:	0180      	lsls	r0, r0, #6
 296:	2640      	movs	r6, #64	; 0x40
 298:	43b3      	bics	r3, r6
 29a:	4303      	orrs	r3, r0
 29c:	402a      	ands	r2, r5
 29e:	01d2      	lsls	r2, r2, #7
 2a0:	2080      	movs	r0, #128	; 0x80
 2a2:	4383      	bics	r3, r0
 2a4:	4313      	orrs	r3, r2
 2a6:	2203      	movs	r2, #3
 2a8:	4022      	ands	r2, r4
 2aa:	0212      	lsls	r2, r2, #8
 2ac:	4803      	ldr	r0, [pc, #12]	; (2bc <system_clock_source_osc8m_set_config+0x38>)
 2ae:	4003      	ands	r3, r0
 2b0:	4313      	orrs	r3, r2
 2b2:	620b      	str	r3, [r1, #32]
}
 2b4:	bd70      	pop	{r4, r5, r6, pc}
 2b6:	46c0      	nop			; (mov r8, r8)
 2b8:	40000800 	.word	0x40000800
 2bc:	fffffcff 	.word	0xfffffcff

000002c0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
 2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 2c2:	46de      	mov	lr, fp
 2c4:	4657      	mov	r7, sl
 2c6:	464e      	mov	r6, r9
 2c8:	4645      	mov	r5, r8
 2ca:	b5e0      	push	{r5, r6, r7, lr}
 2cc:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
 2ce:	4b26      	ldr	r3, [pc, #152]	; (368 <system_clock_source_xosc32k_set_config+0xa8>)
 2d0:	469b      	mov	fp, r3
 2d2:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
 2d4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
 2d6:	7800      	ldrb	r0, [r0, #0]
 2d8:	4242      	negs	r2, r0
 2da:	4142      	adcs	r2, r0
 2dc:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
 2de:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
 2e0:	78ca      	ldrb	r2, [r1, #3]
 2e2:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
 2e4:	790a      	ldrb	r2, [r1, #4]
 2e6:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
 2e8:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
 2ea:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
 2ec:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
 2ee:	688a      	ldr	r2, [r1, #8]
 2f0:	491e      	ldr	r1, [pc, #120]	; (36c <system_clock_source_xosc32k_set_config+0xac>)
 2f2:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
 2f4:	2101      	movs	r1, #1
 2f6:	464a      	mov	r2, r9
 2f8:	0092      	lsls	r2, r2, #2
 2fa:	4691      	mov	r9, r2
 2fc:	2204      	movs	r2, #4
 2fe:	4393      	bics	r3, r2
 300:	464a      	mov	r2, r9
 302:	4313      	orrs	r3, r2
 304:	4642      	mov	r2, r8
 306:	400a      	ands	r2, r1
 308:	00d2      	lsls	r2, r2, #3
 30a:	4690      	mov	r8, r2
 30c:	2208      	movs	r2, #8
 30e:	4393      	bics	r3, r2
 310:	4642      	mov	r2, r8
 312:	4313      	orrs	r3, r2
 314:	4662      	mov	r2, ip
 316:	400a      	ands	r2, r1
 318:	0112      	lsls	r2, r2, #4
 31a:	4694      	mov	ip, r2
 31c:	2210      	movs	r2, #16
 31e:	4393      	bics	r3, r2
 320:	4662      	mov	r2, ip
 322:	4313      	orrs	r3, r2
 324:	4008      	ands	r0, r1
 326:	0140      	lsls	r0, r0, #5
 328:	2220      	movs	r2, #32
 32a:	4393      	bics	r3, r2
 32c:	4303      	orrs	r3, r0
 32e:	400f      	ands	r7, r1
 330:	01bf      	lsls	r7, r7, #6
 332:	2040      	movs	r0, #64	; 0x40
 334:	4383      	bics	r3, r0
 336:	433b      	orrs	r3, r7
 338:	400e      	ands	r6, r1
 33a:	01f6      	lsls	r6, r6, #7
 33c:	3040      	adds	r0, #64	; 0x40
 33e:	4383      	bics	r3, r0
 340:	4333      	orrs	r3, r6
 342:	3879      	subs	r0, #121	; 0x79
 344:	4005      	ands	r5, r0
 346:	022d      	lsls	r5, r5, #8
 348:	4809      	ldr	r0, [pc, #36]	; (370 <system_clock_source_xosc32k_set_config+0xb0>)
 34a:	4003      	ands	r3, r0
 34c:	432b      	orrs	r3, r5
 34e:	4021      	ands	r1, r4
 350:	0309      	lsls	r1, r1, #12
 352:	4808      	ldr	r0, [pc, #32]	; (374 <system_clock_source_xosc32k_set_config+0xb4>)
 354:	4003      	ands	r3, r0
 356:	430b      	orrs	r3, r1
 358:	465a      	mov	r2, fp
 35a:	8293      	strh	r3, [r2, #20]
}
 35c:	bc3c      	pop	{r2, r3, r4, r5}
 35e:	4690      	mov	r8, r2
 360:	4699      	mov	r9, r3
 362:	46a2      	mov	sl, r4
 364:	46ab      	mov	fp, r5
 366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 368:	40000800 	.word	0x40000800
 36c:	20000034 	.word	0x20000034
 370:	fffff8ff 	.word	0xfffff8ff
 374:	ffffefff 	.word	0xffffefff

00000378 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
 378:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
 37a:	7a03      	ldrb	r3, [r0, #8]
 37c:	069b      	lsls	r3, r3, #26
 37e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
 380:	8942      	ldrh	r2, [r0, #10]
 382:	0592      	lsls	r2, r2, #22
 384:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
 386:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
 388:	4918      	ldr	r1, [pc, #96]	; (3ec <system_clock_source_dfll_set_config+0x74>)
 38a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
 38c:	7983      	ldrb	r3, [r0, #6]
 38e:	79c2      	ldrb	r2, [r0, #7]
 390:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
 392:	8842      	ldrh	r2, [r0, #2]
 394:	8884      	ldrh	r4, [r0, #4]
 396:	4322      	orrs	r2, r4
 398:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
 39a:	7842      	ldrb	r2, [r0, #1]
 39c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
 39e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
 3a0:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
 3a2:	7803      	ldrb	r3, [r0, #0]
 3a4:	2b04      	cmp	r3, #4
 3a6:	d011      	beq.n	3cc <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
 3a8:	2b20      	cmp	r3, #32
 3aa:	d10e      	bne.n	3ca <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
 3ac:	7b03      	ldrb	r3, [r0, #12]
 3ae:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
 3b0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
 3b2:	4313      	orrs	r3, r2
 3b4:	89c2      	ldrh	r2, [r0, #14]
 3b6:	0412      	lsls	r2, r2, #16
 3b8:	490d      	ldr	r1, [pc, #52]	; (3f0 <system_clock_source_dfll_set_config+0x78>)
 3ba:	400a      	ands	r2, r1
 3bc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
 3be:	4a0b      	ldr	r2, [pc, #44]	; (3ec <system_clock_source_dfll_set_config+0x74>)
 3c0:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
 3c2:	6811      	ldr	r1, [r2, #0]
 3c4:	4b0b      	ldr	r3, [pc, #44]	; (3f4 <system_clock_source_dfll_set_config+0x7c>)
 3c6:	430b      	orrs	r3, r1
 3c8:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
 3ca:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
 3cc:	7b03      	ldrb	r3, [r0, #12]
 3ce:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
 3d0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
 3d2:	4313      	orrs	r3, r2
 3d4:	89c2      	ldrh	r2, [r0, #14]
 3d6:	0412      	lsls	r2, r2, #16
 3d8:	4905      	ldr	r1, [pc, #20]	; (3f0 <system_clock_source_dfll_set_config+0x78>)
 3da:	400a      	ands	r2, r1
 3dc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
 3de:	4a03      	ldr	r2, [pc, #12]	; (3ec <system_clock_source_dfll_set_config+0x74>)
 3e0:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
 3e2:	6813      	ldr	r3, [r2, #0]
 3e4:	2104      	movs	r1, #4
 3e6:	430b      	orrs	r3, r1
 3e8:	6013      	str	r3, [r2, #0]
 3ea:	e7ee      	b.n	3ca <system_clock_source_dfll_set_config+0x52>
 3ec:	20000034 	.word	0x20000034
 3f0:	03ff0000 	.word	0x03ff0000
 3f4:	00000424 	.word	0x00000424

000003f8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 3f8:	2808      	cmp	r0, #8
 3fa:	d803      	bhi.n	404 <system_clock_source_enable+0xc>
 3fc:	0080      	lsls	r0, r0, #2
 3fe:	4b25      	ldr	r3, [pc, #148]	; (494 <system_clock_source_enable+0x9c>)
 400:	581b      	ldr	r3, [r3, r0]
 402:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 404:	2017      	movs	r0, #23
 406:	e044      	b.n	492 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 408:	4a23      	ldr	r2, [pc, #140]	; (498 <system_clock_source_enable+0xa0>)
 40a:	6a13      	ldr	r3, [r2, #32]
 40c:	2102      	movs	r1, #2
 40e:	430b      	orrs	r3, r1
 410:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 412:	2000      	movs	r0, #0
 414:	e03d      	b.n	492 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 416:	4a20      	ldr	r2, [pc, #128]	; (498 <system_clock_source_enable+0xa0>)
 418:	6993      	ldr	r3, [r2, #24]
 41a:	2102      	movs	r1, #2
 41c:	430b      	orrs	r3, r1
 41e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
 420:	2000      	movs	r0, #0
		break;
 422:	e036      	b.n	492 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 424:	4a1c      	ldr	r2, [pc, #112]	; (498 <system_clock_source_enable+0xa0>)
 426:	8a13      	ldrh	r3, [r2, #16]
 428:	2102      	movs	r1, #2
 42a:	430b      	orrs	r3, r1
 42c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
 42e:	2000      	movs	r0, #0
		break;
 430:	e02f      	b.n	492 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 432:	4a19      	ldr	r2, [pc, #100]	; (498 <system_clock_source_enable+0xa0>)
 434:	8a93      	ldrh	r3, [r2, #20]
 436:	2102      	movs	r1, #2
 438:	430b      	orrs	r3, r1
 43a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
 43c:	2000      	movs	r0, #0
		break;
 43e:	e028      	b.n	492 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 440:	4916      	ldr	r1, [pc, #88]	; (49c <system_clock_source_enable+0xa4>)
 442:	680b      	ldr	r3, [r1, #0]
 444:	2202      	movs	r2, #2
 446:	4313      	orrs	r3, r2
 448:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
 44a:	4b13      	ldr	r3, [pc, #76]	; (498 <system_clock_source_enable+0xa0>)
 44c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 44e:	0019      	movs	r1, r3
 450:	320e      	adds	r2, #14
 452:	68cb      	ldr	r3, [r1, #12]
 454:	421a      	tst	r2, r3
 456:	d0fc      	beq.n	452 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 458:	4a10      	ldr	r2, [pc, #64]	; (49c <system_clock_source_enable+0xa4>)
 45a:	6891      	ldr	r1, [r2, #8]
 45c:	4b0e      	ldr	r3, [pc, #56]	; (498 <system_clock_source_enable+0xa0>)
 45e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 460:	6852      	ldr	r2, [r2, #4]
 462:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
 464:	2200      	movs	r2, #0
 466:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 468:	0019      	movs	r1, r3
 46a:	3210      	adds	r2, #16
 46c:	68cb      	ldr	r3, [r1, #12]
 46e:	421a      	tst	r2, r3
 470:	d0fc      	beq.n	46c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 472:	4b0a      	ldr	r3, [pc, #40]	; (49c <system_clock_source_enable+0xa4>)
 474:	681b      	ldr	r3, [r3, #0]
 476:	b29b      	uxth	r3, r3
 478:	4a07      	ldr	r2, [pc, #28]	; (498 <system_clock_source_enable+0xa0>)
 47a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
 47c:	2000      	movs	r0, #0
 47e:	e008      	b.n	492 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
 480:	4905      	ldr	r1, [pc, #20]	; (498 <system_clock_source_enable+0xa0>)
 482:	2244      	movs	r2, #68	; 0x44
 484:	5c8b      	ldrb	r3, [r1, r2]
 486:	2002      	movs	r0, #2
 488:	4303      	orrs	r3, r0
 48a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
 48c:	2000      	movs	r0, #0
		break;
 48e:	e000      	b.n	492 <system_clock_source_enable+0x9a>
		return STATUS_OK;
 490:	2000      	movs	r0, #0
}
 492:	4770      	bx	lr
 494:	00000f24 	.word	0x00000f24
 498:	40000800 	.word	0x40000800
 49c:	20000034 	.word	0x20000034

000004a0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 4a2:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 4a4:	22c2      	movs	r2, #194	; 0xc2
 4a6:	00d2      	lsls	r2, r2, #3
 4a8:	4b47      	ldr	r3, [pc, #284]	; (5c8 <system_clock_init+0x128>)
 4aa:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 4ac:	4a47      	ldr	r2, [pc, #284]	; (5cc <system_clock_init+0x12c>)
 4ae:	6853      	ldr	r3, [r2, #4]
 4b0:	211e      	movs	r1, #30
 4b2:	438b      	bics	r3, r1
 4b4:	391a      	subs	r1, #26
 4b6:	430b      	orrs	r3, r1
 4b8:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
 4ba:	2202      	movs	r2, #2
 4bc:	ab01      	add	r3, sp, #4
 4be:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 4c0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 4c2:	4d43      	ldr	r5, [pc, #268]	; (5d0 <system_clock_init+0x130>)
 4c4:	b2e0      	uxtb	r0, r4
 4c6:	a901      	add	r1, sp, #4
 4c8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 4ca:	3401      	adds	r4, #1
 4cc:	2c25      	cmp	r4, #37	; 0x25
 4ce:	d1f9      	bne.n	4c4 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
 4d0:	a80a      	add	r0, sp, #40	; 0x28
 4d2:	2300      	movs	r3, #0
 4d4:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
 4d6:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
 4d8:	2280      	movs	r2, #128	; 0x80
 4da:	0212      	lsls	r2, r2, #8
 4dc:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
 4de:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
 4e0:	2201      	movs	r2, #1
 4e2:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
 4e4:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
 4e6:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
 4e8:	3202      	adds	r2, #2
 4ea:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
 4ec:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
 4ee:	4b39      	ldr	r3, [pc, #228]	; (5d4 <system_clock_init+0x134>)
 4f0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
 4f2:	2005      	movs	r0, #5
 4f4:	4b38      	ldr	r3, [pc, #224]	; (5d8 <system_clock_init+0x138>)
 4f6:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
 4f8:	4933      	ldr	r1, [pc, #204]	; (5c8 <system_clock_init+0x128>)
 4fa:	2202      	movs	r2, #2
 4fc:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
 4fe:	421a      	tst	r2, r3
 500:	d0fc      	beq.n	4fc <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
 502:	4a31      	ldr	r2, [pc, #196]	; (5c8 <system_clock_init+0x128>)
 504:	8a93      	ldrh	r3, [r2, #20]
 506:	2180      	movs	r1, #128	; 0x80
 508:	430b      	orrs	r3, r1
 50a:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
 50c:	ab05      	add	r3, sp, #20
 50e:	2100      	movs	r1, #0
 510:	2200      	movs	r2, #0
 512:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
 514:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
 516:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
 518:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
 51a:	313f      	adds	r1, #63	; 0x3f
 51c:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
 51e:	393b      	subs	r1, #59	; 0x3b
 520:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
 522:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
 524:	4b2d      	ldr	r3, [pc, #180]	; (5dc <system_clock_init+0x13c>)
 526:	681b      	ldr	r3, [r3, #0]
 528:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
 52a:	2b3f      	cmp	r3, #63	; 0x3f
 52c:	d04a      	beq.n	5c4 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
 52e:	a805      	add	r0, sp, #20
 530:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
 532:	4b2b      	ldr	r3, [pc, #172]	; (5e0 <system_clock_init+0x140>)
 534:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
 536:	2307      	movs	r3, #7
 538:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
 53a:	3338      	adds	r3, #56	; 0x38
 53c:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
 53e:	4b29      	ldr	r3, [pc, #164]	; (5e4 <system_clock_init+0x144>)
 540:	4798      	blx	r3
	config->run_in_standby  = false;
 542:	a804      	add	r0, sp, #16
 544:	2500      	movs	r5, #0
 546:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
 548:	2601      	movs	r6, #1
 54a:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 54c:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 54e:	4b26      	ldr	r3, [pc, #152]	; (5e8 <system_clock_init+0x148>)
 550:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 552:	2006      	movs	r0, #6
 554:	4f20      	ldr	r7, [pc, #128]	; (5d8 <system_clock_init+0x138>)
 556:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 558:	4b24      	ldr	r3, [pc, #144]	; (5ec <system_clock_init+0x14c>)
 55a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 55c:	ac01      	add	r4, sp, #4
 55e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
 560:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
 562:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
 564:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
 566:	2305      	movs	r3, #5
 568:	7023      	strb	r3, [r4, #0]
 56a:	0021      	movs	r1, r4
 56c:	2001      	movs	r0, #1
 56e:	4b20      	ldr	r3, [pc, #128]	; (5f0 <system_clock_init+0x150>)
 570:	4798      	blx	r3
 572:	2001      	movs	r0, #1
 574:	4b1f      	ldr	r3, [pc, #124]	; (5f4 <system_clock_init+0x154>)
 576:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
 578:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
 57a:	0021      	movs	r1, r4
 57c:	2000      	movs	r0, #0
 57e:	4b14      	ldr	r3, [pc, #80]	; (5d0 <system_clock_init+0x130>)
 580:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
 582:	2000      	movs	r0, #0
 584:	4b1c      	ldr	r3, [pc, #112]	; (5f8 <system_clock_init+0x158>)
 586:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
 588:	2007      	movs	r0, #7
 58a:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
 58c:	490e      	ldr	r1, [pc, #56]	; (5c8 <system_clock_init+0x128>)
 58e:	22d0      	movs	r2, #208	; 0xd0
 590:	68cb      	ldr	r3, [r1, #12]
 592:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
 594:	2bd0      	cmp	r3, #208	; 0xd0
 596:	d1fb      	bne.n	590 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
 598:	4a18      	ldr	r2, [pc, #96]	; (5fc <system_clock_init+0x15c>)
 59a:	2300      	movs	r3, #0
 59c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
 59e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
 5a0:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
 5a2:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
 5a4:	a901      	add	r1, sp, #4
 5a6:	2201      	movs	r2, #1
 5a8:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
 5aa:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
 5ac:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
 5ae:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 5b0:	3307      	adds	r3, #7
 5b2:	700b      	strb	r3, [r1, #0]
 5b4:	2000      	movs	r0, #0
 5b6:	4b0e      	ldr	r3, [pc, #56]	; (5f0 <system_clock_init+0x150>)
 5b8:	4798      	blx	r3
 5ba:	2000      	movs	r0, #0
 5bc:	4b0d      	ldr	r3, [pc, #52]	; (5f4 <system_clock_init+0x154>)
 5be:	4798      	blx	r3
#endif
}
 5c0:	b00f      	add	sp, #60	; 0x3c
 5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
 5c4:	3b20      	subs	r3, #32
 5c6:	e7b2      	b.n	52e <system_clock_init+0x8e>
 5c8:	40000800 	.word	0x40000800
 5cc:	41004000 	.word	0x41004000
 5d0:	00000839 	.word	0x00000839
 5d4:	000002c1 	.word	0x000002c1
 5d8:	000003f9 	.word	0x000003f9
 5dc:	00806024 	.word	0x00806024
 5e0:	000005b9 	.word	0x000005b9
 5e4:	00000379 	.word	0x00000379
 5e8:	00000285 	.word	0x00000285
 5ec:	00000601 	.word	0x00000601
 5f0:	00000625 	.word	0x00000625
 5f4:	000006dd 	.word	0x000006dd
 5f8:	000007ad 	.word	0x000007ad
 5fc:	40000400 	.word	0x40000400

00000600 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
 600:	4a06      	ldr	r2, [pc, #24]	; (61c <system_gclk_init+0x1c>)
 602:	6993      	ldr	r3, [r2, #24]
 604:	2108      	movs	r1, #8
 606:	430b      	orrs	r3, r1
 608:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 60a:	2201      	movs	r2, #1
 60c:	4b04      	ldr	r3, [pc, #16]	; (620 <system_gclk_init+0x20>)
 60e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 610:	0019      	movs	r1, r3
 612:	780b      	ldrb	r3, [r1, #0]
 614:	4213      	tst	r3, r2
 616:	d1fc      	bne.n	612 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 618:	4770      	bx	lr
 61a:	46c0      	nop			; (mov r8, r8)
 61c:	40000400 	.word	0x40000400
 620:	40000c00 	.word	0x40000c00

00000624 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 624:	b570      	push	{r4, r5, r6, lr}
 626:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 628:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 62a:	780d      	ldrb	r5, [r1, #0]
 62c:	022d      	lsls	r5, r5, #8
 62e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 630:	784b      	ldrb	r3, [r1, #1]
 632:	2b00      	cmp	r3, #0
 634:	d002      	beq.n	63c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 636:	2380      	movs	r3, #128	; 0x80
 638:	02db      	lsls	r3, r3, #11
 63a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 63c:	7a4b      	ldrb	r3, [r1, #9]
 63e:	2b00      	cmp	r3, #0
 640:	d002      	beq.n	648 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 642:	2380      	movs	r3, #128	; 0x80
 644:	031b      	lsls	r3, r3, #12
 646:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 648:	6848      	ldr	r0, [r1, #4]
 64a:	2801      	cmp	r0, #1
 64c:	d910      	bls.n	670 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 64e:	1e43      	subs	r3, r0, #1
 650:	4218      	tst	r0, r3
 652:	d134      	bne.n	6be <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 654:	2802      	cmp	r0, #2
 656:	d930      	bls.n	6ba <system_gclk_gen_set_config+0x96>
 658:	2302      	movs	r3, #2
 65a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 65c:	3201      	adds	r2, #1
						mask <<= 1) {
 65e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
 660:	4298      	cmp	r0, r3
 662:	d8fb      	bhi.n	65c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 664:	0212      	lsls	r2, r2, #8
 666:	4332      	orrs	r2, r6
 668:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 66a:	2380      	movs	r3, #128	; 0x80
 66c:	035b      	lsls	r3, r3, #13
 66e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 670:	7a0b      	ldrb	r3, [r1, #8]
 672:	2b00      	cmp	r3, #0
 674:	d002      	beq.n	67c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 676:	2380      	movs	r3, #128	; 0x80
 678:	039b      	lsls	r3, r3, #14
 67a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 67c:	4a13      	ldr	r2, [pc, #76]	; (6cc <system_gclk_gen_set_config+0xa8>)
 67e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
 680:	b25b      	sxtb	r3, r3
 682:	2b00      	cmp	r3, #0
 684:	dbfb      	blt.n	67e <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 686:	4b12      	ldr	r3, [pc, #72]	; (6d0 <system_gclk_gen_set_config+0xac>)
 688:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 68a:	4b12      	ldr	r3, [pc, #72]	; (6d4 <system_gclk_gen_set_config+0xb0>)
 68c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 68e:	4a0f      	ldr	r2, [pc, #60]	; (6cc <system_gclk_gen_set_config+0xa8>)
 690:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 692:	b25b      	sxtb	r3, r3
 694:	2b00      	cmp	r3, #0
 696:	dbfb      	blt.n	690 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 698:	4b0c      	ldr	r3, [pc, #48]	; (6cc <system_gclk_gen_set_config+0xa8>)
 69a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 69c:	001a      	movs	r2, r3
 69e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
 6a0:	b25b      	sxtb	r3, r3
 6a2:	2b00      	cmp	r3, #0
 6a4:	dbfb      	blt.n	69e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 6a6:	4a09      	ldr	r2, [pc, #36]	; (6cc <system_gclk_gen_set_config+0xa8>)
 6a8:	6853      	ldr	r3, [r2, #4]
 6aa:	2180      	movs	r1, #128	; 0x80
 6ac:	0249      	lsls	r1, r1, #9
 6ae:	400b      	ands	r3, r1
 6b0:	431d      	orrs	r5, r3
 6b2:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 6b4:	4b08      	ldr	r3, [pc, #32]	; (6d8 <system_gclk_gen_set_config+0xb4>)
 6b6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 6b8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
 6ba:	2200      	movs	r2, #0
 6bc:	e7d2      	b.n	664 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 6be:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
 6c0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 6c2:	2380      	movs	r3, #128	; 0x80
 6c4:	029b      	lsls	r3, r3, #10
 6c6:	431d      	orrs	r5, r3
 6c8:	e7d2      	b.n	670 <system_gclk_gen_set_config+0x4c>
 6ca:	46c0      	nop			; (mov r8, r8)
 6cc:	40000c00 	.word	0x40000c00
 6d0:	00000125 	.word	0x00000125
 6d4:	40000c08 	.word	0x40000c08
 6d8:	00000165 	.word	0x00000165

000006dc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 6dc:	b510      	push	{r4, lr}
 6de:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 6e0:	4a0b      	ldr	r2, [pc, #44]	; (710 <system_gclk_gen_enable+0x34>)
 6e2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 6e4:	b25b      	sxtb	r3, r3
 6e6:	2b00      	cmp	r3, #0
 6e8:	dbfb      	blt.n	6e2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
 6ea:	4b0a      	ldr	r3, [pc, #40]	; (714 <system_gclk_gen_enable+0x38>)
 6ec:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 6ee:	4b0a      	ldr	r3, [pc, #40]	; (718 <system_gclk_gen_enable+0x3c>)
 6f0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 6f2:	4a07      	ldr	r2, [pc, #28]	; (710 <system_gclk_gen_enable+0x34>)
 6f4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 6f6:	b25b      	sxtb	r3, r3
 6f8:	2b00      	cmp	r3, #0
 6fa:	dbfb      	blt.n	6f4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 6fc:	4a04      	ldr	r2, [pc, #16]	; (710 <system_gclk_gen_enable+0x34>)
 6fe:	6851      	ldr	r1, [r2, #4]
 700:	2380      	movs	r3, #128	; 0x80
 702:	025b      	lsls	r3, r3, #9
 704:	430b      	orrs	r3, r1
 706:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
 708:	4b04      	ldr	r3, [pc, #16]	; (71c <system_gclk_gen_enable+0x40>)
 70a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 70c:	bd10      	pop	{r4, pc}
 70e:	46c0      	nop			; (mov r8, r8)
 710:	40000c00 	.word	0x40000c00
 714:	00000125 	.word	0x00000125
 718:	40000c04 	.word	0x40000c04
 71c:	00000165 	.word	0x00000165

00000720 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
 720:	b570      	push	{r4, r5, r6, lr}
 722:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 724:	4a1a      	ldr	r2, [pc, #104]	; (790 <system_gclk_gen_get_hz+0x70>)
 726:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 728:	b25b      	sxtb	r3, r3
 72a:	2b00      	cmp	r3, #0
 72c:	dbfb      	blt.n	726 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
 72e:	4b19      	ldr	r3, [pc, #100]	; (794 <system_gclk_gen_get_hz+0x74>)
 730:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 732:	4b19      	ldr	r3, [pc, #100]	; (798 <system_gclk_gen_get_hz+0x78>)
 734:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 736:	4a16      	ldr	r2, [pc, #88]	; (790 <system_gclk_gen_get_hz+0x70>)
 738:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 73a:	b25b      	sxtb	r3, r3
 73c:	2b00      	cmp	r3, #0
 73e:	dbfb      	blt.n	738 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
 740:	4e13      	ldr	r6, [pc, #76]	; (790 <system_gclk_gen_get_hz+0x70>)
 742:	6870      	ldr	r0, [r6, #4]
 744:	04c0      	lsls	r0, r0, #19
 746:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
 748:	4b14      	ldr	r3, [pc, #80]	; (79c <system_gclk_gen_get_hz+0x7c>)
 74a:	4798      	blx	r3
 74c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 74e:	4b12      	ldr	r3, [pc, #72]	; (798 <system_gclk_gen_get_hz+0x78>)
 750:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
 752:	6876      	ldr	r6, [r6, #4]
 754:	02f6      	lsls	r6, r6, #11
 756:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 758:	4b11      	ldr	r3, [pc, #68]	; (7a0 <system_gclk_gen_get_hz+0x80>)
 75a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 75c:	4a0c      	ldr	r2, [pc, #48]	; (790 <system_gclk_gen_get_hz+0x70>)
 75e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 760:	b25b      	sxtb	r3, r3
 762:	2b00      	cmp	r3, #0
 764:	dbfb      	blt.n	75e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
 766:	4b0a      	ldr	r3, [pc, #40]	; (790 <system_gclk_gen_get_hz+0x70>)
 768:	689c      	ldr	r4, [r3, #8]
 76a:	0224      	lsls	r4, r4, #8
 76c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
 76e:	4b0d      	ldr	r3, [pc, #52]	; (7a4 <system_gclk_gen_get_hz+0x84>)
 770:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
 772:	2e00      	cmp	r6, #0
 774:	d107      	bne.n	786 <system_gclk_gen_get_hz+0x66>
 776:	2c01      	cmp	r4, #1
 778:	d907      	bls.n	78a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
 77a:	0021      	movs	r1, r4
 77c:	0028      	movs	r0, r5
 77e:	4b0a      	ldr	r3, [pc, #40]	; (7a8 <system_gclk_gen_get_hz+0x88>)
 780:	4798      	blx	r3
 782:	0005      	movs	r5, r0
 784:	e001      	b.n	78a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
 786:	3401      	adds	r4, #1
 788:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
 78a:	0028      	movs	r0, r5
 78c:	bd70      	pop	{r4, r5, r6, pc}
 78e:	46c0      	nop			; (mov r8, r8)
 790:	40000c00 	.word	0x40000c00
 794:	00000125 	.word	0x00000125
 798:	40000c04 	.word	0x40000c04
 79c:	000001f1 	.word	0x000001f1
 7a0:	40000c08 	.word	0x40000c08
 7a4:	00000165 	.word	0x00000165
 7a8:	00000b39 	.word	0x00000b39

000007ac <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
 7ac:	b510      	push	{r4, lr}
 7ae:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 7b0:	4b06      	ldr	r3, [pc, #24]	; (7cc <system_gclk_chan_enable+0x20>)
 7b2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 7b4:	4b06      	ldr	r3, [pc, #24]	; (7d0 <system_gclk_chan_enable+0x24>)
 7b6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
 7b8:	4a06      	ldr	r2, [pc, #24]	; (7d4 <system_gclk_chan_enable+0x28>)
 7ba:	8853      	ldrh	r3, [r2, #2]
 7bc:	2180      	movs	r1, #128	; 0x80
 7be:	01c9      	lsls	r1, r1, #7
 7c0:	430b      	orrs	r3, r1
 7c2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
 7c4:	4b04      	ldr	r3, [pc, #16]	; (7d8 <system_gclk_chan_enable+0x2c>)
 7c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 7c8:	bd10      	pop	{r4, pc}
 7ca:	46c0      	nop			; (mov r8, r8)
 7cc:	00000125 	.word	0x00000125
 7d0:	40000c02 	.word	0x40000c02
 7d4:	40000c00 	.word	0x40000c00
 7d8:	00000165 	.word	0x00000165

000007dc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 7dc:	b510      	push	{r4, lr}
 7de:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 7e0:	4b0f      	ldr	r3, [pc, #60]	; (820 <system_gclk_chan_disable+0x44>)
 7e2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 7e4:	4b0f      	ldr	r3, [pc, #60]	; (824 <system_gclk_chan_disable+0x48>)
 7e6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 7e8:	4a0f      	ldr	r2, [pc, #60]	; (828 <system_gclk_chan_disable+0x4c>)
 7ea:	8853      	ldrh	r3, [r2, #2]
 7ec:	051b      	lsls	r3, r3, #20
 7ee:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 7f0:	8853      	ldrh	r3, [r2, #2]
 7f2:	490e      	ldr	r1, [pc, #56]	; (82c <system_gclk_chan_disable+0x50>)
 7f4:	400b      	ands	r3, r1
 7f6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 7f8:	8853      	ldrh	r3, [r2, #2]
 7fa:	490d      	ldr	r1, [pc, #52]	; (830 <system_gclk_chan_disable+0x54>)
 7fc:	400b      	ands	r3, r1
 7fe:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 800:	0011      	movs	r1, r2
 802:	2280      	movs	r2, #128	; 0x80
 804:	01d2      	lsls	r2, r2, #7
 806:	884b      	ldrh	r3, [r1, #2]
 808:	4213      	tst	r3, r2
 80a:	d1fc      	bne.n	806 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 80c:	4906      	ldr	r1, [pc, #24]	; (828 <system_gclk_chan_disable+0x4c>)
 80e:	884a      	ldrh	r2, [r1, #2]
 810:	0203      	lsls	r3, r0, #8
 812:	4806      	ldr	r0, [pc, #24]	; (82c <system_gclk_chan_disable+0x50>)
 814:	4002      	ands	r2, r0
 816:	4313      	orrs	r3, r2
 818:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
 81a:	4b06      	ldr	r3, [pc, #24]	; (834 <system_gclk_chan_disable+0x58>)
 81c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 81e:	bd10      	pop	{r4, pc}
 820:	00000125 	.word	0x00000125
 824:	40000c02 	.word	0x40000c02
 828:	40000c00 	.word	0x40000c00
 82c:	fffff0ff 	.word	0xfffff0ff
 830:	ffffbfff 	.word	0xffffbfff
 834:	00000165 	.word	0x00000165

00000838 <system_gclk_chan_set_config>:
{
 838:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 83a:	780c      	ldrb	r4, [r1, #0]
 83c:	0224      	lsls	r4, r4, #8
 83e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
 840:	4b02      	ldr	r3, [pc, #8]	; (84c <system_gclk_chan_set_config+0x14>)
 842:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 844:	b2a4      	uxth	r4, r4
 846:	4b02      	ldr	r3, [pc, #8]	; (850 <system_gclk_chan_set_config+0x18>)
 848:	805c      	strh	r4, [r3, #2]
}
 84a:	bd10      	pop	{r4, pc}
 84c:	000007dd 	.word	0x000007dd
 850:	40000c00 	.word	0x40000c00

00000854 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
 854:	b510      	push	{r4, lr}
 856:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 858:	4b06      	ldr	r3, [pc, #24]	; (874 <system_gclk_chan_get_hz+0x20>)
 85a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 85c:	4b06      	ldr	r3, [pc, #24]	; (878 <system_gclk_chan_get_hz+0x24>)
 85e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
 860:	4b06      	ldr	r3, [pc, #24]	; (87c <system_gclk_chan_get_hz+0x28>)
 862:	885c      	ldrh	r4, [r3, #2]
 864:	0524      	lsls	r4, r4, #20
 866:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
 868:	4b05      	ldr	r3, [pc, #20]	; (880 <system_gclk_chan_get_hz+0x2c>)
 86a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
 86c:	0020      	movs	r0, r4
 86e:	4b05      	ldr	r3, [pc, #20]	; (884 <system_gclk_chan_get_hz+0x30>)
 870:	4798      	blx	r3
}
 872:	bd10      	pop	{r4, pc}
 874:	00000125 	.word	0x00000125
 878:	40000c02 	.word	0x40000c02
 87c:	40000c00 	.word	0x40000c00
 880:	00000165 	.word	0x00000165
 884:	00000721 	.word	0x00000721

00000888 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 888:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 88a:	78d3      	ldrb	r3, [r2, #3]
 88c:	2b00      	cmp	r3, #0
 88e:	d135      	bne.n	8fc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 890:	7813      	ldrb	r3, [r2, #0]
 892:	2b80      	cmp	r3, #128	; 0x80
 894:	d029      	beq.n	8ea <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 896:	061b      	lsls	r3, r3, #24
 898:	2480      	movs	r4, #128	; 0x80
 89a:	0264      	lsls	r4, r4, #9
 89c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 89e:	7854      	ldrb	r4, [r2, #1]
 8a0:	2502      	movs	r5, #2
 8a2:	43ac      	bics	r4, r5
 8a4:	d106      	bne.n	8b4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 8a6:	7894      	ldrb	r4, [r2, #2]
 8a8:	2c00      	cmp	r4, #0
 8aa:	d120      	bne.n	8ee <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
 8ac:	2480      	movs	r4, #128	; 0x80
 8ae:	02a4      	lsls	r4, r4, #10
 8b0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 8b2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 8b4:	7854      	ldrb	r4, [r2, #1]
 8b6:	3c01      	subs	r4, #1
 8b8:	2c01      	cmp	r4, #1
 8ba:	d91c      	bls.n	8f6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 8bc:	040d      	lsls	r5, r1, #16
 8be:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 8c0:	24a0      	movs	r4, #160	; 0xa0
 8c2:	05e4      	lsls	r4, r4, #23
 8c4:	432c      	orrs	r4, r5
 8c6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 8c8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 8ca:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 8cc:	24d0      	movs	r4, #208	; 0xd0
 8ce:	0624      	lsls	r4, r4, #24
 8d0:	432c      	orrs	r4, r5
 8d2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 8d4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 8d6:	78d4      	ldrb	r4, [r2, #3]
 8d8:	2c00      	cmp	r4, #0
 8da:	d122      	bne.n	922 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 8dc:	035b      	lsls	r3, r3, #13
 8de:	d51c      	bpl.n	91a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 8e0:	7893      	ldrb	r3, [r2, #2]
 8e2:	2b01      	cmp	r3, #1
 8e4:	d01e      	beq.n	924 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
 8e6:	6141      	str	r1, [r0, #20]
 8e8:	e017      	b.n	91a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
 8ea:	2300      	movs	r3, #0
 8ec:	e7d7      	b.n	89e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 8ee:	24c0      	movs	r4, #192	; 0xc0
 8f0:	02e4      	lsls	r4, r4, #11
 8f2:	4323      	orrs	r3, r4
 8f4:	e7dd      	b.n	8b2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 8f6:	4c0d      	ldr	r4, [pc, #52]	; (92c <_system_pinmux_config+0xa4>)
 8f8:	4023      	ands	r3, r4
 8fa:	e7df      	b.n	8bc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
 8fc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 8fe:	040c      	lsls	r4, r1, #16
 900:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 902:	23a0      	movs	r3, #160	; 0xa0
 904:	05db      	lsls	r3, r3, #23
 906:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 908:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 90a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 90c:	23d0      	movs	r3, #208	; 0xd0
 90e:	061b      	lsls	r3, r3, #24
 910:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 912:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
 914:	78d3      	ldrb	r3, [r2, #3]
 916:	2b00      	cmp	r3, #0
 918:	d103      	bne.n	922 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 91a:	7853      	ldrb	r3, [r2, #1]
 91c:	3b01      	subs	r3, #1
 91e:	2b01      	cmp	r3, #1
 920:	d902      	bls.n	928 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
 922:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
 924:	6181      	str	r1, [r0, #24]
 926:	e7f8      	b.n	91a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
 928:	6081      	str	r1, [r0, #8]
}
 92a:	e7fa      	b.n	922 <_system_pinmux_config+0x9a>
 92c:	fffbffff 	.word	0xfffbffff

00000930 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 930:	b510      	push	{r4, lr}
 932:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 934:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 936:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
 938:	2900      	cmp	r1, #0
 93a:	d104      	bne.n	946 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
 93c:	0943      	lsrs	r3, r0, #5
 93e:	01db      	lsls	r3, r3, #7
 940:	4905      	ldr	r1, [pc, #20]	; (958 <system_pinmux_pin_set_config+0x28>)
 942:	468c      	mov	ip, r1
 944:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
 946:	241f      	movs	r4, #31
 948:	4020      	ands	r0, r4
 94a:	2101      	movs	r1, #1
 94c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
 94e:	0018      	movs	r0, r3
 950:	4b02      	ldr	r3, [pc, #8]	; (95c <system_pinmux_pin_set_config+0x2c>)
 952:	4798      	blx	r3
}
 954:	bd10      	pop	{r4, pc}
 956:	46c0      	nop			; (mov r8, r8)
 958:	41004400 	.word	0x41004400
 95c:	00000889 	.word	0x00000889

00000960 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 960:	4770      	bx	lr
	...

00000964 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 964:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 966:	4b05      	ldr	r3, [pc, #20]	; (97c <system_init+0x18>)
 968:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 96a:	4b05      	ldr	r3, [pc, #20]	; (980 <system_init+0x1c>)
 96c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 96e:	4b05      	ldr	r3, [pc, #20]	; (984 <system_init+0x20>)
 970:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 972:	4b05      	ldr	r3, [pc, #20]	; (988 <system_init+0x24>)
 974:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 976:	4b05      	ldr	r3, [pc, #20]	; (98c <system_init+0x28>)
 978:	4798      	blx	r3
}
 97a:	bd10      	pop	{r4, pc}
 97c:	000004a1 	.word	0x000004a1
 980:	00000195 	.word	0x00000195
 984:	00000961 	.word	0x00000961
 988:	00000961 	.word	0x00000961
 98c:	00000961 	.word	0x00000961

00000990 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 990:	e7fe      	b.n	990 <Dummy_Handler>
	...

00000994 <Reset_Handler>:
{
 994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 996:	4a2a      	ldr	r2, [pc, #168]	; (a40 <Reset_Handler+0xac>)
 998:	4b2a      	ldr	r3, [pc, #168]	; (a44 <Reset_Handler+0xb0>)
 99a:	429a      	cmp	r2, r3
 99c:	d011      	beq.n	9c2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 99e:	001a      	movs	r2, r3
 9a0:	4b29      	ldr	r3, [pc, #164]	; (a48 <Reset_Handler+0xb4>)
 9a2:	429a      	cmp	r2, r3
 9a4:	d20d      	bcs.n	9c2 <Reset_Handler+0x2e>
 9a6:	4a29      	ldr	r2, [pc, #164]	; (a4c <Reset_Handler+0xb8>)
 9a8:	3303      	adds	r3, #3
 9aa:	1a9b      	subs	r3, r3, r2
 9ac:	089b      	lsrs	r3, r3, #2
 9ae:	3301      	adds	r3, #1
 9b0:	009b      	lsls	r3, r3, #2
 9b2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 9b4:	4823      	ldr	r0, [pc, #140]	; (a44 <Reset_Handler+0xb0>)
 9b6:	4922      	ldr	r1, [pc, #136]	; (a40 <Reset_Handler+0xac>)
 9b8:	588c      	ldr	r4, [r1, r2]
 9ba:	5084      	str	r4, [r0, r2]
 9bc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 9be:	429a      	cmp	r2, r3
 9c0:	d1fa      	bne.n	9b8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 9c2:	4a23      	ldr	r2, [pc, #140]	; (a50 <Reset_Handler+0xbc>)
 9c4:	4b23      	ldr	r3, [pc, #140]	; (a54 <Reset_Handler+0xc0>)
 9c6:	429a      	cmp	r2, r3
 9c8:	d20a      	bcs.n	9e0 <Reset_Handler+0x4c>
 9ca:	43d3      	mvns	r3, r2
 9cc:	4921      	ldr	r1, [pc, #132]	; (a54 <Reset_Handler+0xc0>)
 9ce:	185b      	adds	r3, r3, r1
 9d0:	2103      	movs	r1, #3
 9d2:	438b      	bics	r3, r1
 9d4:	3304      	adds	r3, #4
 9d6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 9d8:	2100      	movs	r1, #0
 9da:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 9dc:	4293      	cmp	r3, r2
 9de:	d1fc      	bne.n	9da <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 9e0:	4a1d      	ldr	r2, [pc, #116]	; (a58 <Reset_Handler+0xc4>)
 9e2:	21ff      	movs	r1, #255	; 0xff
 9e4:	4b1d      	ldr	r3, [pc, #116]	; (a5c <Reset_Handler+0xc8>)
 9e6:	438b      	bics	r3, r1
 9e8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 9ea:	39fd      	subs	r1, #253	; 0xfd
 9ec:	2390      	movs	r3, #144	; 0x90
 9ee:	005b      	lsls	r3, r3, #1
 9f0:	4a1b      	ldr	r2, [pc, #108]	; (a60 <Reset_Handler+0xcc>)
 9f2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 9f4:	4a1b      	ldr	r2, [pc, #108]	; (a64 <Reset_Handler+0xd0>)
 9f6:	78d3      	ldrb	r3, [r2, #3]
 9f8:	2503      	movs	r5, #3
 9fa:	43ab      	bics	r3, r5
 9fc:	2402      	movs	r4, #2
 9fe:	4323      	orrs	r3, r4
 a00:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 a02:	78d3      	ldrb	r3, [r2, #3]
 a04:	270c      	movs	r7, #12
 a06:	43bb      	bics	r3, r7
 a08:	2608      	movs	r6, #8
 a0a:	4333      	orrs	r3, r6
 a0c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 a0e:	4b16      	ldr	r3, [pc, #88]	; (a68 <Reset_Handler+0xd4>)
 a10:	7b98      	ldrb	r0, [r3, #14]
 a12:	2230      	movs	r2, #48	; 0x30
 a14:	4390      	bics	r0, r2
 a16:	2220      	movs	r2, #32
 a18:	4310      	orrs	r0, r2
 a1a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 a1c:	7b99      	ldrb	r1, [r3, #14]
 a1e:	43b9      	bics	r1, r7
 a20:	4331      	orrs	r1, r6
 a22:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 a24:	7b9a      	ldrb	r2, [r3, #14]
 a26:	43aa      	bics	r2, r5
 a28:	4322      	orrs	r2, r4
 a2a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 a2c:	4a0f      	ldr	r2, [pc, #60]	; (a6c <Reset_Handler+0xd8>)
 a2e:	6853      	ldr	r3, [r2, #4]
 a30:	2180      	movs	r1, #128	; 0x80
 a32:	430b      	orrs	r3, r1
 a34:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 a36:	4b0e      	ldr	r3, [pc, #56]	; (a70 <Reset_Handler+0xdc>)
 a38:	4798      	blx	r3
        main();
 a3a:	4b0e      	ldr	r3, [pc, #56]	; (a74 <Reset_Handler+0xe0>)
 a3c:	4798      	blx	r3
 a3e:	e7fe      	b.n	a3e <Reset_Handler+0xaa>
 a40:	00000f70 	.word	0x00000f70
 a44:	20000000 	.word	0x20000000
 a48:	20000010 	.word	0x20000010
 a4c:	20000004 	.word	0x20000004
 a50:	20000010 	.word	0x20000010
 a54:	2000004c 	.word	0x2000004c
 a58:	e000ed00 	.word	0xe000ed00
 a5c:	00000000 	.word	0x00000000
 a60:	41007000 	.word	0x41007000
 a64:	41005000 	.word	0x41005000
 a68:	41004800 	.word	0x41004800
 a6c:	41004000 	.word	0x41004000
 a70:	00000eb9 	.word	0x00000eb9
 a74:	00000aa5 	.word	0x00000aa5

00000a78 <Buzzer_Initialize>:
* @param[in]	N/A
* @param[out]	N/A
* @return		Return true
* @note         
*****************************************************************************/
bool Buzzer_Initialize(void) {
 a78:	b500      	push	{lr}
 a7a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
 a7c:	a901      	add	r1, sp, #4
 a7e:	2301      	movs	r3, #1
 a80:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
 a82:	2200      	movs	r2, #0
 a84:	708a      	strb	r2, [r1, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 a86:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(BUZZER_PIN, &pin_conf);
 a88:	200b      	movs	r0, #11
 a8a:	4b04      	ldr	r3, [pc, #16]	; (a9c <Buzzer_Initialize+0x24>)
 a8c:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
 a8e:	2280      	movs	r2, #128	; 0x80
 a90:	0112      	lsls	r2, r2, #4
 a92:	4b03      	ldr	r3, [pc, #12]	; (aa0 <Buzzer_Initialize+0x28>)
 a94:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(BUZZER_PIN, LED_0_INACTIVE);
	
	return true;
 a96:	2001      	movs	r0, #1
 a98:	b003      	add	sp, #12
 a9a:	bd00      	pop	{pc}
 a9c:	000001cd 	.word	0x000001cd
 aa0:	41004400 	.word	0x41004400

00000aa4 <main>:
* @param[out]	N/A
* @return		Return 0, code shouldn't ideally exit this function
* @note         
*****************************************************************************/
int main (void)
{
 aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 aa6:	46de      	mov	lr, fp
 aa8:	4657      	mov	r7, sl
 aaa:	464e      	mov	r6, r9
 aac:	4645      	mov	r5, r8
 aae:	b5e0      	push	{r5, r6, r7, lr}
	system_init();
 ab0:	4b18      	ldr	r3, [pc, #96]	; (b14 <main+0x70>)
 ab2:	4798      	blx	r3
	/* Insert application code here, after the board has been initialized. */
	Sensor_Initialize();
 ab4:	4b18      	ldr	r3, [pc, #96]	; (b18 <main+0x74>)
 ab6:	4798      	blx	r3
	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {
		/* Is button pressed? */
		port_pin_set_output_level(BUZZER_PIN, LED_0_ACTIVE);
		delay_ms(500);
 ab8:	4b18      	ldr	r3, [pc, #96]	; (b1c <main+0x78>)
 aba:	469b      	mov	fp, r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
 abc:	4b18      	ldr	r3, [pc, #96]	; (b20 <main+0x7c>)
 abe:	4699      	mov	r9, r3
 ac0:	2380      	movs	r3, #128	; 0x80
 ac2:	011b      	lsls	r3, r3, #4
 ac4:	469a      	mov	sl, r3
 ac6:	464b      	mov	r3, r9
 ac8:	4652      	mov	r2, sl
 aca:	615a      	str	r2, [r3, #20]
 acc:	2000      	movs	r0, #0
 ace:	47d8      	blx	fp
 ad0:	4b14      	ldr	r3, [pc, #80]	; (b24 <main+0x80>)
 ad2:	4698      	mov	r8, r3
 ad4:	22fa      	movs	r2, #250	; 0xfa
 ad6:	0052      	lsls	r2, r2, #1
 ad8:	2300      	movs	r3, #0
 ada:	2100      	movs	r1, #0
 adc:	47c0      	blx	r8
 ade:	4e12      	ldr	r6, [pc, #72]	; (b28 <main+0x84>)
 ae0:	2700      	movs	r7, #0
 ae2:	1980      	adds	r0, r0, r6
 ae4:	4179      	adcs	r1, r7
 ae6:	4d11      	ldr	r5, [pc, #68]	; (b2c <main+0x88>)
 ae8:	4a11      	ldr	r2, [pc, #68]	; (b30 <main+0x8c>)
 aea:	2300      	movs	r3, #0
 aec:	47a8      	blx	r5
 aee:	4c11      	ldr	r4, [pc, #68]	; (b34 <main+0x90>)
 af0:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
 af2:	464b      	mov	r3, r9
 af4:	4652      	mov	r2, sl
 af6:	619a      	str	r2, [r3, #24]
		port_pin_set_output_level(BUZZER_PIN, !LED_0_ACTIVE);
		delay_ms(500);
 af8:	2000      	movs	r0, #0
 afa:	47d8      	blx	fp
 afc:	22fa      	movs	r2, #250	; 0xfa
 afe:	0052      	lsls	r2, r2, #1
 b00:	2300      	movs	r3, #0
 b02:	2100      	movs	r1, #0
 b04:	47c0      	blx	r8
 b06:	1980      	adds	r0, r0, r6
 b08:	4179      	adcs	r1, r7
 b0a:	4a09      	ldr	r2, [pc, #36]	; (b30 <main+0x8c>)
 b0c:	2300      	movs	r3, #0
 b0e:	47a8      	blx	r5
 b10:	47a0      	blx	r4
 b12:	e7d3      	b.n	abc <main+0x18>
 b14:	00000965 	.word	0x00000965
 b18:	00000115 	.word	0x00000115
 b1c:	00000721 	.word	0x00000721
 b20:	41004400 	.word	0x41004400
 b24:	00000c91 	.word	0x00000c91
 b28:	00001b57 	.word	0x00001b57
 b2c:	00000c51 	.word	0x00000c51
 b30:	00001b58 	.word	0x00001b58
 b34:	20000001 	.word	0x20000001

00000b38 <__udivsi3>:
 b38:	2200      	movs	r2, #0
 b3a:	0843      	lsrs	r3, r0, #1
 b3c:	428b      	cmp	r3, r1
 b3e:	d374      	bcc.n	c2a <__udivsi3+0xf2>
 b40:	0903      	lsrs	r3, r0, #4
 b42:	428b      	cmp	r3, r1
 b44:	d35f      	bcc.n	c06 <__udivsi3+0xce>
 b46:	0a03      	lsrs	r3, r0, #8
 b48:	428b      	cmp	r3, r1
 b4a:	d344      	bcc.n	bd6 <__udivsi3+0x9e>
 b4c:	0b03      	lsrs	r3, r0, #12
 b4e:	428b      	cmp	r3, r1
 b50:	d328      	bcc.n	ba4 <__udivsi3+0x6c>
 b52:	0c03      	lsrs	r3, r0, #16
 b54:	428b      	cmp	r3, r1
 b56:	d30d      	bcc.n	b74 <__udivsi3+0x3c>
 b58:	22ff      	movs	r2, #255	; 0xff
 b5a:	0209      	lsls	r1, r1, #8
 b5c:	ba12      	rev	r2, r2
 b5e:	0c03      	lsrs	r3, r0, #16
 b60:	428b      	cmp	r3, r1
 b62:	d302      	bcc.n	b6a <__udivsi3+0x32>
 b64:	1212      	asrs	r2, r2, #8
 b66:	0209      	lsls	r1, r1, #8
 b68:	d065      	beq.n	c36 <__udivsi3+0xfe>
 b6a:	0b03      	lsrs	r3, r0, #12
 b6c:	428b      	cmp	r3, r1
 b6e:	d319      	bcc.n	ba4 <__udivsi3+0x6c>
 b70:	e000      	b.n	b74 <__udivsi3+0x3c>
 b72:	0a09      	lsrs	r1, r1, #8
 b74:	0bc3      	lsrs	r3, r0, #15
 b76:	428b      	cmp	r3, r1
 b78:	d301      	bcc.n	b7e <__udivsi3+0x46>
 b7a:	03cb      	lsls	r3, r1, #15
 b7c:	1ac0      	subs	r0, r0, r3
 b7e:	4152      	adcs	r2, r2
 b80:	0b83      	lsrs	r3, r0, #14
 b82:	428b      	cmp	r3, r1
 b84:	d301      	bcc.n	b8a <__udivsi3+0x52>
 b86:	038b      	lsls	r3, r1, #14
 b88:	1ac0      	subs	r0, r0, r3
 b8a:	4152      	adcs	r2, r2
 b8c:	0b43      	lsrs	r3, r0, #13
 b8e:	428b      	cmp	r3, r1
 b90:	d301      	bcc.n	b96 <__udivsi3+0x5e>
 b92:	034b      	lsls	r3, r1, #13
 b94:	1ac0      	subs	r0, r0, r3
 b96:	4152      	adcs	r2, r2
 b98:	0b03      	lsrs	r3, r0, #12
 b9a:	428b      	cmp	r3, r1
 b9c:	d301      	bcc.n	ba2 <__udivsi3+0x6a>
 b9e:	030b      	lsls	r3, r1, #12
 ba0:	1ac0      	subs	r0, r0, r3
 ba2:	4152      	adcs	r2, r2
 ba4:	0ac3      	lsrs	r3, r0, #11
 ba6:	428b      	cmp	r3, r1
 ba8:	d301      	bcc.n	bae <__udivsi3+0x76>
 baa:	02cb      	lsls	r3, r1, #11
 bac:	1ac0      	subs	r0, r0, r3
 bae:	4152      	adcs	r2, r2
 bb0:	0a83      	lsrs	r3, r0, #10
 bb2:	428b      	cmp	r3, r1
 bb4:	d301      	bcc.n	bba <__udivsi3+0x82>
 bb6:	028b      	lsls	r3, r1, #10
 bb8:	1ac0      	subs	r0, r0, r3
 bba:	4152      	adcs	r2, r2
 bbc:	0a43      	lsrs	r3, r0, #9
 bbe:	428b      	cmp	r3, r1
 bc0:	d301      	bcc.n	bc6 <__udivsi3+0x8e>
 bc2:	024b      	lsls	r3, r1, #9
 bc4:	1ac0      	subs	r0, r0, r3
 bc6:	4152      	adcs	r2, r2
 bc8:	0a03      	lsrs	r3, r0, #8
 bca:	428b      	cmp	r3, r1
 bcc:	d301      	bcc.n	bd2 <__udivsi3+0x9a>
 bce:	020b      	lsls	r3, r1, #8
 bd0:	1ac0      	subs	r0, r0, r3
 bd2:	4152      	adcs	r2, r2
 bd4:	d2cd      	bcs.n	b72 <__udivsi3+0x3a>
 bd6:	09c3      	lsrs	r3, r0, #7
 bd8:	428b      	cmp	r3, r1
 bda:	d301      	bcc.n	be0 <__udivsi3+0xa8>
 bdc:	01cb      	lsls	r3, r1, #7
 bde:	1ac0      	subs	r0, r0, r3
 be0:	4152      	adcs	r2, r2
 be2:	0983      	lsrs	r3, r0, #6
 be4:	428b      	cmp	r3, r1
 be6:	d301      	bcc.n	bec <__udivsi3+0xb4>
 be8:	018b      	lsls	r3, r1, #6
 bea:	1ac0      	subs	r0, r0, r3
 bec:	4152      	adcs	r2, r2
 bee:	0943      	lsrs	r3, r0, #5
 bf0:	428b      	cmp	r3, r1
 bf2:	d301      	bcc.n	bf8 <__udivsi3+0xc0>
 bf4:	014b      	lsls	r3, r1, #5
 bf6:	1ac0      	subs	r0, r0, r3
 bf8:	4152      	adcs	r2, r2
 bfa:	0903      	lsrs	r3, r0, #4
 bfc:	428b      	cmp	r3, r1
 bfe:	d301      	bcc.n	c04 <__udivsi3+0xcc>
 c00:	010b      	lsls	r3, r1, #4
 c02:	1ac0      	subs	r0, r0, r3
 c04:	4152      	adcs	r2, r2
 c06:	08c3      	lsrs	r3, r0, #3
 c08:	428b      	cmp	r3, r1
 c0a:	d301      	bcc.n	c10 <__udivsi3+0xd8>
 c0c:	00cb      	lsls	r3, r1, #3
 c0e:	1ac0      	subs	r0, r0, r3
 c10:	4152      	adcs	r2, r2
 c12:	0883      	lsrs	r3, r0, #2
 c14:	428b      	cmp	r3, r1
 c16:	d301      	bcc.n	c1c <__udivsi3+0xe4>
 c18:	008b      	lsls	r3, r1, #2
 c1a:	1ac0      	subs	r0, r0, r3
 c1c:	4152      	adcs	r2, r2
 c1e:	0843      	lsrs	r3, r0, #1
 c20:	428b      	cmp	r3, r1
 c22:	d301      	bcc.n	c28 <__udivsi3+0xf0>
 c24:	004b      	lsls	r3, r1, #1
 c26:	1ac0      	subs	r0, r0, r3
 c28:	4152      	adcs	r2, r2
 c2a:	1a41      	subs	r1, r0, r1
 c2c:	d200      	bcs.n	c30 <__udivsi3+0xf8>
 c2e:	4601      	mov	r1, r0
 c30:	4152      	adcs	r2, r2
 c32:	4610      	mov	r0, r2
 c34:	4770      	bx	lr
 c36:	e7ff      	b.n	c38 <__udivsi3+0x100>
 c38:	b501      	push	{r0, lr}
 c3a:	2000      	movs	r0, #0
 c3c:	f000 f806 	bl	c4c <__aeabi_idiv0>
 c40:	bd02      	pop	{r1, pc}
 c42:	46c0      	nop			; (mov r8, r8)

00000c44 <__aeabi_uidivmod>:
 c44:	2900      	cmp	r1, #0
 c46:	d0f7      	beq.n	c38 <__udivsi3+0x100>
 c48:	e776      	b.n	b38 <__udivsi3>
 c4a:	4770      	bx	lr

00000c4c <__aeabi_idiv0>:
 c4c:	4770      	bx	lr
 c4e:	46c0      	nop			; (mov r8, r8)

00000c50 <__aeabi_uldivmod>:
 c50:	2b00      	cmp	r3, #0
 c52:	d111      	bne.n	c78 <__aeabi_uldivmod+0x28>
 c54:	2a00      	cmp	r2, #0
 c56:	d10f      	bne.n	c78 <__aeabi_uldivmod+0x28>
 c58:	2900      	cmp	r1, #0
 c5a:	d100      	bne.n	c5e <__aeabi_uldivmod+0xe>
 c5c:	2800      	cmp	r0, #0
 c5e:	d002      	beq.n	c66 <__aeabi_uldivmod+0x16>
 c60:	2100      	movs	r1, #0
 c62:	43c9      	mvns	r1, r1
 c64:	1c08      	adds	r0, r1, #0
 c66:	b407      	push	{r0, r1, r2}
 c68:	4802      	ldr	r0, [pc, #8]	; (c74 <__aeabi_uldivmod+0x24>)
 c6a:	a102      	add	r1, pc, #8	; (adr r1, c74 <__aeabi_uldivmod+0x24>)
 c6c:	1840      	adds	r0, r0, r1
 c6e:	9002      	str	r0, [sp, #8]
 c70:	bd03      	pop	{r0, r1, pc}
 c72:	46c0      	nop			; (mov r8, r8)
 c74:	ffffffd9 	.word	0xffffffd9
 c78:	b403      	push	{r0, r1}
 c7a:	4668      	mov	r0, sp
 c7c:	b501      	push	{r0, lr}
 c7e:	9802      	ldr	r0, [sp, #8]
 c80:	f000 f830 	bl	ce4 <__udivmoddi4>
 c84:	9b01      	ldr	r3, [sp, #4]
 c86:	469e      	mov	lr, r3
 c88:	b002      	add	sp, #8
 c8a:	bc0c      	pop	{r2, r3}
 c8c:	4770      	bx	lr
 c8e:	46c0      	nop			; (mov r8, r8)

00000c90 <__aeabi_lmul>:
 c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 c92:	46ce      	mov	lr, r9
 c94:	4647      	mov	r7, r8
 c96:	0415      	lsls	r5, r2, #16
 c98:	0c2d      	lsrs	r5, r5, #16
 c9a:	002e      	movs	r6, r5
 c9c:	b580      	push	{r7, lr}
 c9e:	0407      	lsls	r7, r0, #16
 ca0:	0c14      	lsrs	r4, r2, #16
 ca2:	0c3f      	lsrs	r7, r7, #16
 ca4:	4699      	mov	r9, r3
 ca6:	0c03      	lsrs	r3, r0, #16
 ca8:	437e      	muls	r6, r7
 caa:	435d      	muls	r5, r3
 cac:	4367      	muls	r7, r4
 cae:	4363      	muls	r3, r4
 cb0:	197f      	adds	r7, r7, r5
 cb2:	0c34      	lsrs	r4, r6, #16
 cb4:	19e4      	adds	r4, r4, r7
 cb6:	469c      	mov	ip, r3
 cb8:	42a5      	cmp	r5, r4
 cba:	d903      	bls.n	cc4 <__aeabi_lmul+0x34>
 cbc:	2380      	movs	r3, #128	; 0x80
 cbe:	025b      	lsls	r3, r3, #9
 cc0:	4698      	mov	r8, r3
 cc2:	44c4      	add	ip, r8
 cc4:	464b      	mov	r3, r9
 cc6:	4351      	muls	r1, r2
 cc8:	4343      	muls	r3, r0
 cca:	0436      	lsls	r6, r6, #16
 ccc:	0c36      	lsrs	r6, r6, #16
 cce:	0c25      	lsrs	r5, r4, #16
 cd0:	0424      	lsls	r4, r4, #16
 cd2:	4465      	add	r5, ip
 cd4:	19a4      	adds	r4, r4, r6
 cd6:	1859      	adds	r1, r3, r1
 cd8:	1949      	adds	r1, r1, r5
 cda:	0020      	movs	r0, r4
 cdc:	bc0c      	pop	{r2, r3}
 cde:	4690      	mov	r8, r2
 ce0:	4699      	mov	r9, r3
 ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000ce4 <__udivmoddi4>:
 ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 ce6:	4657      	mov	r7, sl
 ce8:	464e      	mov	r6, r9
 cea:	4645      	mov	r5, r8
 cec:	46de      	mov	lr, fp
 cee:	b5e0      	push	{r5, r6, r7, lr}
 cf0:	0004      	movs	r4, r0
 cf2:	b083      	sub	sp, #12
 cf4:	000d      	movs	r5, r1
 cf6:	4692      	mov	sl, r2
 cf8:	4699      	mov	r9, r3
 cfa:	428b      	cmp	r3, r1
 cfc:	d82f      	bhi.n	d5e <__udivmoddi4+0x7a>
 cfe:	d02c      	beq.n	d5a <__udivmoddi4+0x76>
 d00:	4649      	mov	r1, r9
 d02:	4650      	mov	r0, sl
 d04:	f000 f8ae 	bl	e64 <__clzdi2>
 d08:	0029      	movs	r1, r5
 d0a:	0006      	movs	r6, r0
 d0c:	0020      	movs	r0, r4
 d0e:	f000 f8a9 	bl	e64 <__clzdi2>
 d12:	1a33      	subs	r3, r6, r0
 d14:	4698      	mov	r8, r3
 d16:	3b20      	subs	r3, #32
 d18:	469b      	mov	fp, r3
 d1a:	d500      	bpl.n	d1e <__udivmoddi4+0x3a>
 d1c:	e074      	b.n	e08 <__udivmoddi4+0x124>
 d1e:	4653      	mov	r3, sl
 d20:	465a      	mov	r2, fp
 d22:	4093      	lsls	r3, r2
 d24:	001f      	movs	r7, r3
 d26:	4653      	mov	r3, sl
 d28:	4642      	mov	r2, r8
 d2a:	4093      	lsls	r3, r2
 d2c:	001e      	movs	r6, r3
 d2e:	42af      	cmp	r7, r5
 d30:	d829      	bhi.n	d86 <__udivmoddi4+0xa2>
 d32:	d026      	beq.n	d82 <__udivmoddi4+0x9e>
 d34:	465b      	mov	r3, fp
 d36:	1ba4      	subs	r4, r4, r6
 d38:	41bd      	sbcs	r5, r7
 d3a:	2b00      	cmp	r3, #0
 d3c:	da00      	bge.n	d40 <__udivmoddi4+0x5c>
 d3e:	e079      	b.n	e34 <__udivmoddi4+0x150>
 d40:	2200      	movs	r2, #0
 d42:	2300      	movs	r3, #0
 d44:	9200      	str	r2, [sp, #0]
 d46:	9301      	str	r3, [sp, #4]
 d48:	2301      	movs	r3, #1
 d4a:	465a      	mov	r2, fp
 d4c:	4093      	lsls	r3, r2
 d4e:	9301      	str	r3, [sp, #4]
 d50:	2301      	movs	r3, #1
 d52:	4642      	mov	r2, r8
 d54:	4093      	lsls	r3, r2
 d56:	9300      	str	r3, [sp, #0]
 d58:	e019      	b.n	d8e <__udivmoddi4+0xaa>
 d5a:	4282      	cmp	r2, r0
 d5c:	d9d0      	bls.n	d00 <__udivmoddi4+0x1c>
 d5e:	2200      	movs	r2, #0
 d60:	2300      	movs	r3, #0
 d62:	9200      	str	r2, [sp, #0]
 d64:	9301      	str	r3, [sp, #4]
 d66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 d68:	2b00      	cmp	r3, #0
 d6a:	d001      	beq.n	d70 <__udivmoddi4+0x8c>
 d6c:	601c      	str	r4, [r3, #0]
 d6e:	605d      	str	r5, [r3, #4]
 d70:	9800      	ldr	r0, [sp, #0]
 d72:	9901      	ldr	r1, [sp, #4]
 d74:	b003      	add	sp, #12
 d76:	bc3c      	pop	{r2, r3, r4, r5}
 d78:	4690      	mov	r8, r2
 d7a:	4699      	mov	r9, r3
 d7c:	46a2      	mov	sl, r4
 d7e:	46ab      	mov	fp, r5
 d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 d82:	42a3      	cmp	r3, r4
 d84:	d9d6      	bls.n	d34 <__udivmoddi4+0x50>
 d86:	2200      	movs	r2, #0
 d88:	2300      	movs	r3, #0
 d8a:	9200      	str	r2, [sp, #0]
 d8c:	9301      	str	r3, [sp, #4]
 d8e:	4643      	mov	r3, r8
 d90:	2b00      	cmp	r3, #0
 d92:	d0e8      	beq.n	d66 <__udivmoddi4+0x82>
 d94:	07fb      	lsls	r3, r7, #31
 d96:	0872      	lsrs	r2, r6, #1
 d98:	431a      	orrs	r2, r3
 d9a:	4646      	mov	r6, r8
 d9c:	087b      	lsrs	r3, r7, #1
 d9e:	e00e      	b.n	dbe <__udivmoddi4+0xda>
 da0:	42ab      	cmp	r3, r5
 da2:	d101      	bne.n	da8 <__udivmoddi4+0xc4>
 da4:	42a2      	cmp	r2, r4
 da6:	d80c      	bhi.n	dc2 <__udivmoddi4+0xde>
 da8:	1aa4      	subs	r4, r4, r2
 daa:	419d      	sbcs	r5, r3
 dac:	2001      	movs	r0, #1
 dae:	1924      	adds	r4, r4, r4
 db0:	416d      	adcs	r5, r5
 db2:	2100      	movs	r1, #0
 db4:	3e01      	subs	r6, #1
 db6:	1824      	adds	r4, r4, r0
 db8:	414d      	adcs	r5, r1
 dba:	2e00      	cmp	r6, #0
 dbc:	d006      	beq.n	dcc <__udivmoddi4+0xe8>
 dbe:	42ab      	cmp	r3, r5
 dc0:	d9ee      	bls.n	da0 <__udivmoddi4+0xbc>
 dc2:	3e01      	subs	r6, #1
 dc4:	1924      	adds	r4, r4, r4
 dc6:	416d      	adcs	r5, r5
 dc8:	2e00      	cmp	r6, #0
 dca:	d1f8      	bne.n	dbe <__udivmoddi4+0xda>
 dcc:	465b      	mov	r3, fp
 dce:	9800      	ldr	r0, [sp, #0]
 dd0:	9901      	ldr	r1, [sp, #4]
 dd2:	1900      	adds	r0, r0, r4
 dd4:	4169      	adcs	r1, r5
 dd6:	2b00      	cmp	r3, #0
 dd8:	db22      	blt.n	e20 <__udivmoddi4+0x13c>
 dda:	002b      	movs	r3, r5
 ddc:	465a      	mov	r2, fp
 dde:	40d3      	lsrs	r3, r2
 de0:	002a      	movs	r2, r5
 de2:	4644      	mov	r4, r8
 de4:	40e2      	lsrs	r2, r4
 de6:	001c      	movs	r4, r3
 de8:	465b      	mov	r3, fp
 dea:	0015      	movs	r5, r2
 dec:	2b00      	cmp	r3, #0
 dee:	db2c      	blt.n	e4a <__udivmoddi4+0x166>
 df0:	0026      	movs	r6, r4
 df2:	409e      	lsls	r6, r3
 df4:	0033      	movs	r3, r6
 df6:	0026      	movs	r6, r4
 df8:	4647      	mov	r7, r8
 dfa:	40be      	lsls	r6, r7
 dfc:	0032      	movs	r2, r6
 dfe:	1a80      	subs	r0, r0, r2
 e00:	4199      	sbcs	r1, r3
 e02:	9000      	str	r0, [sp, #0]
 e04:	9101      	str	r1, [sp, #4]
 e06:	e7ae      	b.n	d66 <__udivmoddi4+0x82>
 e08:	4642      	mov	r2, r8
 e0a:	2320      	movs	r3, #32
 e0c:	1a9b      	subs	r3, r3, r2
 e0e:	4652      	mov	r2, sl
 e10:	40da      	lsrs	r2, r3
 e12:	4641      	mov	r1, r8
 e14:	0013      	movs	r3, r2
 e16:	464a      	mov	r2, r9
 e18:	408a      	lsls	r2, r1
 e1a:	0017      	movs	r7, r2
 e1c:	431f      	orrs	r7, r3
 e1e:	e782      	b.n	d26 <__udivmoddi4+0x42>
 e20:	4642      	mov	r2, r8
 e22:	2320      	movs	r3, #32
 e24:	1a9b      	subs	r3, r3, r2
 e26:	002a      	movs	r2, r5
 e28:	4646      	mov	r6, r8
 e2a:	409a      	lsls	r2, r3
 e2c:	0023      	movs	r3, r4
 e2e:	40f3      	lsrs	r3, r6
 e30:	4313      	orrs	r3, r2
 e32:	e7d5      	b.n	de0 <__udivmoddi4+0xfc>
 e34:	4642      	mov	r2, r8
 e36:	2320      	movs	r3, #32
 e38:	2100      	movs	r1, #0
 e3a:	1a9b      	subs	r3, r3, r2
 e3c:	2200      	movs	r2, #0
 e3e:	9100      	str	r1, [sp, #0]
 e40:	9201      	str	r2, [sp, #4]
 e42:	2201      	movs	r2, #1
 e44:	40da      	lsrs	r2, r3
 e46:	9201      	str	r2, [sp, #4]
 e48:	e782      	b.n	d50 <__udivmoddi4+0x6c>
 e4a:	4642      	mov	r2, r8
 e4c:	2320      	movs	r3, #32
 e4e:	0026      	movs	r6, r4
 e50:	1a9b      	subs	r3, r3, r2
 e52:	40de      	lsrs	r6, r3
 e54:	002f      	movs	r7, r5
 e56:	46b4      	mov	ip, r6
 e58:	4097      	lsls	r7, r2
 e5a:	4666      	mov	r6, ip
 e5c:	003b      	movs	r3, r7
 e5e:	4333      	orrs	r3, r6
 e60:	e7c9      	b.n	df6 <__udivmoddi4+0x112>
 e62:	46c0      	nop			; (mov r8, r8)

00000e64 <__clzdi2>:
 e64:	b510      	push	{r4, lr}
 e66:	2900      	cmp	r1, #0
 e68:	d103      	bne.n	e72 <__clzdi2+0xe>
 e6a:	f000 f807 	bl	e7c <__clzsi2>
 e6e:	3020      	adds	r0, #32
 e70:	e002      	b.n	e78 <__clzdi2+0x14>
 e72:	1c08      	adds	r0, r1, #0
 e74:	f000 f802 	bl	e7c <__clzsi2>
 e78:	bd10      	pop	{r4, pc}
 e7a:	46c0      	nop			; (mov r8, r8)

00000e7c <__clzsi2>:
 e7c:	211c      	movs	r1, #28
 e7e:	2301      	movs	r3, #1
 e80:	041b      	lsls	r3, r3, #16
 e82:	4298      	cmp	r0, r3
 e84:	d301      	bcc.n	e8a <__clzsi2+0xe>
 e86:	0c00      	lsrs	r0, r0, #16
 e88:	3910      	subs	r1, #16
 e8a:	0a1b      	lsrs	r3, r3, #8
 e8c:	4298      	cmp	r0, r3
 e8e:	d301      	bcc.n	e94 <__clzsi2+0x18>
 e90:	0a00      	lsrs	r0, r0, #8
 e92:	3908      	subs	r1, #8
 e94:	091b      	lsrs	r3, r3, #4
 e96:	4298      	cmp	r0, r3
 e98:	d301      	bcc.n	e9e <__clzsi2+0x22>
 e9a:	0900      	lsrs	r0, r0, #4
 e9c:	3904      	subs	r1, #4
 e9e:	a202      	add	r2, pc, #8	; (adr r2, ea8 <__clzsi2+0x2c>)
 ea0:	5c10      	ldrb	r0, [r2, r0]
 ea2:	1840      	adds	r0, r0, r1
 ea4:	4770      	bx	lr
 ea6:	46c0      	nop			; (mov r8, r8)
 ea8:	02020304 	.word	0x02020304
 eac:	01010101 	.word	0x01010101
	...

00000eb8 <__libc_init_array>:
 eb8:	b570      	push	{r4, r5, r6, lr}
 eba:	2600      	movs	r6, #0
 ebc:	4d0c      	ldr	r5, [pc, #48]	; (ef0 <__libc_init_array+0x38>)
 ebe:	4c0d      	ldr	r4, [pc, #52]	; (ef4 <__libc_init_array+0x3c>)
 ec0:	1b64      	subs	r4, r4, r5
 ec2:	10a4      	asrs	r4, r4, #2
 ec4:	42a6      	cmp	r6, r4
 ec6:	d109      	bne.n	edc <__libc_init_array+0x24>
 ec8:	2600      	movs	r6, #0
 eca:	f000 f83d 	bl	f48 <_init>
 ece:	4d0a      	ldr	r5, [pc, #40]	; (ef8 <__libc_init_array+0x40>)
 ed0:	4c0a      	ldr	r4, [pc, #40]	; (efc <__libc_init_array+0x44>)
 ed2:	1b64      	subs	r4, r4, r5
 ed4:	10a4      	asrs	r4, r4, #2
 ed6:	42a6      	cmp	r6, r4
 ed8:	d105      	bne.n	ee6 <__libc_init_array+0x2e>
 eda:	bd70      	pop	{r4, r5, r6, pc}
 edc:	00b3      	lsls	r3, r6, #2
 ede:	58eb      	ldr	r3, [r5, r3]
 ee0:	4798      	blx	r3
 ee2:	3601      	adds	r6, #1
 ee4:	e7ee      	b.n	ec4 <__libc_init_array+0xc>
 ee6:	00b3      	lsls	r3, r6, #2
 ee8:	58eb      	ldr	r3, [r5, r3]
 eea:	4798      	blx	r3
 eec:	3601      	adds	r6, #1
 eee:	e7f2      	b.n	ed6 <__libc_init_array+0x1e>
 ef0:	00000f54 	.word	0x00000f54
 ef4:	00000f54 	.word	0x00000f54
 ef8:	00000f54 	.word	0x00000f54
 efc:	00000f58 	.word	0x00000f58
 f00:	00000202 	.word	0x00000202
 f04:	000001fe 	.word	0x000001fe
 f08:	000001fe 	.word	0x000001fe
 f0c:	00000264 	.word	0x00000264
 f10:	00000264 	.word	0x00000264
 f14:	00000216 	.word	0x00000216
 f18:	00000208 	.word	0x00000208
 f1c:	0000021c 	.word	0x0000021c
 f20:	00000252 	.word	0x00000252
 f24:	00000424 	.word	0x00000424
 f28:	00000404 	.word	0x00000404
 f2c:	00000404 	.word	0x00000404
 f30:	00000490 	.word	0x00000490
 f34:	00000416 	.word	0x00000416
 f38:	00000432 	.word	0x00000432
 f3c:	00000408 	.word	0x00000408
 f40:	00000440 	.word	0x00000440
 f44:	00000480 	.word	0x00000480

00000f48 <_init>:
 f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 f4a:	46c0      	nop			; (mov r8, r8)
 f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 f4e:	bc08      	pop	{r3}
 f50:	469e      	mov	lr, r3
 f52:	4770      	bx	lr

00000f54 <__init_array_start>:
 f54:	000000dd 	.word	0x000000dd

00000f58 <_fini>:
 f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 f5a:	46c0      	nop			; (mov r8, r8)
 f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 f5e:	bc08      	pop	{r3}
 f60:	469e      	mov	lr, r3
 f62:	4770      	bx	lr

00000f64 <__fini_array_start>:
 f64:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <g_interrupt_enabled>:
2000000c:	0001 0000                                   ....
